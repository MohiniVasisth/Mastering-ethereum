[
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "markup_files",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "markup_files = glob.glob('*.asciidoc')\nshort_link = re.compile(\"http[s]*://bit.ly/([0-9a-zA-Z]+)\")\nheading = re.compile(\"^== (.*)$\")\nresolved = {}\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "short_link",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "short_link = re.compile(\"http[s]*://bit.ly/([0-9a-zA-Z]+)\")\nheading = re.compile(\"^== (.*)$\")\nresolved = {}\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "heading",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "heading = re.compile(\"^== (.*)$\")\nresolved = {}\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)\n\t\tif heading_match:",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "resolved",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "resolved = {}\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)\n\t\tif heading_match:\n\t\t\tprint(\"\\n=== \"+heading_match.group(1)+\"\\n|===\\n| Short Link | Expanded Link\")",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\tmarkup_f",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)\n\t\tif heading_match:\n\t\t\tprint(\"\\n=== \"+heading_match.group(1)+\"\\n|===\\n| Short Link | Expanded Link\")\n\t\tshort_link_match = short_link.match(line)\n\t\tif short_link_match:",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\tmarkup_contents",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)\n\t\tif heading_match:\n\t\t\tprint(\"\\n=== \"+heading_match.group(1)+\"\\n|===\\n| Short Link | Expanded Link\")\n\t\tshort_link_match = short_link.match(line)\n\t\tif short_link_match:\n\t\t\tif short_link_match.group(1) not in short_links:",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\tshort_links",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)\n\t\tif heading_match:\n\t\t\tprint(\"\\n=== \"+heading_match.group(1)+\"\\n|===\\n| Short Link | Expanded Link\")\n\t\tshort_link_match = short_link.match(line)\n\t\tif short_link_match:\n\t\t\tif short_link_match.group(1) not in short_links:\n\t\t\t\tshort_links.append(short_link_match.group(1))\n\tsession = requests.Session()",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\t\theading_match",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "\t\theading_match = heading.match(line)\n\t\tif heading_match:\n\t\t\tprint(\"\\n=== \"+heading_match.group(1)+\"\\n|===\\n| Short Link | Expanded Link\")\n\t\tshort_link_match = short_link.match(line)\n\t\tif short_link_match:\n\t\t\tif short_link_match.group(1) not in short_links:\n\t\t\t\tshort_links.append(short_link_match.group(1))\n\tsession = requests.Session()\n\tif len(short_links):\n\t\tfor link in short_links:",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\t\tshort_link_match",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "\t\tshort_link_match = short_link.match(line)\n\t\tif short_link_match:\n\t\t\tif short_link_match.group(1) not in short_links:\n\t\t\t\tshort_links.append(short_link_match.group(1))\n\tsession = requests.Session()\n\tif len(short_links):\n\t\tfor link in short_links:\n\t\t\ttry:\n\t\t\t\tresp = session.head(\"https://bit.ly/{link}\".format(link=link), allow_redirects=True, timeout=5)\n\t\t\t\tresolved[link] = resp.url",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\tsession",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "\tsession = requests.Session()\n\tif len(short_links):\n\t\tfor link in short_links:\n\t\t\ttry:\n\t\t\t\tresp = session.head(\"https://bit.ly/{link}\".format(link=link), allow_redirects=True, timeout=5)\n\t\t\t\tresolved[link] = resp.url\n\t\t\texcept:\n\t\t\t\tresolved[link] = \"manual\"\n\t\t\tprint(\"| {link} | {resolved} \".format(link=link, resolved=resolved[link]))\n\t\tprint(\"|===\")",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresp",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "\t\t\t\tresp = session.head(\"https://bit.ly/{link}\".format(link=link), allow_redirects=True, timeout=5)\n\t\t\t\tresolved[link] = resp.url\n\t\t\texcept:\n\t\t\t\tresolved[link] = \"manual\"\n\t\t\tprint(\"| {link} | {resolved} \".format(link=link, resolved=resolved[link]))\n\t\tprint(\"|===\")",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresolved[link]",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "\t\t\t\tresolved[link] = resp.url\n\t\t\texcept:\n\t\t\t\tresolved[link] = \"manual\"\n\t\t\tprint(\"| {link} | {resolved} \".format(link=link, resolved=resolved[link]))\n\t\tprint(\"|===\")",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresolved[link]",
        "kind": 5,
        "importPath": "ETH.misc.link_short_unshort_table",
        "description": "ETH.misc.link_short_unshort_table",
        "peekOfCode": "\t\t\t\tresolved[link] = \"manual\"\n\t\t\tprint(\"| {link} | {resolved} \".format(link=link, resolved=resolved[link]))\n\t\tprint(\"|===\")",
        "detail": "ETH.misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "markup_files",
        "kind": 5,
        "importPath": "ETH.misc.readme_wordcount",
        "description": "ETH.misc.readme_wordcount",
        "peekOfCode": "markup_files = glob.glob('*.asciidoc')\nwordcount = {}\nwordcount_sum = 0\nfor markup_file in markup_files:\n    markup_f = open(markup_file, 'r')\n    markup_contents = markup_f.read()\n    markup_f.close()\n    wc = len(markup_contents.strip().split())\n    wordcount_sum += wc\n    wordcount[markup_file] = wc",
        "detail": "ETH.misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "wordcount",
        "kind": 5,
        "importPath": "ETH.misc.readme_wordcount",
        "description": "ETH.misc.readme_wordcount",
        "peekOfCode": "wordcount = {}\nwordcount_sum = 0\nfor markup_file in markup_files:\n    markup_f = open(markup_file, 'r')\n    markup_contents = markup_f.read()\n    markup_f.close()\n    wc = len(markup_contents.strip().split())\n    wordcount_sum += wc\n    wordcount[markup_file] = wc\n    print(wc, \"\\t\", markup_file)",
        "detail": "ETH.misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "wordcount_sum",
        "kind": 5,
        "importPath": "ETH.misc.readme_wordcount",
        "description": "ETH.misc.readme_wordcount",
        "peekOfCode": "wordcount_sum = 0\nfor markup_file in markup_files:\n    markup_f = open(markup_file, 'r')\n    markup_contents = markup_f.read()\n    markup_f.close()\n    wc = len(markup_contents.strip().split())\n    wordcount_sum += wc\n    wordcount[markup_file] = wc\n    print(wc, \"\\t\", markup_file)\nprint(wordcount_sum)",
        "detail": "ETH.misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "readme_f",
        "kind": 5,
        "importPath": "ETH.misc.readme_wordcount",
        "description": "ETH.misc.readme_wordcount",
        "peekOfCode": "readme_f = open('README.md','r')\nreadme = readme_f.read()\nreadme_f.close()\nwc_tag_re = re.compile(\"\\| +(\\[.*\\])\\((.*asciidoc)\\) +\\| +[\\#]+ +\\|(.*)$\")\nreadme_f = open('README.md','w')\nfor line in readme.splitlines():\n\tmatch_re = wc_tag_re.match(line)\n\tif match_re:\n\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")",
        "detail": "ETH.misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "readme",
        "kind": 5,
        "importPath": "ETH.misc.readme_wordcount",
        "description": "ETH.misc.readme_wordcount",
        "peekOfCode": "readme = readme_f.read()\nreadme_f.close()\nwc_tag_re = re.compile(\"\\| +(\\[.*\\])\\((.*asciidoc)\\) +\\| +[\\#]+ +\\|(.*)$\")\nreadme_f = open('README.md','w')\nfor line in readme.splitlines():\n\tmatch_re = wc_tag_re.match(line)\n\tif match_re:\n\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")",
        "detail": "ETH.misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "wc_tag_re",
        "kind": 5,
        "importPath": "ETH.misc.readme_wordcount",
        "description": "ETH.misc.readme_wordcount",
        "peekOfCode": "wc_tag_re = re.compile(\"\\| +(\\[.*\\])\\((.*asciidoc)\\) +\\| +[\\#]+ +\\|(.*)$\")\nreadme_f = open('README.md','w')\nfor line in readme.splitlines():\n\tmatch_re = wc_tag_re.match(line)\n\tif match_re:\n\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")\nreadme_f.close()",
        "detail": "ETH.misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "readme_f",
        "kind": 5,
        "importPath": "ETH.misc.readme_wordcount",
        "description": "ETH.misc.readme_wordcount",
        "peekOfCode": "readme_f = open('README.md','w')\nfor line in readme.splitlines():\n\tmatch_re = wc_tag_re.match(line)\n\tif match_re:\n\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")\nreadme_f.close()",
        "detail": "ETH.misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "\tmatch_re",
        "kind": 5,
        "importPath": "ETH.misc.readme_wordcount",
        "description": "ETH.misc.readme_wordcount",
        "peekOfCode": "\tmatch_re = wc_tag_re.match(line)\n\tif match_re:\n\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")\nreadme_f.close()",
        "detail": "ETH.misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "\t\twordcount_bar",
        "kind": 5,
        "importPath": "ETH.misc.readme_wordcount",
        "description": "ETH.misc.readme_wordcount",
        "peekOfCode": "\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")\nreadme_f.close()",
        "detail": "ETH.misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "\t\tline",
        "kind": 5,
        "importPath": "ETH.misc.readme_wordcount",
        "description": "ETH.misc.readme_wordcount",
        "peekOfCode": "\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")\nreadme_f.close()",
        "detail": "ETH.misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "markup_files",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "markup_files = glob.glob('*.asciidoc')\nanchor_re = re.compile(\"\\[\\[(.*)\\]\\]\")\nref_re = re.compile(\".*\\<\\<([^\\>]*)\\>\\>.\")\nrefs = []\nanchors = []\ndup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "anchor_re",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "anchor_re = re.compile(\"\\[\\[(.*)\\]\\]\")\nref_re = re.compile(\".*\\<\\<([^\\>]*)\\>\\>.\")\nrefs = []\nanchors = []\ndup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "ref_re",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "ref_re = re.compile(\".*\\<\\<([^\\>]*)\\>\\>.\")\nrefs = []\nanchors = []\ndup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "refs",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "refs = []\nanchors = []\ndup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)\n\t\tif ref_match:",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "anchors",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "anchors = []\ndup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)\n\t\tif ref_match:\n\t\t\tif ref_match.group(1) not in refs:",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "dup_anchors",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "dup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)\n\t\tif ref_match:\n\t\t\tif ref_match.group(1) not in refs:\n\t\t\t\trefs.append(ref_match.group(1))",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "\tmarkup_f",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)\n\t\tif ref_match:\n\t\t\tif ref_match.group(1) not in refs:\n\t\t\t\trefs.append(ref_match.group(1))\n\t\tanchor_match = anchor_re.match(line)\n\t\tif anchor_match:",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "\tmarkup_contents",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)\n\t\tif ref_match:\n\t\t\tif ref_match.group(1) not in refs:\n\t\t\t\trefs.append(ref_match.group(1))\n\t\tanchor_match = anchor_re.match(line)\n\t\tif anchor_match:\n\t\t\tif anchor_match.group(1) not in anchors:",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "\t\tref_match",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "\t\tref_match = ref_re.match(line)\n\t\tif ref_match:\n\t\t\tif ref_match.group(1) not in refs:\n\t\t\t\trefs.append(ref_match.group(1))\n\t\tanchor_match = anchor_re.match(line)\n\t\tif anchor_match:\n\t\t\tif anchor_match.group(1) not in anchors:\n\t\t\t\tanchors.append(anchor_match.group(1))\n\t\t\telse:\n\t\t\t\tdup_anchors.append(anchor_match.group(1))",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "\t\tanchor_match",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "\t\tanchor_match = anchor_re.match(line)\n\t\tif anchor_match:\n\t\t\tif anchor_match.group(1) not in anchors:\n\t\t\t\tanchors.append(anchor_match.group(1))\n\t\t\telse:\n\t\t\t\tdup_anchors.append(anchor_match.group(1))\nprint(\"\\nAnchors: \", len(anchors))\nprint(\"\\nDuplicated Anchors: \", len(dup_anchors))\nprint(dup_anchors)\nprint(\"\\nReferences: \", len(refs))",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "broken_refs",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "broken_refs = list(set(refs) - set(anchors))\nprint(\"\\nBroken references: \", len(broken_refs), broken_refs)\nmissing_refs = list(set(anchors) -  set(refs))\nprint(\"\\nUn-referenced Anchors: \", len(missing_refs), missing_refs)",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "missing_refs",
        "kind": 5,
        "importPath": "ETH.misc.reconcile_references",
        "description": "ETH.misc.reconcile_references",
        "peekOfCode": "missing_refs = list(set(anchors) -  set(refs))\nprint(\"\\nUn-referenced Anchors: \", len(missing_refs), missing_refs)",
        "detail": "ETH.misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "markup_files",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "markup_files = glob.glob('*.asciidoc')\nshort_link = re.compile(\"http[s]*://bit.ly/([0-9a-zA-Z]+)\")\nheading = re.compile(\"^== (.*)$\")\nresolved = {}\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "short_link",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "short_link = re.compile(\"http[s]*://bit.ly/([0-9a-zA-Z]+)\")\nheading = re.compile(\"^== (.*)$\")\nresolved = {}\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "heading",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "heading = re.compile(\"^== (.*)$\")\nresolved = {}\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)\n\t\tif heading_match:",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "resolved",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "resolved = {}\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)\n\t\tif heading_match:\n\t\t\tprint(\"\\n=== \"+heading_match.group(1)+\"\\n|===\\n| Short Link | Expanded Link\")",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\tmarkup_f",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)\n\t\tif heading_match:\n\t\t\tprint(\"\\n=== \"+heading_match.group(1)+\"\\n|===\\n| Short Link | Expanded Link\")\n\t\tshort_link_match = short_link.match(line)\n\t\tif short_link_match:",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\tmarkup_contents",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)\n\t\tif heading_match:\n\t\t\tprint(\"\\n=== \"+heading_match.group(1)+\"\\n|===\\n| Short Link | Expanded Link\")\n\t\tshort_link_match = short_link.match(line)\n\t\tif short_link_match:\n\t\t\tif short_link_match.group(1) not in short_links:",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\tshort_links",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "\tshort_links = []\n\tfor line in markup_contents.splitlines():\n\t\theading_match = heading.match(line)\n\t\tif heading_match:\n\t\t\tprint(\"\\n=== \"+heading_match.group(1)+\"\\n|===\\n| Short Link | Expanded Link\")\n\t\tshort_link_match = short_link.match(line)\n\t\tif short_link_match:\n\t\t\tif short_link_match.group(1) not in short_links:\n\t\t\t\tshort_links.append(short_link_match.group(1))\n\tsession = requests.Session()",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\t\theading_match",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "\t\theading_match = heading.match(line)\n\t\tif heading_match:\n\t\t\tprint(\"\\n=== \"+heading_match.group(1)+\"\\n|===\\n| Short Link | Expanded Link\")\n\t\tshort_link_match = short_link.match(line)\n\t\tif short_link_match:\n\t\t\tif short_link_match.group(1) not in short_links:\n\t\t\t\tshort_links.append(short_link_match.group(1))\n\tsession = requests.Session()\n\tif len(short_links):\n\t\tfor link in short_links:",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\t\tshort_link_match",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "\t\tshort_link_match = short_link.match(line)\n\t\tif short_link_match:\n\t\t\tif short_link_match.group(1) not in short_links:\n\t\t\t\tshort_links.append(short_link_match.group(1))\n\tsession = requests.Session()\n\tif len(short_links):\n\t\tfor link in short_links:\n\t\t\ttry:\n\t\t\t\tresp = session.head(\"https://bit.ly/{link}\".format(link=link), allow_redirects=True, timeout=5)\n\t\t\t\tresolved[link] = resp.url",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\tsession",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "\tsession = requests.Session()\n\tif len(short_links):\n\t\tfor link in short_links:\n\t\t\ttry:\n\t\t\t\tresp = session.head(\"https://bit.ly/{link}\".format(link=link), allow_redirects=True, timeout=5)\n\t\t\t\tresolved[link] = resp.url\n\t\t\texcept:\n\t\t\t\tresolved[link] = \"manual\"\n\t\t\tprint(\"| {link} | {resolved} \".format(link=link, resolved=resolved[link]))\n\t\tprint(\"|===\")",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresp",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "\t\t\t\tresp = session.head(\"https://bit.ly/{link}\".format(link=link), allow_redirects=True, timeout=5)\n\t\t\t\tresolved[link] = resp.url\n\t\t\texcept:\n\t\t\t\tresolved[link] = \"manual\"\n\t\t\tprint(\"| {link} | {resolved} \".format(link=link, resolved=resolved[link]))\n\t\tprint(\"|===\")",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresolved[link]",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "\t\t\t\tresolved[link] = resp.url\n\t\t\texcept:\n\t\t\t\tresolved[link] = \"manual\"\n\t\t\tprint(\"| {link} | {resolved} \".format(link=link, resolved=resolved[link]))\n\t\tprint(\"|===\")",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresolved[link]",
        "kind": 5,
        "importPath": "misc.link_short_unshort_table",
        "description": "misc.link_short_unshort_table",
        "peekOfCode": "\t\t\t\tresolved[link] = \"manual\"\n\t\t\tprint(\"| {link} | {resolved} \".format(link=link, resolved=resolved[link]))\n\t\tprint(\"|===\")",
        "detail": "misc.link_short_unshort_table",
        "documentation": {}
    },
    {
        "label": "markup_files",
        "kind": 5,
        "importPath": "misc.readme_wordcount",
        "description": "misc.readme_wordcount",
        "peekOfCode": "markup_files = glob.glob('*.asciidoc')\nwordcount = {}\nwordcount_sum = 0\nfor markup_file in markup_files:\n    markup_f = open(markup_file, 'r')\n    markup_contents = markup_f.read()\n    markup_f.close()\n    wc = len(markup_contents.strip().split())\n    wordcount_sum += wc\n    wordcount[markup_file] = wc",
        "detail": "misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "wordcount",
        "kind": 5,
        "importPath": "misc.readme_wordcount",
        "description": "misc.readme_wordcount",
        "peekOfCode": "wordcount = {}\nwordcount_sum = 0\nfor markup_file in markup_files:\n    markup_f = open(markup_file, 'r')\n    markup_contents = markup_f.read()\n    markup_f.close()\n    wc = len(markup_contents.strip().split())\n    wordcount_sum += wc\n    wordcount[markup_file] = wc\n    print(wc, \"\\t\", markup_file)",
        "detail": "misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "wordcount_sum",
        "kind": 5,
        "importPath": "misc.readme_wordcount",
        "description": "misc.readme_wordcount",
        "peekOfCode": "wordcount_sum = 0\nfor markup_file in markup_files:\n    markup_f = open(markup_file, 'r')\n    markup_contents = markup_f.read()\n    markup_f.close()\n    wc = len(markup_contents.strip().split())\n    wordcount_sum += wc\n    wordcount[markup_file] = wc\n    print(wc, \"\\t\", markup_file)\nprint(wordcount_sum)",
        "detail": "misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "readme_f",
        "kind": 5,
        "importPath": "misc.readme_wordcount",
        "description": "misc.readme_wordcount",
        "peekOfCode": "readme_f = open('README.md','r')\nreadme = readme_f.read()\nreadme_f.close()\nwc_tag_re = re.compile(\"\\| +(\\[.*\\])\\((.*asciidoc)\\) +\\| +[\\#]+ +\\|(.*)$\")\nreadme_f = open('README.md','w')\nfor line in readme.splitlines():\n\tmatch_re = wc_tag_re.match(line)\n\tif match_re:\n\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")",
        "detail": "misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "readme",
        "kind": 5,
        "importPath": "misc.readme_wordcount",
        "description": "misc.readme_wordcount",
        "peekOfCode": "readme = readme_f.read()\nreadme_f.close()\nwc_tag_re = re.compile(\"\\| +(\\[.*\\])\\((.*asciidoc)\\) +\\| +[\\#]+ +\\|(.*)$\")\nreadme_f = open('README.md','w')\nfor line in readme.splitlines():\n\tmatch_re = wc_tag_re.match(line)\n\tif match_re:\n\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")",
        "detail": "misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "wc_tag_re",
        "kind": 5,
        "importPath": "misc.readme_wordcount",
        "description": "misc.readme_wordcount",
        "peekOfCode": "wc_tag_re = re.compile(\"\\| +(\\[.*\\])\\((.*asciidoc)\\) +\\| +[\\#]+ +\\|(.*)$\")\nreadme_f = open('README.md','w')\nfor line in readme.splitlines():\n\tmatch_re = wc_tag_re.match(line)\n\tif match_re:\n\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")\nreadme_f.close()",
        "detail": "misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "readme_f",
        "kind": 5,
        "importPath": "misc.readme_wordcount",
        "description": "misc.readme_wordcount",
        "peekOfCode": "readme_f = open('README.md','w')\nfor line in readme.splitlines():\n\tmatch_re = wc_tag_re.match(line)\n\tif match_re:\n\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")\nreadme_f.close()",
        "detail": "misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "\tmatch_re",
        "kind": 5,
        "importPath": "misc.readme_wordcount",
        "description": "misc.readme_wordcount",
        "peekOfCode": "\tmatch_re = wc_tag_re.match(line)\n\tif match_re:\n\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")\nreadme_f.close()",
        "detail": "misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "\t\twordcount_bar",
        "kind": 5,
        "importPath": "misc.readme_wordcount",
        "description": "misc.readme_wordcount",
        "peekOfCode": "\t\twordcount_bar = \"#\" * ((wordcount[match_re.group(2)]//500) + 1)\n\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")\nreadme_f.close()",
        "detail": "misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "\t\tline",
        "kind": 5,
        "importPath": "misc.readme_wordcount",
        "description": "misc.readme_wordcount",
        "peekOfCode": "\t\tline = match_re.expand(\"| \\g<1>(\\g<2>) | \" + wordcount_bar + \" |\\g<3>\")\n\treadme_f.write(line+\"\\n\")\nreadme_f.close()",
        "detail": "misc.readme_wordcount",
        "documentation": {}
    },
    {
        "label": "markup_files",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "markup_files = glob.glob('*.asciidoc')\nanchor_re = re.compile(\"\\[\\[(.*)\\]\\]\")\nref_re = re.compile(\".*\\<\\<([^\\>]*)\\>\\>.\")\nrefs = []\nanchors = []\ndup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()",
        "detail": "misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "anchor_re",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "anchor_re = re.compile(\"\\[\\[(.*)\\]\\]\")\nref_re = re.compile(\".*\\<\\<([^\\>]*)\\>\\>.\")\nrefs = []\nanchors = []\ndup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():",
        "detail": "misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "ref_re",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "ref_re = re.compile(\".*\\<\\<([^\\>]*)\\>\\>.\")\nrefs = []\nanchors = []\ndup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)",
        "detail": "misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "refs",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "refs = []\nanchors = []\ndup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)\n\t\tif ref_match:",
        "detail": "misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "anchors",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "anchors = []\ndup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)\n\t\tif ref_match:\n\t\t\tif ref_match.group(1) not in refs:",
        "detail": "misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "dup_anchors",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "dup_anchors = []\nfor markup_file in markup_files:\n\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)\n\t\tif ref_match:\n\t\t\tif ref_match.group(1) not in refs:\n\t\t\t\trefs.append(ref_match.group(1))",
        "detail": "misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "\tmarkup_f",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "\tmarkup_f = open(markup_file, 'r')\n\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)\n\t\tif ref_match:\n\t\t\tif ref_match.group(1) not in refs:\n\t\t\t\trefs.append(ref_match.group(1))\n\t\tanchor_match = anchor_re.match(line)\n\t\tif anchor_match:",
        "detail": "misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "\tmarkup_contents",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "\tmarkup_contents = markup_f.read()\n\tmarkup_f.close()\n\tfor line in markup_contents.splitlines():\n\t\tref_match = ref_re.match(line)\n\t\tif ref_match:\n\t\t\tif ref_match.group(1) not in refs:\n\t\t\t\trefs.append(ref_match.group(1))\n\t\tanchor_match = anchor_re.match(line)\n\t\tif anchor_match:\n\t\t\tif anchor_match.group(1) not in anchors:",
        "detail": "misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "\t\tref_match",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "\t\tref_match = ref_re.match(line)\n\t\tif ref_match:\n\t\t\tif ref_match.group(1) not in refs:\n\t\t\t\trefs.append(ref_match.group(1))\n\t\tanchor_match = anchor_re.match(line)\n\t\tif anchor_match:\n\t\t\tif anchor_match.group(1) not in anchors:\n\t\t\t\tanchors.append(anchor_match.group(1))\n\t\t\telse:\n\t\t\t\tdup_anchors.append(anchor_match.group(1))",
        "detail": "misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "\t\tanchor_match",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "\t\tanchor_match = anchor_re.match(line)\n\t\tif anchor_match:\n\t\t\tif anchor_match.group(1) not in anchors:\n\t\t\t\tanchors.append(anchor_match.group(1))\n\t\t\telse:\n\t\t\t\tdup_anchors.append(anchor_match.group(1))\nprint(\"\\nAnchors: \", len(anchors))\nprint(\"\\nDuplicated Anchors: \", len(dup_anchors))\nprint(dup_anchors)\nprint(\"\\nReferences: \", len(refs))",
        "detail": "misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "broken_refs",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "broken_refs = list(set(refs) - set(anchors))\nprint(\"\\nBroken references: \", len(broken_refs), broken_refs)\nmissing_refs = list(set(anchors) -  set(refs))\nprint(\"\\nUn-referenced Anchors: \", len(missing_refs), missing_refs)",
        "detail": "misc.reconcile_references",
        "documentation": {}
    },
    {
        "label": "missing_refs",
        "kind": 5,
        "importPath": "misc.reconcile_references",
        "description": "misc.reconcile_references",
        "peekOfCode": "missing_refs = list(set(anchors) -  set(refs))\nprint(\"\\nUn-referenced Anchors: \", len(missing_refs), missing_refs)",
        "detail": "misc.reconcile_references",
        "documentation": {}
    }
]