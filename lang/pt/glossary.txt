[preface]
== Glossário Rápido

Este glossário rápido contém muitos dos termos usados em relação ao Ethereum. Esses termos são usados em todo o livro, portanto, marque-o como referência rápida.

Conta::
((("account","defined"))) Um objeto que contém um endereço, saldo, nonce e armazenamento e código opcionais. Uma conta pode ser uma conta de contrato ou uma conta de propriedade externa (EOA).

Address (Endereço)::
((("addresses","defined"))) Geralmente, isso representa um EOA ou contrato que pode receber (endereço de destino) ou enviar transações (endereço de origem) na blockchain. Mais especificamente, são os 160 bits mais à direita de um hash Keccak de uma chave pública ECDSA.

Assert (Afirmar)::
((("assert function","defined"))) No Solidity, +assert (false)+ compila para +0xfe+, um código de operação inválido, que consome todo o gás restante e reverte todas as alterações. Quando uma instrução +assert()+ falha, algo muito errado e inesperado está acontecendo, e você precisará corrigir seu código. Você deve usar +assert()+ para evitar condições que nunca devem ocorrer.

Big-endian::
((("big-endian, defined"))) Uma representação numérica posicional onde o dígito mais significativo é o primeiro. O oposto de little-endian, onde o dígito menos significativo é o primeiro.

BIPs::
((("Bitcoin improvement proposals (BIPs)"))) Propostas de melhoria de Bitcoin. Um conjunto de propostas que os membros da comunidade Bitcoin enviaram para melhorar o Bitcoin. Por exemplo, o BIP-21 é uma proposta para melhorar o esquema de identificador uniforme de recursos (URI) do Bitcoin.

Block (Quadra)::
((("block, defined"))) Uma coleção de informações necessárias (um cabeçalho de bloco) sobre as transações abrangidas e um conjunto de outros cabeçalhos de bloco conhecidos como ommers. Os blocos são adicionados à rede Ethereum pelos mineradores.

Blockchain::
((("blockchain","defined"))) No Ethereum, uma sequência de blocos validados pelo sistema de prova de trabalho, cada um vinculado ao seu antecessor até o bloco de gênese. Isso varia em relação ao protocolo Bitcoin, pois ele não tem limite de tamanho de bloco; em vez disso, usa limites de gás variados.

Bytecode::
((("bytecode", seealso="EVM bytecode"))) Um conjunto de instruções abstrato projetado para execução eficiente por um intérprete de software ou uma máquina virtual. Diferentemente do código-fonte legível por humanos, o bytecode é expresso em formato numérico.

Byzantium fork (Forquilha de Bizâncio) ::
((("Byzantium fork"))) O primeiro de dois garfos rígidos para o estágio de desenvolvimento do Metropolis. Ele incluía o EIP-649: Atraso na Bomba com Dificuldade em Metrópole e Redução da Recompensa em Bloco, onde a Era do Gelo (veja abaixo) foi adiada em 1 ano e a recompensa em bloco foi reduzida de 5 para 3 éter.

Compiling (Compilando) ::
((("compiling","defined"))) Convertendo código escrito em uma linguagem de programação de alto nível (por exemplo, Solidity) em uma linguagem de nível inferior (por exemplo, código de bytes EVM).

Consensus (Consenso)::
((("consensus","defined"))) Quando vários nós - geralmente a maioria dos nós da rede - têm todos os mesmos blocos em sua melhor blockchain validada localmente. Não deve ser confundido com regras de consenso.

Consensus rules (Regras de consenso):
((("consensus rules"))) As regras de validação de bloco que os nós completos seguem para permanecer em consenso com outros nós. Não deve ser confundido com consenso.

Garfo de Constantinopla ::
((("Constantinople fork"))) A segunda parte do estágio Metropolis, originalmente planejada para meados de 2018. Espera-se incluir uma mudança para um algoritmo de consenso híbrido de prova de trabalho / prova de participação, entre outras alterações.

Contract account (Conta do contrato) ::
((("contract accounts","defined")))((("smart contracts","defined"))) Uma conta contendo código que é executado sempre que recebe uma transação de outra conta (EOA ou contrato).

Contract creation transaction (Transação de criação de contrato) ::
((("contract creation transaction"))) Uma transação especial, com o "endereço zero" como destinatário, usada para registrar um contrato e registrá-lo no blockchain Ethereum (consulte "endereço zero").

DAO::
((("DAO (Decentralized Autonomous Organization)","defined"))) Organização Autônoma Descentralizada. Uma empresa ou outra organização que opera sem gerenciamento hierárquico. Também pode se referir a um contrato chamado "The DAO" lançado em 30 de abril de 2016, que foi hackeado em junho de 2016; isso motivou um hard fork (codinome DAO) no bloco 1.192.000, que reverteu o contrato DAO hackeado e fez com que Ethereum e Ethereum Classic se dividissem em dois sistemas concorrentes.

DApp::
((("DApps (decentralized applications)","defined"))) Aplicativo descentralizado. No mínimo, é um contrato inteligente e uma interface de usuário da web. De forma mais ampla, um DApp é um aplicativo da Web construído sobre serviços de infraestrutura abertos, descentralizados e ponto a ponto. Além disso, muitos DApps incluem armazenamento descentralizado e / ou um protocolo e plataforma de mensagens.

Ato::
((("deed","defined"))) Padrão de token não fungível (NFT) introduzido pela proposta do ERC721. Diferentemente dos tokens do ERC20, as ações provam propriedade e não são intercambiáveis, embora não sejam reconhecidas como documentos legais em nenhuma jurisdição - pelo menos não atualmente (consulte também "NFT").

Difficulty (Dificuldade)::
((("difficulty setting"))) Uma configuração de toda a rede que controla a quantidade de computação necessária para produzir uma prova de trabalho.

Digital signature (Assinatura digital)::
((("digital signatures","defined"))) Uma sequência curta de dados que um usuário produz para um documento usando uma chave privada, para que qualquer pessoa com a chave pública correspondente, a assinatura e o documento possa verificar se (1) o documento foi "assinado" pelo proprietário dessa chave privada específica e (2) o documento não foi alterado depois de assinado.

ECDSA::
((("Elliptic Curve Digital Signature Algorithm (ECDSA)","defined"))) Algoritmo de assinatura digital da curva elíptica. Um algoritmo criptográfico usado pelo Ethereum para garantir que os fundos possam ser gastos apenas por seus proprietários.

EIP::
((("EIPs (Ethereum Improvement Proposals)","defined"))) Proposta de melhoria do Ethereum. Um documento de design que fornece informações à comunidade Ethereum, descrevendo um novo recurso proposto ou seus processos ou ambiente. Para mais informações, consulte https://github.com/ethereum/EIPs (consulte também "ERC").

ENS::
((("ENS (Ethereum Name Service)"))) Ethereum Name Service. Para mais informações, consulte https://github.com/ethereum/ens/.

Entropy (Entropia) ::
((("entropy","defined"))) No contexto da criptografia, falta de previsibilidade ou nível de aleatoriedade. Ao gerar informações secretas, como chaves privadas, os algoritmos geralmente contam com uma fonte de alta entropia para garantir que a saída seja imprevisível.

EOA::
((("EOA (Externally Owned Account)","defined"))) Conta de propriedade externa. Uma conta criada por ou para usuários humanos da rede Ethereum.

ERC::
((("ERC (Ethereum Request for Comments)", seealso="EIPs (Ethereum Improvement Proposals)"))) Ethereum Request for Comments. Um rótulo dado a alguns EIPs que tentam definir um padrão específico de uso do Ethereum.

Ethash::
((("Ethash"))) Um algoritmo de prova de trabalho para o Ethereum 1.0. Para mais informações, consulte https://github.com/ethereum/wiki/wiki/Ethash.

Ether (Éter)::
((("Ether (cryptocurrency)"))) A criptomoeda nativa usada pelo ecossistema Ethereum, que cobre os custos de gás ao executar contratos inteligentes. Seu símbolo é Ξ, o caractere grego Xi maiúsculo.

Event (Evento)::
((("events","defined"))) Permite o uso de recursos de log do EVM. Os DApps podem ouvir eventos e usá-los para acionar retornos de chamada JavaScript na interface do usuário. Para mais informações, consulte http://solidity.readthedocs.io/en/develop/contracts.html#events.

EVM::
((("EVM (Ethereum Virtual Machine)","defined"))) Ethereum Virtual Machine. Uma máquina virtual baseada em pilha que executa o bytecode. No Ethereum, o modelo de execução especifica como o estado do sistema é alterado, dada uma série de instruções de bytecode e uma pequena tupla de dados ambientais. Isso é especificado por meio de um modelo formal de uma máquina de estado virtual.

Linguagem assembly EVM ::
((("EVM assembly language"))) Uma forma legível por humanos do bytecode EVM.

Fallback function (Função de Fallback) ::
((("fallback function"))) Uma função padrão chamada na ausência de dados ou um nome de função declarado.

Faucet (Torneira)::
((("faucet, defined"))) Um serviço que distribui fundos na forma de éter de teste gratuito que pode ser usado em uma rede de teste.

Finney::
((("finney"))) Uma denominação de éter. 1 finney = 10 ^ 15 ^ wei, 10 ^ 3 ^ finney = 1 éter.

Fork (Garfo)::
((("forks"))) Uma alteração no protocolo que causa a criação de uma cadeia alternativa ou uma divergência temporal em dois caminhos de blocos em potencial durante a mineração.


Frontier (Fronteira)::
((("Frontier"))) O estágio inicial de desenvolvimento de teste do Ethereum, que durou de julho de 2015 a março de 2016.

Ganache::
((("Ganache","defined"))) Uma blockchain pessoal do Ethereum que você pode usar para executar testes, executar comandos e inspecionar o estado enquanto controla como a cadeia opera.

Gás::
((("gas","defined"))) Um combustível virtual usado no Ethereum para executar contratos inteligentes. O EVM usa um mecanismo de contabilidade para medir o consumo de gás e limitar o consumo de recursos de computação (consulte "Turing complete").

Gas limit (Limite de gás) ::
((("gas limit"))) A quantidade máxima de gás que uma transação ou bloco pode consumir.

Gavin Wood::
((("Wood, Dr. Gavin"))) Um programador britânico que é co-fundador e ex-CTO da Ethereum. Em agosto de 2014, ele propôs o Solidity, uma linguagem de programação orientada a contratos para escrever contratos inteligentes.

Genesis block (Bloco Genesis) ::
((("genesis block"))) O primeiro bloco de uma blockchain, usado para inicializar uma rede específica e sua criptomoeda.

Geth::
((("Geth (Go-Ethereum)","defined"))) Vá para o Ethereum. Uma das implementações mais importantes do protocolo Ethereum, escrita em Go.

Hard fork (Garfo rígido) ::
((("hard forks"))) Uma divergência permanente na blockchain; também conhecida como mudança difícil. Geralmente, ocorre quando nós não atualizados não podem validar blocos criados por nós atualizados que seguem regras de consenso mais recentes. Não deve ser confundido com um garfo, garfo macio, garfo de software ou garfo Git.

Hash::
((("hash, defined"))) Uma impressão digital de comprimento fixo de entrada de tamanho variável, produzida por uma função de hash.

HD wallet (Carteira HD) ::
((("hierarchical deterministic wallets (BIP-32/BIP-44)","defined"))) Uma carteira usando o protocolo de criação e transferência de chaves determinísticas hierárquicas (HD) (BIP-32).

HD wallet seed (Semente de carteira HD) ::
((("HD wallet seed")))((("seeds", seealso="root seeds"))) Um valor usado para gerar a chave privada mestre e o código da cadeia mestre de uma carteira HD. A semente da carteira pode ser representada por palavras mnemônicas, facilitando a cópia, o backup e a restauração de chaves privadas por seres humanos.

Homestead (Herdade)::
((("Homestead"))) O segundo estágio de desenvolvimento do Ethereum, lançado em março de 2016 no bloco # 1.150.000.

ICAP::
((("ICAP (Inter-exchange Client Address Protocol)")))((("Inter-exchange Client Address Protocol (ICAP)"))) Protocolo de Endereço do Cliente em Troca. Uma codificação de endereço Ethereum que é parcialmente compatível com a codificação IBAN (International Bank Account Number), oferecendo uma codificação versátil, com soma de verificação e interoperável para endereços Ethereum. Os endereços ICAP usam um novo código de pseudo-país do IBAN: XE, que significa "eXtended Ethereum", como usado em moedas não jurisdicionais (por exemplo, XBT, XRP, XCP).

Ice Age (Era do Gelo)::
((("Ice Age"))) Um hard fork do Ethereum no bloco 200.000 para introduzir um aumento exponencial de dificuldade (também conhecido como Dificuldade Bomb), motivando uma transição para a prova de aposta.

IDE::
((("IDE (Integrated Development Environment)")))((("Integrated Development Environment (IDE)"))) Ambiente de desenvolvimento integrado. Uma interface do usuário que normalmente combina um editor de código, compilador, tempo de execução e depurador.

Immutable deployed code problem (Problema de código implantado imutável):
((("immutable deployed code problem"))) Depois que o código de um contrato (ou biblioteca) é implantado, ele se torna imutável. As práticas padrão de desenvolvimento de software dependem da capacidade de corrigir possíveis erros e adicionar novos recursos, portanto isso representa um desafio para o desenvolvimento de contratos inteligentes.

Internal transaction (also "message") Transação interna (também "mensagem") ::
((("internal transaction (message)"))) Uma transação enviada de uma conta de contrato para outra conta de contrato ou EOA.

IPFS::
((("IPFS (InterPlanetary File System)")))InterPlanetary File System. A protocol, network, and open source project designed to create a content-addressable, peer-to-peer method of storing and sharing hypermedia in a distributed filesystem.

KDF::
((("key derivation function (KDF)"))) Função de derivação de teclas. Também conhecido como "algoritmo de alongamento de senha", é usado pelos formatos de keystore para proteger contra ataques de força bruta, dicionário e tabela arco-íris na criptografia de senha, hash repetidamente.

Keccak-256::
((("Keccak-256 hash function"))) Função hash criptográfica usada no Ethereum. Keccak-256 foi padronizado como SHA-3.

Keystore file (Arquivo Keystore) ::
((("keystore file"))) Um arquivo codificado em JSON que contém uma única chave privada (gerada aleatoriamente), criptografada por uma senha para uma segurança extra.

LevelDB::
((("LevelDB"))) Um armazenamento de valor-chave em disco de código-fonte aberto, implementado como uma biblioteca leve e de uso único, com ligações a várias plataformas.

Library (Biblioteca)::
((("library contract"))) Um tipo especial de contrato que não possui funções a pagar, função de fallback e armazenamento de dados. Portanto, ele não pode receber ou manter éter ou armazenar dados. Uma biblioteca serve como código implantado anteriormente que outros contratos podem exigir computação somente leitura.

Lightweight client (Cliente leve) ::
((("light/lightweight client"))) Um cliente Ethereum que não armazena uma cópia local da blockchain ou valida blocos e transações. Ele oferece as funções de uma carteira e pode criar e transmitir transações.

Merkle Patricia Tree (Árvore de Merkle Patricia) ::
((("Merkle Patricia Tree"))) Uma estrutura de dados usada no Ethereum para armazenar com eficiência pares de chave-valor.

Message (Mensagem)::
((("message, defined"))) Uma transação interna que nunca é serializada e enviada apenas no EVM.

Message call (Chamada de mensagem) ::
((("message call"))) O ato de passar uma mensagem de uma conta para outra. Se a conta de destino estiver associada ao código EVM, a VM será iniciada com o estado desse objeto e a mensagem será acionada.
sobre.

METoken::
((("METoken (Mastering Ethereum Token)","defined"))) Mastering Ethereum Token. Um token ERC20 usado para demonstração neste livro.

Metropolis (Metrópole)::
((("Metropolis"))) O terceiro estágio de desenvolvimento do Ethereum, lançado em outubro de 2017.


Miner (Mineiro)::
((("miners"))) Um nó da rede que encontra provas válidas de trabalho para novos blocos, por passagem repetida: [<span class="keep-together">hashing</span>].

Mist (Névoa)::
((("Mist (browser-based wallet)")))((("wallets","Mist"))) O primeiro navegador habilitado para Ethereum, criado pela Ethereum Foundation. Ele contém uma carteira baseada em navegador que foi a primeira implementação do padrão de token ERC20 (Fabian Vogelsteller, autor do ERC20, também foi o principal desenvolvedor do Mist). A Mist também foi a primeira carteira a introduzir a soma de verificação camelCase (EIP-55; consulte  <<EIP55>>). O Mist executa um nó completo e oferece um navegador DApp completo, com suporte para armazenamento baseado em Swarm e endereços ENS.

Network (Rede)::
((("networks (Ethereum)","defined")))((("networks (Ethereum)","MetaMask and"))) Referindo-se à rede Ethereum, uma rede ponto a ponto que propaga transações e blocos para todos os nós do Ethereum (participante da rede).

NFT::
((("nonfungible tokens (NFTs)","defined"))) Um token não fungível (também conhecido como "ação"). Este é um padrão de token introduzido pela proposta do ERC721. As NFTs podem ser rastreadas e negociadas, mas cada token é único e distinto; eles não são intercambiáveis como tokens ERC20. As NFTs podem representar a propriedade de ativos digitais ou físicos.

Node (Nó)::
((("node","defined"))) Um cliente de software que participa da rede.

Nonce::
((("nonces","defined"))) Na criptografia, um valor que pode ser usado apenas uma vez. Existem dois tipos de nonce usados no Ethereum: um nonce de conta é um contador de transações em cada conta, usado para impedir ataques de repetição; um nonce de prova de trabalho é o valor aleatório em um bloco que foi usado para satisfazer a prova de trabalho.

Ommer::
((("ommer, defined"))) Um bloco filho de um ancestral que não é ele próprio um ancestral. Quando um mineiro encontra um bloco válido, outro mineiro pode ter publicado um bloco concorrente que é adicionado à ponta do blockchain. Ao contrário do Bitcoin, os blocos órfãos no Ethereum podem ser incluídos por blocos mais novos como ommers e receber uma recompensa parcial por blocos. O termo "ommer" é o termo neutro de gênero preferido para o irmão de um bloco pai, mas isso também é chamado de "tio".

Parity (Paridade)::
((("Parity","defined"))) Uma das implementações interoperáveis mais importantes do software cliente Ethereum.

Private key (Chave privada)::
Veja "chave secreta".

Proof of stake (PoS) (Prova de participação):
((("proof of stake (PoS)","defined"))) Um método pelo qual um protocolo blockchain de criptomoeda visa obter consenso distribuído. O PoS solicita aos usuários que comprovem a propriedade de uma certa quantia de criptomoeda (sua "participação" na rede) para poder participar da validação das transações.

Proof of work (PoW) (Prova de trabalho):
((("proof of work (PoW)","defined"))) Uma parte dos dados (a prova) que requer computação significativa para ser encontrada. No Ethereum, os mineradores precisam encontrar uma solução numérica para o algoritmo Ethash que atenda a um objetivo de dificuldade em toda a rede.

Public key (Chave pública)::
((("public keys","defined"))) Um número, derivado de uma chave privada por meio de uma função unidirecional, que pode ser compartilhada publicamente e usada por qualquer pessoa para verificar uma assinatura digital feita com a chave privada correspondente.

Receipt (Recibo)::
((("receipt, defined"))) Dados retornados por um cliente Ethereum para representar o resultado de uma transação específica, incluindo um hash da transação, seu número de bloco, a quantidade de gás utilizada e, em caso de implantação de um contrato inteligente, o endereço do contrato.

Re-entrancy attack (Ataque de reentrada) ::
((("reentrancy attacks","defined"))) Um ataque que consiste em um contrato de atacante chamando uma função de contrato de vítima de tal maneira que, durante a execução, a vítima chama o contrato de atacante novamente, recursivamente. Isso pode resultar, por exemplo, no roubo de fundos, ignorando partes do contrato da vítima que atualizam saldos ou contam valores de retirada.

Reward (Recompensa)::
((("reward, defined"))) Uma quantidade de éter incluída em cada novo bloco como recompensa da rede ao minerador que encontrou a solução de prova de trabalho.

RLP::
((("Recursive Length Prefix (RLP)")))((("RLP (Recursive Length Prefix)"))) Prefixo de comprimento recursivo. Um padrão de codificação projetado pelos desenvolvedores do Ethereum para codificar e serializar objetos (estruturas de dados) de complexidade e comprimento arbitrários.

Satoshi Nakamoto::
((("Satoshi Nakamoto"))) O nome usado pela pessoa ou pessoas que criaram o Bitcoin, criou sua implementação de referência original e foi o primeiro a resolver o problema dos gastos duplos na moeda digital. Sua verdadeira identidade permanece desconhecida.

Secret key (Chave secreta, também conhecida como chave privada)::
((("private keys","defined")))((("secret keys", seealso="private keys"))) O número secreto que permite aos usuários do Ethereum provar a propriedade de uma conta ou contratos, produzindo uma assinatura digital (consulte “chave pública”, “endereço”, “ECDSA”).

Serenity (Serenidade)::
((("Serenity"))) O quarto e último estágio de desenvolvimento do Ethereum. Serenity ainda não tem uma data de lançamento planejada.

Serpent (Serpente)::
((("Serpent"))) Uma linguagem de programação de contratos inteligente procedimental (imperativa) com sintaxe semelhante ao Python.

SHA::
((("SHA (Secure Hash Algorithm)"))) Algoritmo seguro de hash. Uma família de funções de hash criptográfico publicada pelo Instituto Nacional de Padrões e Tecnologia (NIST).

Singleton::
((("singleton"))) Um termo de programação de computador que descreve um objeto do qual apenas uma única instância pode existir.

Smart contract (Contrato inteligente) ::
((("smart contracts","defined"))) Um programa que é executado na infraestrutura de computação Ethereum.

Solidity (Solidez)::
((("Solidity","defined"))) Uma linguagem de programação procedural (imperativa) com sintaxe semelhante ao JavaScript, C ++ ou Java. O idioma mais popular e usado com mais frequência para contratos inteligentes do Ethereum. Criado pelo Dr. Gavin Wood (coautor deste livro).

Solidity inline assembly (Montagem inline de solidez):
((("inline assembly","defined")))((("Solidity inline assembly"))) Linguagem de montagem do EVM em um programa Solidity. O suporte do Solidity para montagem em linha facilita a gravação de certas operações.

Spurious Dragon (Dragão espúrio)::
((("Spurious Dragon"))) Um hard fork da blockchain Ethereum, que ocorreu no bloco # 2.675.000 para lidar com mais vetores de ataques de negação de serviço e estado limpo (consulte também "Tangerine Whistle"). Além disso, um mecanismo de proteção contra ataques de repetição.

Swarm (Enxame)::
((("Swarm","defined"))) Uma rede de armazenamento descentralizada (P2P), usada junto com Web3 e Whisper para criar DApps.

Szabo::
((("szabo, defined"))) Uma denominação de éter. 1 szabo = 10 ^ 12 ^ wei, 10 ^ 6 ^ szabo = 1 éter.

Tangerine Whistle (Apito de tangerina) ::
((("Tangerine Whistle"))) Um garfo rígido da blockchain Ethereum, que ocorreu no bloco # 2.463.000 para alterar o cálculo de gás para certas operações intensivas de E / S e para limpar o estado acumulado de uma negação de serviço ataque, que explorou o baixo custo de gás dessas operações.

Testnet::
((("testnet","defined"))) Abreviação de &quot;test network&quot;, uma rede usada para simular o comportamento da rede principal do Ethereum.

Transaction (Transação)::
((("transactions","defined"))) Dados confirmados no Ethereum Blockchain assinados por uma conta de origem, visando um endereço específico. A transação contém metadados, como o limite de gás para essa transação.

Truffle (Brigadeiro)::
((("Truffle","defined"))) Uma das estruturas de desenvolvimento Ethereum mais usadas.

Turing complete (Turing completo) ::
((("Turing completeness","defined"))) Um conceito nomeado em homenagem ao matemático e cientista da computação inglês Alan Turing: um sistema de regras de manipulação de dados (como o conjunto de instruções de um computador, uma linguagem de programação ou um autômato celular) é dito ser "Turing completo" ou "computacionalmente universal" se puder ser usado para simular qualquer máquina de Turing.

Vitalik Buterin::
((("Buterin, Vitalik"))) Programador e escritor russo-canadense conhecido principalmente como co-fundador da Ethereum e da Revista Bitcoin.

Vyper::
((("Vyper","defined"))) Uma linguagem de programação de alto nível, semelhante à Serpent, com sintaxe semelhante ao Python. Pretendia se aproximar de uma linguagem funcional pura. Criado por Vitalik Buterin.

Wallet (Carteira)::
((("wallets","defined"))) Software que contém chaves secretas. Usado para acessar e controlar contas Ethereum e interagir com contratos inteligentes. As chaves não precisam ser armazenadas em uma carteira e, em vez disso, podem ser recuperadas do armazenamento offline (por exemplo, um cartão de memória ou papel) para aumentar a segurança. Apesar do nome, as carteiras nunca armazenam as moedas ou fichas reais.

Web3 ::
((("web3", seealso="DApps"))) A terceira versão da web. Proposta pela primeira vez pelo Dr. Gavin Wood, a Web3 representa uma nova visão e foco para aplicativos da Web: de aplicativos gerenciados e de propriedade central a aplicativos criados em protocolos descentralizados.

Wei::
((("wei, defined"))) A menor denominação de éter. 10 ^ 18 ^ wei = 1 éter.

Whisper (Sussurro)::
((("Whisper"))) Um serviço de mensagens descentralizado (P2P). É usado junto com Web3 e Swarm para criar DApps.

Zero address (Zero endereço) ::
((("zero address","defined"))) Um endereço Ethereum especial, composto inteiramente de zeros, especificado como o endereço de destino de uma transação de criação de contrato.