[role="pagenumrestart"]
[[whatis_chapter]]
== O que é o Ethereum?

((("Ethereum (generally)","about", id="ix_01what-is-asciidoc0", range="startofrange")))Ethereum ((("world computer, Ethereum as"))) é frequentemente descrito como "o computador do mundo". Vamos começar com uma descrição focada na ciência da computação e depois tentar decifrá-la com uma análise mais prática das capacidades e características do Ethereum, enquanto a comparamos com o Bitcoin e outras plataformas descentralizadas de troca de informações (ou "blockchains" para curto).

Do ponto de vista da ciência da computação, o Ethereum é uma máquina de estados determinística, mas praticamente ilimitada, consistindo em um estado singleton acessível globalmente e em uma máquina virtual que aplica mudanças nesse estado.

De uma perspectiva mais prática, o Ethereum é uma infraestrutura de computação de código aberto e globalmente descentralizada que executa programas chamados contratos inteligentes. Ele usa uma blockchain para sincronizar e armazenar as alterações de estado do sistema, juntamente com uma criptomoeda chamada _ether_ para medir e restringir os custos de recursos de execução.

A plataforma Ethereum permite que os desenvolvedores criem aplicativos descentralizados poderosos com funções econômicas integradas. Ao fornecer alta disponibilidade, auditabilidade, transparência e neutralidade, também reduz ou elimina a censura e reduz certos riscos de contraparte.

[[bitcoin_comparison]]
=== Comparado ao Bitcoin

((("Bitcoin","Ethereum compared to")))((("Ethereum (generally)","Bitcoin compared to")))Muitas pessoas vão ao Ethereum com alguma experiência anterior de criptomoedas, especificamente Bitcoin. O Ethereum compartilha muitos elementos comuns com outras blockchains abertas: uma rede ponto a ponto que conecta participantes, um algoritmo de consenso tolerante a falhas bizantino para sincronização de atualizações de estado (uma blockchain de prova de trabalho), o uso de primitivas criptográficas, como a digital assinaturas e hashes e uma moeda digital (éter).

No entanto, de muitas maneiras, o objetivo e a construção do Ethereum são surpreendentemente diferentes daqueles dos blockchains abertos que o precederam, incluindo o Bitcoin.

((("Ethereum (generally)","purpose of")))O objetivo da Ethereum não é primariamente ser uma rede de pagamento em moeda digital. ((("utility currency, ether as"))) Embora o éter de moeda digital é essencial e necessário para a operação do Ethereum, o éter é uma moeda de utilidade para pagar pelo uso da plataforma Ethereum como o computador mundial. 

Ao contrário do Bitcoin, que possui uma linguagem de script muito limitada, o Ethereum foi projetado para ser uma cadeia de blocos programável de uso geral que executa uma _virtual machine_ capaz de executar código de complexidade arbitrária e ilimitada. Onde a linguagem Script do Bitcoin é, intencionalmente, restringida à simples avaliação verdadeira / falsa das condições de gastos, a linguagem da Ethereum é _Turing complete_, o que significa que a Ethereum pode funcionar diretamente como um computador de uso geral.

[[blockchain_components]]
=== Componentes de uma Blockchain

((("blockchain","components of")))((("Ethereum (generally)","blockchain components")))Os componentes de uma blockchain pública aberta são (geralmente):

* Uma rede ponto a ponto (P2P) conectando participantes e propagando transações e blocos de transações verificadas, com base em um protocolo padronizado de "fofoca" pass:[<span class="keep-together">protocolo</span>]
* Mensagens, na forma de transações, representando transições de estado
* Um conjunto de regras de consenso que regem o que constitui uma transação e o que gera uma transição de estado válida
* Uma máquina de estado que processa transações de acordo com as regras de consenso
* Uma cadeia de blocos criptograficamente protegidos que atua como um diário de todas as transições de estado verificadas e aceitas
* Um algoritmo de consenso que descentraliza o controle sobre o blockchain, forçando os participantes a cooperar na aplicação das regras de consenso
* Um esquema de incentivo teoricamente consistente (por exemplo, custos de prova de trabalho mais recompensas em bloco) para proteger economicamente a máquina de estado em um passe livre: [ <span class="keep-together">ambiente</span> ] 
* Uma ou mais implementações de software de código aberto acima ("clientes")

Todos ou a maioria desses componentes geralmente são combinados em um único cliente de software. Por exemplo, no ((("Bitcoin Core")))((("bitcoind client")))Bitcoin,  a implementação de referência é desenvolvida pelo projeto de código aberto _Bitcoin Core_ e implementada como cliente _bitcoind_.  No Ethereum, em vez de uma implementação de referência, existe uma ((("reference specification"))) _ especificação de referência_, uma descrição matemática do sistema no Livro Amarelo (veja <<references>>). Existem vários clientes, criados de acordo com a especificação de referência.

No passado, usamos o termo "blockchain" para representar todos os componentes listados acima, como uma referência abreviada à combinação de tecnologias que abrangem todas as características descritas. Hoje, no entanto, há uma enorme variedade de cadeias de blocos com propriedades diferentes. Precisamos de qualificadores para nos ajudar a entender as características do blockchain em questão, como _abre, público, global, descentralizado, neutro e _censored_resistente_, para identificar as importantes características emergentes de um sistema "blockchain" permitidas por esses componentes.

Nem todas as cadeias de blocos são criadas iguais. Quando alguém lhe diz que algo é um blockchain, você não recebeu uma resposta; em vez disso, você precisa começar a fazer muitas perguntas para esclarecer o que elas significam quando usam a palavra "blockchain". Comece pedindo uma descrição dos componentes na lista anterior e, em seguida, pergunte se esse "blockchain" exibe as características de ser aberto, público, etc.

[[ethereum_birth]]
=== O nascimento de Ethereum

((("Ethereum (generally)","birth of")))Todas as grandes inovações resolvem problemas reais, e o Ethereum não é exceção. O Ethereum foi concebido em um momento em que as pessoas reconheciam o poder do modelo Bitcoin e tentavam ir além dos aplicativos de criptomoeda. Mas os desenvolvedores enfrentaram um enigma: eles precisavam construir sobre o Bitcoin ou iniciar um novo blockchain. (("Bitcoin","limitations of")))Construir sobre o Bitcoin significa viver dentro das restrições intencionais da rede e tentar encontrar soluções alternativas. O conjunto limitado de tipos de transações, tipos de dados e tamanhos de armazenamento de dados parecia limitar os tipos de aplicativos que podiam ser executados diretamente no Bitcoin; qualquer outra coisa precisava de camadas adicionais fora da cadeia, e isso imediatamente anulou muitas das vantagens do uso de uma blockchain pública. Para projetos que precisavam de mais liberdade e flexibilidade enquanto permaneciam na cadeia, uma nova blockchain era a única opção. Mas isso significou muito trabalho: inicializar todos os elementos da infraestrutura, testes exaustivos etc.

((("Buterin, Vitalik","and birth of Ethereum")))No final de 2013, Vitalik Buterin, um jovem programador e entusiasta do Bitcoin, começou a pensar em ampliar ainda mais os recursos do Bitcoin e Mastercoin (um protocolo de sobreposição que Bitcoin estendido para oferecer contratos inteligentes rudimentares). Em outubro daquele ano, a Vitalik propôs uma abordagem mais generalizada para a equipe da Mastercoin, que permitia contratos flexíveis e com scripts (mas não completos para Turing) para substituir a linguagem de contrato especializada da Mastercoin. Embora a equipe da Mastercoin tenha ficado impressionada, essa proposta foi uma mudança radical demais para caber no roteiro de desenvolvimento.

Em dezembro de 2013, a Vitalik começou a compartilhar um white paper que descrevia a ideia por trás do Ethereum: uma blockchain de Turing completa e de uso geral. Algumas dezenas de pessoas viram este rascunho inicial e ofereceram feedback, ajudando Vitalik a evoluir a proposta.

Ambos os autores deste livro receberam um rascunho do whitepaper e comentaram sobre ele. Andreas M. Antonopoulos ficou intrigado com a idéia e perguntou a Vitalik muitas perguntas sobre o uso de uma blockchain separada para impor regras de consenso sobre a execução inteligente de contratos e as implicações de uma linguagem completa de Turing. Andreas continuou a acompanhar o progresso do Ethereum com grande interesse, mas estava no estágio inicial de escrever seu livro _Mastering Bitcoin_, e não participou diretamente do Ethereum até muito mais tarde. ((("Wood, Dr. Gavin","and birth of Ethereum")))Dr. Gavin Wood, no entanto, foi uma das primeiras pessoas a entrar em contato com Vitalik e se oferecer para ajudar com suas habilidades de programação em C ++. Gavin tornou-se co-fundador, co-autor e CTO da Ethereum.

Como Vitalik relata em seu http://bit.ly/2T2t6zs["Ethereum Prehistory" post]: 

____
Foi nessa época que o protocolo Ethereum foi inteiramente minha própria criação. A partir daqui, no entanto, novos participantes começaram a participar da dobra. De longe, o mais proeminente no lado do protocolo foi Gavin Wood ...

Gavin também pode ser amplamente creditado pela mudança sutil de visão de ver o Ethereum como uma plataforma para a criação de dinheiro programável, com contratos baseados em blockchain que podem armazenar ativos digitais e transferi-los de acordo com regras predefinidas para uma plataforma de computação de uso geral . Isso começou com mudanças sutis na ênfase e na terminologia, e mais tarde essa influência se tornou mais forte com a crescente ênfase no conjunto &quot;Web 3&quot;, que via o Ethereum como parte de um conjunto de tecnologias descentralizadas, os outros dois como Whisper e Swarm.
____

A partir de dezembro de 2013, Vitalik e Gavin refinaram e desenvolveram a idéia, construindo juntos a camada de protocolo que se tornou Ethereum.

Os fundadores da Ethereum estavam pensando em uma blockchain sem um objetivo específico, que pudesse suportar uma ampla variedade de aplicações sendo _programado_. A ideia era que, usando um blockchain de uso geral como o Ethereum, um desenvolvedor pudesse programar seu aplicativo específico sem ter que implementar os mecanismos subjacentes de redes ponto a ponto, blockchains, algoritmos de consenso etc. A plataforma Ethereum foi projetada para abstrair esses detalhes e fornecem um ambiente de programação determinístico e seguro para aplicativos blockchain descentralizados.

Assim como Satoshi, Vitalik e Gavin não inventaram apenas uma nova tecnologia; eles combinaram novas invenções com as tecnologias existentes de uma maneira inovadora e entregaram o código do protótipo para provar suas idéias para o mundo.

Os fundadores trabalharam por anos, construindo e aprimorando a visão. E em 30 de julho de 2015, o primeiro bloco Ethereum foi extraído. O computador do mundo começou a servir o mundo.

[NOTA]
====
O artigo de Vitalik Buterin "Uma pré-história do Ethereum" foi publicado em setembro de 2017 e fornece uma fascinante visão em primeira pessoa dos primeiros momentos do Ethereum.

Você pode ler em
https://vitalik.ca/general/2017/09/14/prehistory.html[].
====

[[development_stages]]
=== Quatro estágios de desenvolvimento da Ethereum

((("Ethereum (generally)","four stages of development")))O desenvolvimento do Ethereum foi planejado em quatro estágios distintos, com grandes mudanças ocorrendo em cada estágio. ((("hard forks", seealso="DAO; other specific hard forks, e.g.: Spurious Dragon")))Um estágio pode incluir sub-releases, conhecidos como &quot;garfos rígidos&quot;, que alteram a funcionalidade de uma maneira que não é compatível com versões anteriores .

Os quatro estágios principais de desenvolvimento são codinome _Frontier_, _Homestead_, _Metropolis_ e _Serenity_. Os garfos rígidos intermediários que ocorreram (ou estão planejados) até o momento têm o codinome _Ice Ice_, _DAO_, _Tangerine Whistle_, _Spurious Dragon_, _Byzantium_ e _Constantinople_. Os estágios de desenvolvimento e os garfos rígidos intermediários são mostrados na seguinte linha do tempo, que é "datada" pelo número do bloco:


Bloco #0:: ((("Frontier")))__Frontier__ - O estágio inicial do Ethereum, que dura de 30 de julho de 2015 a março de 2016.

Bloco #200,000:: ((("Ice Age")))__Ice Age__— Um garfo rígido para introduzir um aumento exponencial de dificuldade, para motivar uma transição para PoS quando estiver pronto.

Bloco #1,150,000:: ((("Homestead")))__Homestead__ - O segundo estágio do Ethereum, lançado em março de 2016.

Bloco #1,192,000:: ((("DAO (Decentralized Autonomous Organization)")))__DAO__— Um garfo rígido que reembolsava as vítimas do contrato invadido do DAO e fazia com que o Ethereum e o Ethereum Classic se dividissem em dois sistemas concorrentes.

Bloco #2,463,000:: ((("Tangerine Whistle")))__Tangerine Whistle__ - Um garfo rígido para alterar o cálculo de gás para determinadas operações pesadas de E / S e para limpar o estado acumulado de uma negação de serviço (DoS) ataque que explorou o baixo custo de gás dessas operações.

Bloco #2,675,000:: ((("Spurious Dragon")))__Spurious Dragon__— Um garfo difícil para lidar com mais vetores de ataque de DoS e outra limpeza de estado. Além disso, um mecanismo de proteção contra ataques de repetição.


Bloco #4,370,000:: ((("Metropolis")))((("Byzantium fork")))__Metropolis Byzantium__— Metropolis é o terceiro estágio do Ethereum, atual no momento da redação deste livro, lançado em outubro de 2017. Byzantium é o primeiro de dois garfos rígidos planejados para Metropolis.


Depois de Bizâncio, há mais um garfo rígido planejado para Metropolis: ((("Constantinople fork")))((("Serenity"))) Constantinopla. Metropolis será seguida pela etapa final da implantação do Ethereum, codinome Serenity.


[[general_purpose_blockchain]]
=== Ethereum: uma Blockchain de uso geral

((("Bitcoin","Ethereum blockchain compared to Bitcoin blockchain")))((("Ethereum (generally)","as general-purpose blockchain")))O blockchain original, ou seja, o blockchain do Bitcoin, rastreia o estado de unidades de bitcoin e sua propriedade. ((("distributed state machine, Ethereum as"))) Você pode pensar no Bitcoin como uma consenso distribuída _state machine_, em que as transações causam uma transição global do _state_, alterando a propriedade das moedas. As transições de estado são restringidas pelas regras de consenso, permitindo que todos os participantes (eventualmente) converjam em um estado comum (consenso) do sistema, depois que vários blocos são extraídos.

O Ethereum também é uma máquina de estado distribuída. Mas, em vez de rastrear apenas o estado de propriedade da moeda,  ((("key-value tuple"))) O Ethereum rastreia as transições de estado de um repositório de dados de uso geral, ou seja, um repositório que pode conter qualquer dado expressável como uma _key- valor tuple_. Um armazenamento de dados de valor-chave contém valores arbitrários, cada um referenciado por alguma chave; por exemplo, o valor "Mastering Ethereum" referenciado pela chave "Título do livro". De certa forma, isso serve ao mesmo objetivo que o modelo de armazenamento de dados da _Random Access Memory_ (RAM) usado pela maioria dos computadores de uso geral. O Ethereum possui memória que armazena código e dados e usa o blockchain Ethereum para rastrear como essa memória muda com o tempo. Como um computador de programa armazenado de uso geral, o Ethereum pode carregar o código em sua máquina de estado e executá-lo, armazenando as alterações de estado resultantes em sua blockchain. Duas das diferenças críticas da maioria dos computadores de uso geral são que as mudanças de estado do Ethereum são governadas pelas regras de consenso e o estado é distribuído globalmente. Ethereum responde à pergunta: "E se pudéssemos rastrear qualquer estado arbitrário e programar a máquina de estado para criar um computador mundial operando sob consenso?"

[[ethereum_components]]
=== Componentes do Ethereum

((("blockchain","components of")))((("Ethereum (generally)","blockchain components")))No Ethereum, os componentes de um sistema blockchain descritos em  <<blockchain_components>>  são, mais especificamente:


Rede P2P :: O Ethereum é executado na rede principal _Ethereum_, endereçável na porta TCP 30303, e executa um protocolo chamado _ÐΞVp2p_.

Regras de consenso: As regras de consenso da Ethereum são definidas na especificação de referência, o Livro Amarelo (consulte <<references>>).

Transações :: transações do Ethereum são mensagens de rede que incluem (entre outras coisas) um remetente, destinatário, valor e carga útil dos dados.

[role="pagebreak-before"]
Máquina de estado :: As transições de estado do Ethereum são processadas pela _Ethereum Virtual Machine_ (EVM), uma máquina virtual baseada em pilha que executa _bytecode_ (instruções em linguagem de máquina). Os programas EVM, chamados &quot;contratos inteligentes&quot;, são escritos em linguagens de alto nível (por exemplo, Solidity) e compilados no bytecode para execução no EVM.

Estruturas de dados :: O estado do Ethereum é armazenado localmente em cada nó como um _database_ (geralmente LevelDB do Google), que contém as transações e o estado do sistema em uma estrutura de dados de hash serializada chamada _Merkle Patricia Tree_.

Algoritmo de consenso :: O Ethereum usa o modelo de consenso do Bitcoin, o Nakamoto Consensus, que usa blocos sequenciais de assinatura única, ponderados em importância pelo PoW para determinar a cadeia mais longa e, portanto, o estado atual. No entanto, há planos de mudar para um sistema de votação ponderado por PoS, com o codinome _Casper_, em um futuro próximo.

Segurança econômica :: O Ethereum atualmente usa um algoritmo PoW chamado _Ethash_, mas isso acabará sendo descartado com a mudança para o PoS em algum momento no futuro.

Clientes: O Ethereum possui várias implementações interoperáveis do software cliente, das quais as mais destacadas são _Go-Ethereum_ (_Geth_) e _Parity_.

[[references]]
==== Leitura adicional

As seguintes referências fornecem informações adicionais sobre as tecnologias mencionadas aqui:

* O Livro Amarelo Ethereum:
https://ethereum.github.io/yellowpaper/paper.pdf

* The Beige Paper, uma reescrita do Livro Amarelo para um público mais amplo em linguagem menos formal:
https://github.com/chronaeon/beigepaper

* ÐΞVp2p protocolo de rede:
http://bit.ly/2quAlTE

* Lista de recursos da Ethereum Virtual Machine:
http://bit.ly/2PmtjiS

* Banco de dados LevelDB (usado com mais frequência para armazenar a cópia local da blockchain):
https://github.com/google/leveldb

* Árvores Merkle Patricia:
https://github.com/ethereum/wiki/wiki/Patricia-Tree

* Algoritmo Ethash PoW:
https://github.com/ethereum/wiki/wiki/Ethash

* Guia de implementação do Casper PoS v1:
http://bit.ly/2DyPr3l

* Cliente Go-Ethereum (Geth):
https://geth.ethereum.org/

* Cliente Parity Ethereum:
https://parity.io/

[[turing_completeness]]
=== Ethereum e Completude de Turing

((("Ethereum (generally)","Turing completeness and")))((("Turing completeness","Ethereum and")))Assim que você começar a ler sobre o Ethereum, encontrará imediatamente o termo "Turing completo." O Ethereum, dizem eles, ao contrário do Bitcoin, é Turing completo. O que exatamente isso significa?

((("Turing, Alan"))) O termo refere-se ao matemático inglês Alan Turing, considerado o pai da ciência da computação. Em 1936, ele criou um modelo matemático de um computador que consiste em uma máquina de estado que manipula símbolos lendo e gravando-os na memória seqüencial (semelhante a uma fita de papel de tamanho infinito). Com esse construto, Turing passou a fornecer uma base matemática para responder (no negativo) a perguntas sobre _computabilidade universal_, significando se todos os problemas são solucionáveis. Ele provou que existem classes de problemas que são incontestáveis. ((("halting problem")))Especificamente, ele provou que o _falecimento do problema_ (se é possível, dado um programa arbitrário e sua entrada, para determinar se o programa acabará parando de funcionar) não é solucionável.

((("Universal Turing machine (UTM)")))((("UTM (Universal Turing machine)"))) Alan Turing definiu ainda um sistema como _Turing complete_ se puder ser usado para simular qualquer máquina de Turing. Esse sistema é chamado de _Universal Turing machine_ (UTM).

A capacidade da Ethereum de executar um programa armazenado, em uma máquina de estado chamada Ethereum Virtual Machine, enquanto lê e grava dados na memória, faz com que seja um sistema completo de Turing e, portanto, um UTM. O Ethereum pode calcular qualquer algoritmo que possa ser calculado por qualquer máquina de Turing, dadas as limitações da memória finita.

A inovação inovadora da Ethereum é combinar a arquitetura de computação de propósito geral de um computador de programa armazenado com uma blockchain descentralizada, criando assim um computador mundial distribuído de estado único (singleton). Os programas Ethereum são executados "em todos os lugares", mas produzem um estado comum que é garantido pelas regras do passe: [<span class="keep-together">consenso</span>].

[[turing_completeness_feature]]
==== Turing a integridade como um "recurso"

((("Turing completeness","as feature")))Ao ouvir que o Ethereum é Turing completo, você pode chegar à conclusão de que esse é um recurso que, de alguma forma, está faltando em um sistema Turing incompleto. Pelo contrário, é o contrário. Turing completude é muito fácil de alcançar; de fato, http://bit.ly/2ABft33[ a máquina de estado Turing-complete mais simples conhecida] possui 4 estados e usa 6 símbolos, com uma definição de estado com apenas 22 instruções. De fato, às vezes os sistemas são considerados "acidentalmente completos de Turing". Uma referência divertida de tais sistemas pode ser encontrada em http://bit.ly/2Og1VgX[].

No entanto, a integridade de Turing é muito perigosa, principalmente em sistemas de acesso aberto, como blockchains públicos, devido ao problema de interrupção que abordamos anteriormente. Por exemplo, as impressoras modernas estão completas em Turing e podem receber arquivos para impressão que os enviam para um estado congelado. O fato de o Ethereum ser Turing completo significa que qualquer programa de qualquer complexidade pode ser computado pelo Ethereum. Mas essa flexibilidade traz alguns problemas espinhosos de segurança e gerenciamento de recursos. Uma impressora que não responde pode ser desligada e ligada novamente. Isso não é possível com uma blockchain pública.

[[turing_completeness_implications]]
==== Implicações da totalidade de Turing

((("Turing completeness","implications of")))Turing provou que não é possível prever se um programa será encerrado simulando-o em um computador. Em termos simples, não podemos prever o caminho de um programa sem executá-lo.  ((("infinite loops")))Os sistemas completos de Turing podem ser executados em "infinitos loops", um termo usado (na simplificação excessiva) para descrever um programa que não é finalizado. É trivial criar um programa que execute um loop que nunca termina. Mas loops intermináveis não intencionais podem surgir sem aviso, devido a interações complexas entre as condições de partida e o código. No Ethereum, isso representa um desafio: todo nó participante (cliente) deve validar todas as transações, executando os contratos inteligentes que chama. Mas, como Turing provou, a Ethereum não pode prever se um contrato inteligente será rescindido ou por quanto tempo ele será executado, sem realmente executá-lo (possivelmente rodando para sempre). Seja por acidente ou de propósito, um contrato inteligente pode ser criado para ser executado sempre que um nó tentar validá-lo. Este é efetivamente um ataque de negação de serviço. E, é claro, entre um programa que leva um milissegundo para validar e um que é executado para sempre, há uma gama infinita de programas desagradáveis, que consomem recursos, sobrecarregam a memória e superaquecem a CPU que simplesmente desperdiçam recursos. Em um computador mundial, um programa que abusa de recursos acaba abusando dos recursos do mundo. Como o Ethereum restringe os recursos usados por um contrato inteligente se não pode prever o uso antecipado de recursos?

((("EVM (Ethereum Virtual Machine)","gas and")))((("gas","as counter to Turing completeness")))Para responder a esse desafio, o Ethereum introduz um mecanismo de medição chamado _gas_. Como o EVM executa um contrato inteligente, ele contabiliza cuidadosamente todas as instruções (computação, acesso a dados etc.). Cada instrução tem um custo predeterminado em unidades de gás. Quando uma transação aciona a execução de um contrato inteligente, ela deve incluir uma quantidade de gás que define o limite superior do que pode ser consumido na execução do contrato inteligente. O EVM encerrará a execução se a quantidade de gás consumida pelo cálculo exceder o gás disponível na transação. O gás é o mecanismo que o Ethereum usa para permitir o cálculo completo de Turing, limitando os recursos que qualquer programa pode consumir.

A próxima pergunta é: 'como conseguir gás para pagar pela computação no computador mundial Ethereum?' Você não encontrará gás em nenhuma troca. ((("ether (generally)","gas and")))Só pode ser comprado como parte de uma transação e só pode ser comprado com éter. O Éter precisa ser enviado junto com uma transação e precisa ser explicitamente destinado à compra de gás, além de um preço aceitável. Assim como na bomba, o preço do gás não é fixo. O gás é comprado para a transação, o cálculo é executado e qualquer gás não utilizado é devolvido ao remetente da transação.

[[DApp]]
=== De blockchains de uso geral a aplicativos descentralizados (DApps)

((("DApps (decentralized applications)","Ethereum as platform for")))((("Ethereum (generally)","DApps and"))) O Ethereum começou como uma maneira de criar uma blockchain de uso geral que pode ser programado para uma variedade de usos. Mas muito rapidamente, a visão da Ethereum se expandiu para se tornar uma plataforma para a programação de DApps. Os DApps representam uma perspectiva mais ampla que os contratos inteligentes. Um DApp é, no mínimo, um contrato inteligente e uma interface de usuário da web. De forma mais ampla, um DApp é um aplicativo da Web construído sobre serviços de infraestrutura abertos, descentralizados e ponto a ponto.

Um DApp é composto de pelo menos:

- Contratos inteligentes em uma blockchain
- Uma interface de usuário de interface web

Além disso, muitos DApps incluem outros componentes descentralizados, como:

- Um protocolo e plataforma de armazenamento descentralizado (P2P)
- Um protocolo e plataforma de mensagens descentralizadas (P2P)

[TIP]
====
Você pode ver os DApps escritos como _ÐApps_. O caractere is é o caractere latino chamado "ETH", aludindo ao Ethereum. Para exibir esse caractere, use o ponto de código Unicode + 0xD0 + ou, se necessário, a entidade de caracteres HTML + eth + (ou entidade decimal + # 208 +).
====

[[evolving_WWW]]
=== A Terceira Era da Internet

((("DApps (decentralized applications)","web3 and")))((("Ethereum (generally)","web3 and")))((("web3"))) Em 2004, o termo "Web 2.0" ganhou destaque, descrevendo uma evolução da Web em direção ao conteúdo gerado pelo usuário, interfaces responsivas e interatividade. Web 2.0 não é uma especificação técnica, mas um termo que descreve o novo foco do web pass: [<span class="keep-together">aplicativos</span>].

O conceito de DApps visa levar a World Wide Web ao seu próximo estágio evolutivo natural, introduzindo a descentralização com protocolos ponto a ponto em todos os aspectos de um aplicativo da Web. O termo usado para descrever essa evolução é _web3_, significando a terceira "versão" da web. ((("Wood, Dr. Gavin","and web3")))Primeiramente proposto pelo Dr. Gavin Wood, a web3 representa uma nova visão e foco para aplicativos da Web: de aplicativos gerenciados e de propriedade central a aplicativos baseados em protocolos descentralizados .

Nos próximos capítulos, exploraremos a biblioteca JavaScript Ethereum web3.js, que une os aplicativos JavaScript executados em seu navegador com a blockchain Ethereum. A biblioteca web3.js também inclui uma interface para uma rede de armazenamento P2P chamada _Swarm_ e um serviço de mensagens P2P chamado _Whisper_. Com esses três componentes incluídos em uma biblioteca JavaScript em execução no seu navegador da Web, os desenvolvedores têm um conjunto completo de desenvolvimento de aplicativos que lhes permite criar DA3 da web3.

[[development_culture]]
=== Cultura de desenvolvimento da Ethereum

((("development culture, Ethereum")))((("Ethereum (generally)","development culture"))) Até agora, falamos sobre como os objetivos e a tecnologia da Ethereum diferem dos de outras cadeias de blocos que a precederam. , como o Bitcoin. O Ethereum também tem uma cultura de desenvolvimento muito diferente.

((("Bitcoin","development culture"))) No Bitcoin, o desenvolvimento é guiado por princípios conservadores: todas as alterações são cuidadosamente estudadas para garantir que nenhum dos sistemas existentes seja interrompido. Na maioria das vezes, as alterações são implementadas apenas se forem compatíveis com versões anteriores. Os clientes existentes podem participar, mas continuarão a operar se decidirem não atualizar.

((("backward compatibility, Ethereum vs. Bitcoin"))) No Ethereum, em comparação, a cultura de desenvolvimento da comunidade está focada no futuro e não no passado. O mantra (não totalmente sério) é "avançar rápido e quebrar as coisas". Se for necessária uma alteração, ela será implementada, mesmo que isso signifique invalidar suposições anteriores, quebrar a compatibilidade ou forçar a atualização dos clientes. A cultura de desenvolvimento da Ethereum é caracterizada por inovação rápida, evolução rápida e vontade de implantar melhorias futuras, mesmo que isso seja à custa de alguma compatibilidade com versões anteriores.

O que isso significa para você como desenvolvedor é que você deve permanecer flexível e estar preparado para reconstruir sua infraestrutura à medida que algumas das suposições subjacentes mudam. Um dos grandes desafios enfrentados pelos desenvolvedores no Ethereum é a contradição inerente entre a implantação de código em um sistema imutável e uma plataforma de desenvolvimento que ainda está em evolução. Você não pode simplesmente "atualizar" seus contratos inteligentes. Você deve estar preparado para implantar novos, migrar usuários, aplicativos e fundos e começar de novo.

Ironicamente, isso também significa que o objetivo de construir sistemas com mais autonomia e menos controle centralizado ainda não foi totalmente realizado. Autonomia e descentralização exigem um pouco mais de estabilidade na plataforma do que você provavelmente encontrará no Ethereum nos próximos anos. Para "evoluir" a plataforma, você deve estar pronto para descartar e reiniciar seus contratos inteligentes, o que significa que você deve manter um certo grau de controle sobre eles.

Mas, do lado positivo, o Ethereum está avançando muito rápido. Há poucas oportunidades para &quot;troca de bicicletas&quot;, uma expressão que significa atrasar o desenvolvimento discutindo detalhes menores, como a forma de construir o galpão de bicicletas na parte traseira de uma usina nuclear. Se você começar a trocar de bicicleta, poderá descobrir subitamente que, enquanto estava distraído, o restante da equipe de desenvolvimento mudou o plano e abandonou as bicicletas em favor de hovercraft autônomo.

Eventualmente, o desenvolvimento da plataforma Ethereum diminuirá a velocidade e suas interfaces serão corrigidas. Entretanto, a inovação é o princípio que impulsiona. É melhor você acompanhar, porque ninguém vai desacelerar para você.

[[why_learn]]
=== Por que aprender Ethereum?

((("blockchain","Ethereum as developer&#39;s blockchain")))((("Ethereum (generally)","reasons to learn"))) As blockchains têm uma curva de aprendizado muito acentuada, pois combinam várias disciplinas em um domínio : programação, segurança da informação, criptografia, economia, sistemas distribuídos, redes ponto a ponto, etc. O Ethereum torna essa curva de aprendizado muito menos íngreme, para que você possa começar rapidamente. Mas logo abaixo da superfície de um ambiente enganosamente simples, há muito mais. À medida que você aprende e começa a olhar mais fundo, sempre há outra camada de complexidade e admiração.

O Ethereum é uma ótima plataforma para aprender sobre blockchains e está construindo uma enorme comunidade de desenvolvedores, mais rápido do que qualquer outra plataforma blockchain. Mais do que qualquer outro, o Ethereum é um blockchain de _developer_, desenvolvido por desenvolvedores para desenvolvedores. Um desenvolvedor familiarizado com aplicativos JavaScript pode entrar no Ethereum e começar a produzir código de trabalho muito rapidamente. Nos primeiros anos de vida da Ethereum, era comum ver camisetas anunciando que você pode criar um token em apenas cinco linhas de código. Claro, esta é uma faca de dois gumes. É fácil escrever código, mas é muito difícil escrever código _good_ e _secure_.

[[teaching_objectives]]
=== O que este livro lhe ensinará

Este livro mergulha no Ethereum e examina todos os componentes. Você começará com uma transação simples, dissecará como funciona, criará um contrato simples, melhorará e seguirá sua jornada pelo sistema Ethereum.

Você aprenderá não apenas como usar o Ethereum - como ele funciona - mas também por que ele foi projetado da maneira que é. Você será capaz de entender como cada uma das peças funciona, e como elas se encaixam e por quê. (((range="endofrange", startref="ix_01what-is-asciidoc0")))((("account","contract", see="smart contracts")))((("assymetric cryptography", see="public key cryptography")))((("BIPs", see="Bitcoin improvement proposals")))((("burn", see="ether burn")))((("cryptography","asymmetric", see="public key cryptography")))((("decentralized applications", see="DApps")))((("Decentralized Autonomous Organization", see="DAO")))((("default function", see="fallback function")))((("deterministic (seeded) wallets","hierarchical", see="hierarchical deterministic wallets")))((("DoS attacks", see="denial of service attacks")))((("ECDSA", see="Elliptic Curve Digital Signature Algorithm")))((("ETC", see="Ethereum Classic")))((("Ethereum (generally)","clients", see="clients, Ethereum")))((("Ethereum Improvement Proposals", see="EIP entries")))((("Ethereum Name Service", see="ENS")))((("Ethereum Virtual Machine", see="EVM")))((("Externally Owned Account", see="EOA")))((("fees", see="gas")))((("ICOs", see="Initial Coin Offerings")))((("Mastering Ethereum Token", see="METoken")))((("MEW", see="MyEtherWallet")))((("names/naming", see="ENS (Ethereum Name Service)")))((("NFTs", see="nonfungible tokens")))((("PoS", see="proof of stake")))((("PoW", see="proof of work")))((("PoWHC", see="Proof of Weak Hands Coin")))((("Remote Procedure Call (RPC) commands", see="JSON-RPC API")))((("RPC (Remote Procedure Call) commands", see="JSON-RPC API")))((("Secure Hash Algorithm", see="SHA entries")))((("seeded wallets", see="deterministic wallets")))((("smart contracts","Vyper and", see="Vyper")))((("smartphones", see="mobile (smartphone) wallets")))((("storage", see="data storage")))((("SUICIDE", see="SELFDESTRUCT opcode")))((("synchronization", see="fast synchronization")))((("synchronization", see="first synchronization")))((("transaction fees", see="gas")))((("wallets","HD", see="hierarchical deterministic wallets")))((("wallets","MetaMask", see="MetaMask")))