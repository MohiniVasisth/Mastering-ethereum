[appendix]
[[ethereum_standards]]
== Estándares de Ethereum

[[eips]]
=== Propuestas de Mejora de Ethereum (EIPs)

((("EIPs (Ethereum Improvement Proposals)")))((("Ethereum (en general)","EIPs")))((("Ethereum (en general)","estándares")))El repositorio de propuestas de mejora de Ethereum se encuentra en https://github.com/ethereum/EIPs/[]. ((("EIPs (Ethereum Improvement Proposals)","procedimiento")))El procedimiento es ilustrado en la <<eip_workflow>>.

Según https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1.md[EIP-1]:

____
EIP son las siglas para "Ethereum Improvement Proposal". Una EIP es un documento de diseño que proporciona información a la comunidad de Ethereum o describe una nueva característica para Ethereum o para sus procesos o para su entorno. La EIP debe proporcionar una especificación técnica concisa de la función y una justificación para la función. El autor de la EIP es responsable de generar consenso dentro de la comunidad y de documentar las opiniones disidentes.
____

[[eip_workflow]]
.Ciclo de Vida de una Propuesta de Mejora para Ethereum
image::images/eip_workflow.png["Ciclo de Vida de una Propuesta de Mejora para Ethereum"]

[[eip_table]]
=== Tabla de las EIPs y ERCs Más Importantes

.EIPs y ERCs Importantes
[options="header"]
|===
| EIP/ERC # | Titulo/Descripción | Autor | Capa | Estatus | Creación
| http://bit.ly/2OVq6qa[EIP-1]                                 | EIP Propósito y Lineamientos                                                                  | Martin Becze, Hudson Jameson               | Meta       | Final    |
| http://bit.ly/2yJtTNa[EIP-2]                                 | Homestead Cambios a las Bifurcaciones Fuertes                                                                  | Vitalik Buterin                            | Core       | Final    |

| http://bit.ly/2Jrx93V[EIP-5]                                 | Consumo de Gas para `RETURN` and `CALL*`                                                                  | Christian Reitwiessner           | Core       | Borrador    |
| http://bit.ly/2OYbc2t[EIP-6]                                 | Renombrando al Opcode +SUICIDE+                                                                      | Hudson Jameson                             | Interface  | Final    |
| http://bit.ly/2JxdBeN[EIP-7]                                 | `DELEGATECALL`                                                                                 | Vitalik Buterin                            | Core       | Final    |
| http://bit.ly/2Q6Oly6[EIP-8]                                 | devp2p Requisitos de Compatibilidad Futura para Homestead                                      | Felix Lange                                | Networking | Final    |
| http://bit.ly/2CUf7WG[EIP-20]                | Estándar para tokens ERC-20. Describe las funciones estándar que un contrato de tokens puede implementar para permitir que las DApps y las billeteras manejen tokens en múltiples interfaces/DApps. Los métodos incluyen: `totalSupply`, +balanceOf(address)+, `transfer`, `transferFrom`, `approve`, `allowance`. Los eventos incluyen: `Transfer` (que se activa cuando hay transferencia de tokens), pass:[<span class="keep-together"><code>Approval</code></span>] (que se activa cuando se invoca la función `approve`).                                                                       | Fabian Vogelsteller, Vitalik Buterin       | ERC        | Final    | Frontier
| http://bit.ly/2Q6R4YB[EIP-55]                               | Codificación de direcciones para su suma de comprobación usando mayúsculas y minúsculas                                                  | Vitalik Buterin                            | ERC        | Final    |
| http://bit.ly/2OgE5la[EIP-86]                | Tipificación del origen y firma de la transacción. Establece el escenario para "abstraer" la seguridad de las cuentas y permitir a los usuarios crear "cuentas de contrato", avanzando hacia un modelo en el que, a largo plazo, todas las cuentas son contratos que pueden pagar el gas, y los usuarios son libres de definir sus propios modelos de seguridad para realizar cualquier verificación de firma y comprobaciones de nonce deseados (en lugar de utilizar el mecanismo en el protocolo donde ECDSA y el esquema nonce predeterminado son la única forma "estándar" de asegurar una cuenta, que actualmente está codificada en el procesamiento de transacciones).                                                                      | Vitalik Buterin       | Core        | Diferido (para ser reemplazado)    | Constantinople
| http://bit.ly/2QedSFC[EIP-96]                | Cambios en el Blockhash y en la raíz del estado. Almacenar blockhashes en el estado para reducir la complejidad del protocolo y la necesidad de implementaciones de cliente complejas para procesar el opcode `BLOCKHASH`. Extiende el rango de hasta dónde puede llegar la comprobación de blockhash, con el efecto secundario de crear enlaces directos entre bloques con números de bloque muy distantes para facilitar una sincronización inicial de clientes ligeros mucho más eficiente.                                                                       | Vitalik Buterin       | Core        |  Diferido   | Constantinople
| http://bit.ly/2AC05DM[EIP-100] | Cambio del ajuste de dificultad para enfocarse en el tiempo medio de minado y para incluir a bloques tíos. | Vitalik Buterin                            | Core       | Final    | Metropolis Byzantinium
| http://bit.ly/2Jr1zDv[EIP-101] | Serenity y abstracción criptográfica. Abstrae el éter hasta un nivel en que se permite el beneficio de que el éter y los subtokens sean tratados de manera similar por los contratos; reduce el nivel de direccionamiento indirecto requerido para cuentas de política personalizada tales como las multi-firmas y purifica el protocolo Ethereum subyacente al reducir la complejidad mínima de implementación de consenso. | Vitalik Buterin                            | Activo       | Rasgo de Serenitye    | Serenity Casper
| http://bit.ly/2Q5sdEv[EIP-105] | Fragmentación o "sharding" binario más un cambio de semántica en las invocaciones de contratos. EIP que propone el "andamiaje del sharding" para permitir que las transacciones de Ethereum se paralelicen utilizando un mecanismo de sharding del árbol binario y para preparar el escenario para un esquema de sharding posterior. La Investigación del tema sigue en curso; consúltese https://github.com/ethereum/sharding[]. | Vitalik Buterin                            | Activo       | Rasgo de Serenity    | Serenity Casper
| http://bit.ly/2yG2Dzi[EIP-137] | Especificaciones para el Servicio de Nombre de Dominios de Ethereum                                                 | Nick Johnson                               | ERC        | Final    |
| http://bit.ly/2yJtWZm[EIP-140]   | Nuevo Opcode: +REVERT+. Añade la instrucción opcode `REVERT`, que detiene la ejecución y revierte los cambios de estado de ejecución de la EVM sin consumir todo el gas provisto (en cambio, el contrato solo tiene que pagar por la memoria) o perder registros, y devuelve al invocador un puntero a la ubicación de la memoria con el error de código o con el mensaje.                                                                           | Alex Beregszaszi, Nikolai Mushegian        | Core       | Final    | Metropolis Byzantinium
| http://bit.ly/2CQMXfe[EIP-141]                             | Asignación de instrucción inválida para la EVM                                                           | Alex Beregszaszi                           | Core       | Final    |
| http://bit.ly/2qhKz9Y[EIP-145]                             | Instrucciones de intercambio bit a bit en data de la EVM                                                     | Alex Beregszaszi, Paweł Bylica                            | Core       | Diferido    |
| http://bit.ly/2qhxflQ[EIP-150]                             | Cambios en el costo del Gas para operaciones pesadas de Entrada-Salida                                                     | Vitalik Buterin                            | Core       | Final    |
| http://bit.ly/2CQUgne[EIP-155]                             | Protección Simple a ataques de replay. Un "Ataque de Replay" permite que cualquier transacción que utilice un nodo o cliente Ethereum anterior a EIP-155 se firme para que sea válida y se ejecute en ambas cadenas, tanto la de Ethereum como la de Ethereum Classic.                                                               | Vitalik Buterin                            | Core       | Final    | Homestead
| http://bit.ly/2JryBmT[EIP-158]                             | Limpieza de Estados                                                               | Vitalik Buterin                            | Core       | Reemplazada    |
| http://bit.ly/2CR6VGY[EIP-160]                             | Incremento en el costo de la instrucción EXP                                                                            | Vitalik Buterin                            | Core       | Final    |
| http://bit.ly/2OfU96M[EIP-161]                           | Limpieza del árbol de estados (con opción a la preservación de invarianza)                                      | Gavin Wood                                 | Core       | Final    |
| http://bit.ly/2JxdKil[EIP-162]                             | Registrador Inicial de Hash para el servicio ENS                             | Maurelian, Nick Johnson, Alex Van de Sande                    | ERC        | Final    |

| http://bit.ly/2OgsOkO[EIP-165]                             | ERC-165 Detección Estándar de Interfaces                             | Christian Reitwiessner et al.                    | Interface        | Borrador    |
| http://bit.ly/2OgCWu1[EIP-170]                             | Límite para el tamaño en código admisible para contratos                                                                     | Vitalik Buterin                            | Core       | Final    |
| http://bit.ly/2ERNv7g[EIP-181]                             | Soporte para el servicio ENS que calcula en reversa las direcciones de Ethereum a partir de nombres de dominio                            | Nick Johnson                               | ERC        | Final    |
| http://bit.ly/2P0wPz5[EIP-190]                             | Estándar para el Empaquetado de Contratos Inteligentes en Ethereum                                           | Piper Merriam et al. | ERC        | Final    |
| http://bit.ly/2SwNQiz[EIP-196]   | Inclusión de contratos precompilados para sumas y multiplicaciones escalares en la curva elíptica +alt_bn128+. Requerido para realizar verificaciones del protocolo zkSNARK dentro del límite de gas de los bloques.
| Christian Reitwiessner                     | Core       | Final    | Metropolis Byzantinium
| http://bit.ly/2ETDC9a[EIP-197]   | Inclusión de contratos precompilados para una comprobación óptima del emparejamiento en la curva elíptica +alt_bn128+. Complementaria a la EIP-196.
| Vitalik Buterin, Christian Reitwiessner    | Core       | Final    | Metropolis Byzantinium
| http://bit.ly/2DdTCRN[EIP-198]   | Exponenciación modular de números "Big Integer". Inclusión de contratos precompilados que permitan la verificación de firmas RSA y otras aplicaciones criptográficas.
| Vitalik Buterin                            | Core       | Final    | Metropolis Byzantinium
| http://bit.ly/2qjYJr3[EIP-211]   | Nuevos opcodes: `RETURNDATASIZE` y `RETURNDATACOPY`. Proporcionan soporte para la obtención de valores de longitud variable dentro de la EVM con un cargo simple de gas y un mínimo cambio a los opcodes de invocación utilizando nuevos opcodes: `RETURNDATASIZE` y `RETURNDATACOPY`. Realiza un manejo similar a la instrucción existente `calldata`, en la que tras una invocación, la data devuelta se conserva dentro de un buffer virtual desde el cual el invocador puede copiarla (o copiar partes de esta) hacia la memoria, y ante la próxima invocación, se sobre-escribe sobre el buffer.
| Christian Reitwiessner                     | Core       | Final    | Metropolis Byzantinium
| http://bit.ly/2OgV0Eb[EIP-214]   | Nuevo opcode: `STATICCALL`. Permite invocaciones hacia sí mismo u otros contratos que no generan cambios en el estado al desactivar cualquier modificación al estado durante dicha invocación (y sus sub-invocaciones, si estuvieran presentes) para incrementar la seguridad de los contratos inteligentes y garantizarle a los desarrolladores que los bugs de re-ingreso no puedan surgir de tales invocaciones. Las sub-invocaciones vienen con el banderín `STATIC` seteado en `true` para su ejecución, causando una excepción a ser arrojada ante cualquier intento de realizar cualquier operación de cambios de estado, dentro de cualquier instancia en la que `STATIC` es igual a `true`, y resetea este banderín al recibirse el callback.                                                                        | Vitalik Buterin, Christian Reitwiessner    | Core       | Final    | Metropolis Byzantinium
| http://bit.ly/2JssHlJ[EIP-225]  | La red de pruebas Rinkeby es propuesta bajo el esquema de "prueba de autoridad" donde los bloques solo son minados por signatarios de confianza.    | Péter Szilágyi    |        |     | Homestead
| http://bit.ly/2yPBavd[EIP-234]  | Se propone añadir `blockHash` a las opciones de filtro del JSON-RPC    |  Micah Zoltu  | Interface       | Borrador    |

| http://bit.ly/2yKrBNM[EIP-615]   | Sub-rutinas y Saltos Estáticos para la EVM | Greg Colvin, Paweł Bylica, Christian Reitwiessner             | Core       | Borrador    |

| http://bit.ly/2AzGX99[EIP-616]   | Se proponen operaciones "SIMD" o "Instrucciones simples para varios tipos de datos" para la EVM | Greg Colvin             | Core       | Borrador    |

| http://bit.ly/2qjYX1n[EIP-681]   | Se propone formato URL para las solicitudes de transacción | Daniel A. Nagy             | Interface       | Borrador    |

| http://bit.ly/2OYgE5n[EIP-649]   | Retraso de la "Bomba de Dificultad" de Metrópolis y reducción de recompensa de bloque. Se retrasó la "Edad de Hielo" (también conocida como "Bomba de Dificultad") en 1 año y se redujo la recompensa del bloque de 5 a 3 éter. | Afri Schoedon, Vitalik Buterin             | Core       | Final    | Metropolis Byzantinium
| http://bit.ly/2RoGCvH[EIP-658]   | Anidación de código para el estado de la transacción en los recibos. Obtiene e incrusta un campo de estado que indica el estado de éxito o fracaso en los recibos de transacciones para los invocadores, ya que ya no es posible asumir que la transacción falló si y solo si se consumió todo el gas después de la introducción del opcode `REVERT` en EIP-140.
| Nick Johnson                               | Core       | Final    | Metropolis Byzantinium
| http://bit.ly/2Ogwpzs[EIP-706]                             | Compresión concisa para el protocolo de red DEVp2p                                                                    | Péter Szilágyi                             | Networking | Final    |
| http://bit.ly/2AAkCIP[EIP-721]                             | ERC-721 Estándar para tokens no-indistinguibles. Se propone una API estándar que permita que los contratos inteligentes operen con tokens no-indistinguibles (o NFT) para intercambios únicos, que puedan rastrearse en carteras estandarizadas y negociarse en intercambios como activos de valor, similar a como ya operan los ERC20. CryptoKitties fue la primera implementación adoptada popularmente de una NFT digital en el ecosistema Ethereum.                                     | William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs                            | Standard | Borrador    |
| http://bit.ly/2qmuDmJ[EIP-758]   | Suscripciones y filtros para transacciones completadas                        | Jack Peterson                    | Interface | Borrador    |
| http://bit.ly/2RnqlHy[EIP-801]   | ERC-801 Estándar  para contratos tipo "canarios"                        | ligi                   | Interface | Borrador    |
| http://bit.ly/2DdTKkf[EIP-827]                             | ERC827 Estándar para tokens. Una extensión de la interfaz estándar ERC20 para tokens con métodos que permiten la ejecución de llamadas dentro de +transfer+ y "approvals". Este estándar proporciona una funcionalidad básica para transferir tokens, además de permitir que los tokens sean aprobados para que puedan ser gastados por otro tercero en la cadena. Además, permite al desarrollador ejecutar invocaciones sobre transferencias y aprobaciones.                                     | Augusto Lemble                            | ERC | Borrador    |
| http://bit.ly/2Jq2hAM[EIP-930]                             | ERC930 Propone un "Almacén Eterno". El contrato ES ("Eternal Storage") es administrado por una dirección que posee permisos de escritura. El almacén es público, lo que significa que todos tienen permisos de lectura. El contrato almacena la data en mapeos, utilizando un mapeo para cada tipo de variable. El uso de este contrato le permite al desarrollador migrar su "storage" de manera simple, hacia otro contrato si lo necesita.                                     | Augusto Lemble                            | ERC | Borrador    |
|===