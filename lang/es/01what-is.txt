[role="pagenumrestart"]
[[whatis_chapter]]
== ¿Qué es Ethereum?

((("Ethereum (en general)","acerca de", id="ix_01what-is-asciidoc0", range="startofrange")))Ethereum ((("computadora mundial, Ethereum como")))con frecuencia se describe como "la computadora global.&#x201d; ¿Pero qué significa eso? Empecemos con una descripción enfocada en las ciencias de la computación y luego tratemos de descifrarla con una análisis más práctico de las capacidades y características de Ethereum, mientras la comparamos con Bitcoin y otras plataformas descentralizadas de intercambio de información (o "cadenas de bloques", para abreviar).

Desde la perspectiva de la informática, Ethereum es una máquina de estado determinista pero prácticamente ilimitada, que consta de un estado singleton accesible globalmente y una máquina virtual que aplica cambios a ese estado.

Desde una perspectiva más práctica, Ethereum es una infraestructura informática descentralizada de código abierto que ejecuta programas llamados contratos inteligentes (_smart contracts_). Utiliza una cadena de bloques (blockchain) para sincronizar y almacenar los cambios de estado del sistema, junto con una criptomoneda (cryptocurrency) llamada _éter_ para medir y restringir los costos de recursos de ejecución.

La plataforma de Ethereum permite a los desarrolladores crear potentes aplicaciones descentralizadas con funciones económicas integradas. Si bien proporciona alta disponibilidad, auditabilidad, transparencia y neutralidad, también reduce o elimina la censura y reduce ciertos riesgos de contraparte.

[[bitcoin_comparison]]
=== Comparado con Bitcoin

((("Bitcoin", "Ethereum comparado con"))) ((("Ethereum (en general)", "Bitcoin comparado con"))) Muchas personas vendrán a Ethereum con alguna experiencia previa de criptomonedas, específicamente Bitcoin. Ethereum comparte muchos elementos comunes con otras cadenas de bloques abiertas: una red de igual a igual (peer-to-peer, P2P) que conecta a los participantes, un algoritmo de consenso tolerante a fallas bizantinas&#x2013; para la sincronización de actualizaciones de estado (una cadena de bloques de prueba de trabajo (proof-of-work, PoW)), el uso de primitivas criptográficas (cryptographic primitives) como firmas digitales y hashes, y una divisa digital (éter).

Y aun así, de muchas formas, el propósito y la construcción de Ethereum son sorprendentemente diferentes de aquellos que le son propios a las cadenas de bloques que la han precedido, incluyendo Bitcoin.

((("Ethereum (en general)","propósito de")))El propósito principal de Ethereum no es ser una red de pagos con moneda digital. ((("moneda de utilidad, éter como")))Aunque la moneda digital éter es tanto integral como necesaria para la operación de Ethereum, el éter fue diseñado como una _moneda de utilidad_ para pagar por el uso de la plataforma Ethereum como una computadora global.

A diferencia del Bitcoin, que tiene un lenguaje de "Script" muy limitado, Ethereum fue diseñado para ser una cadena de bloques programable de propósito general que ejecuta una _máquina virtual_ capaz de ejecutar código de complejidad arbitraria e ilimitada. Allí donde el lenguaje Script de Bitcoin es, de forma intencional, restringido a la simple evaluación de condiciones verdadero/falso de gasto, el lenguaje de Ethereum es _Turing completo_, lo que significa que Ethereum puede directamente operar como una computadora de propósito general.

[[blockchain_components]]
=== Componentes de una Cadena de Bloques

((("cadena de bloques", "componentes de"))((("Ethereum (en general)","componentes de la cadena de bloques")))Los componentes de una cadena de bloques abierta y pública son (generalmente):

* Una red entre pares iguales (P2P) que conecta a los participantes y propaga transacciones verificadas y bloques de transacciones verificadas, basada en un pass:[<span class="keep-together">protocólo</span>]  "chismoso" estandarizado.
* Mensajes, en forma de transacciones, que representan transiciones de estado.
* Un conjunto de reglas de consenso,  gobernando lo que constituye una transacción y lo que hace una transición válida de estado.
* Una máquina de estado que procesa las transacciones según las reglas del consenso.
* Una cadena de bloques criptográficamente blindados que funge como un diario de todas las transiciones de estado verificadas y aceptadas.
* Un algoritmo de consenso que descentraliza el control sobre la cadena de bloques, obligando a los participantes a cooperar en la aplicación de las reglas de consenso.
* Un esquema de incentivos basado en una teoría de juegos sólida (por ejemplo, costos de prueba de trabajo junto con recompensas de bloque) para proteger económicamente a la máquina de estados en un pass:[<span class="keep-together">entorno</span>]  abierto.
* Una o más implementaciones de software de código abierto para todo lo anterior (conocidos como "clientes").

Todos o la mayoría de estos componentes suelen estar combinados en un único cliente de software. Por ejemplo, en ((("Bitcoin Core")))((("cliente Bitcoind")))Bitcoin, la implementación de referencia es desarrollada por el proyecto de código abierto _Bitcoin Core_ e implementada como cliente _bitcoind_. En Ethereum, en lugar de una implementación de referencia hay una ((("especificación de referencia")))_especificación de referencia_, una descripción matemática del sistema en el Yellow Paper (véase <<references>>). Hay una variedad de clientes, que se construyen de acuerdo con esta especificación de referencia.

En el pasado, utilizamos el término "cadena de bloques" para representar todos los componentes que acabamos de enumerar, como una referencia abreviada a la combinación de tecnologías que abarcan todas las características descritas. Hoy, sin embargo, hay una gran variedad de cadenas de bloques con diferentes propiedades. Necesitamos calificadores que nos ayuden a comprender las características de la cadena de bloques en cuestión, como _abierta, pública, global, descentralizada, neutral,_ y _resistente a la censura_, para identificar las importantes características emergentes de un sistema de "cadena de bloques" que permiten estos componentes.

No todas las cadenas de bloques son creadas iguales. Cuando alguien nos dice que algo es una cadena de bloques, no nos está dando una respuesta. Necesitamos, mas bien, comenzar a hacer muchas preguntas para aclarar lo que se quiere decir al usar el término "cadena de bloques". Comencemos por pedir una descripción de los componentes en la lista anterior, para después preguntar si esta "cadena de bloques" muestra las características de ser abierta, pública..., etc.

[[ethereum_birth]]
=== El Nacimiento de Ethereum

(((" Ethereum (en general)", "nacimiento de")))Todas las grandes innovaciones resuelven problemas reales, y Ethereum no es una excepción. Ethereum fue concebido en un momento en el que la gente reconoció el poder del modelo de Bitcoin, y se trató de ir más allá de las aplicaciones de criptografía. Pero los desarrolladores se enfrentaron a un enigma: o bien necesitaban construir encima de Bitcoin o empezar una nueva cadena de bloques. (((("Bitcoin", "limitaciones de")))Construir sobre Bitcoin significaba vivir dentro de las restricciones intencionales de la red e intentar encontrar soluciones alternativas. El conjunto limitado de tipos de transacción, tipos de datos y tamaños de almacenamiento de datos parecía limitar el tipo de aplicaciones que podían ejecutarse directamente en Bitcoin; cualquier otra cosa necesitaba capas adicionales fuera de la cadena, y eso anulaba inmediatamente muchas de las ventajas de usar una cadena de bloques pública. Para los proyectos que necesitaban más libertad y flexibilidad mientras permanecían en la cadena, una nueva cadena de bloques era la única opción. Pero eso significaba mucho trabajo: el arranque de todos los elementos de la infraestructura, pruebas exhaustivas, etc.

(((("Buterin, Vitalik", "y el nacimiento de Ethereum")))Hacia finales de 2013, Vitalik Buterin, un joven programador y entusiasta de Bitcoin, comenzó a pensar en ampliar aún más las capacidades de Bitcoin y Mastercoin (un protocolo sobre la capa de Bitcoin que amplió Bitcoin para ofrecer contratos inteligentes rudimentarios). En octubre de ese año, Vitalik propuso un enfoque más generalizado al equipo de Mastercoin, uno que permitiera que los contratos flexibles y con guiones (pero no Turing-completo) sustituyeran el lenguaje de contratos especializados de Mastercoin. Aunque el equipo de Mastercoin quedó impresionado, esta propuesta era un cambio demasiado radical para encajar en su plan de desarrollo.

En Diciembre de 2013, Vitalik compartió un informe técnico que perfilaba la idea de fondo de Ethereum: Una cadena de bloques Turing-completa de finalidad genérica. Unas decenas de personas vieron este borrador inicial y le ofrecieron sus comentarios, ayudando a Vitalik  a desarrollar la propuesta.

Los dos autores de este libro recibieron un primer borrador del whitepaper y lo comentaron. Andreas M. Antonopoulos quedó intrigado por la idea y le hizo muchas preguntas a Vitalik sobre el uso de una cadena de bloques separada para hacer cumplir las reglas de consenso sobre la ejecución de contratos inteligentes y las implicaciones de un lenguaje Turing completo. Andreas continuó siguiendo el progreso de Ethereum con gran interés pero estaba en las primeras etapas de la escritura de su libro _Mastering Bitcoin_, y no participó directamente en Ethereum hasta mucho más tarde. (((("Wood, Dr. Gavin", "y el nacimiento de Ethereum")))El Dr. Gavin Wood, sin embargo, fue una de las primeras personas en llegar a Vitalik y ofrecerse a ayudar con sus habilidades de programación en C++. Gavin se convirtió en el cofundador, diseñador de código y CTO de Ethereum.

Como cuenta Vitalik en su artículo http://bit.ly/2T2t6zs["Ethereum Prehistory"]: 

____
Hasta ese momento, el protocolo de Ethereum era exclusivamente de mi propia creación. De allí en adelante, sin embargo, nuevos participantes comenzaron a unirse a la congregación. Sin duda el mas prominente en lo que se refiere al protocolo fue Gavin Wood...

A Gavin también se le puede atribuir en gran medida el sutil cambio de visión de concebir a Ethereum como una plataforma para construir dinero programable, con contratos basados en cadenas de bloques que pueden contener activos digitales y transferirlos de acuerdo con reglas preestablecidas, a enfocarlo como una plataforma de computación de propósito general. Esto comenzó con sutiles cambios de énfasis y terminología, y más tarde esta influencia se hizo más fuerte con el creciente énfasis en el conjunto de la "Web 3", que veía a Ethereum como una pieza de un conjunto de tecnologías descentralizadas, siendo las otras dos, Whisper y Swarm.
____

En Diciembre de 2013, Vitalik y Gavin refinaron y evolucionaron la idea, construyendo en conjunto la capa del protocolo que se convertiría en Ethereum.

Los fundadores de Ethereum pensaban en una cadena de bloques sin un propósito específico, que pudiera soportar una amplia variedad de aplicaciones al ser _programadas_. La idea era que utilizando una cadena de bloques de propósito general como Ethereum, un desarrollador podría programar su aplicación particular sin tener que implementar los mecanismos subyacentes de redes de pares iguales, cadenas de bloques, algoritmos de consenso, etc. La plataforma Ethereum fue diseñada para abstraer todos estos detalles y proporcionar un entorno de programación determinista y seguro para las aplicaciones de cadenas de bloques descentralizadas.

Al igual que Satoshi, Vitalik y Gavin no sólo inventaron una nueva tecnología, sino que combinaron nuevos conceptos con tecnologías existentes de una manera novedosa y entregaron al mundo el código de este prototipo para probar sus ideas.

Los fundadores trabajaron por años, construyendo y refinando la visión. El 30 de Julio de 2015, el primer bloque de Ethereum fue minado. La computadora global comenzaba a servir al mundo. 

[NOTE]
====
El artículo de Vitalik Buterin "A Prehistory of Ethereum" (Una prehistoria de Ethereum) se publicó en septiembre de 2017 y ofrece una fascinante visión en primera persona de los primeros momentos de Ethereum.

Se puede leer en
https://vitalik.ca/general/2017/09/14/prehistory.html[].
====

[[development_stages]]
=== Las Cuatro Etapas del Desarrollo de Ethereum

(((("Ethereum (en general)","cuatro etapas de desarrollo")))El desarrollo de Ethereum se planificó en cuatro etapas distintas, y en cada una de ellas se produjeron cambios importantes. ((("bifurcaciones fuertes", seealso="DAO; otras bifurcaciones fuertes específicas, e.g.: Spurious Dragon")))Una etapa puede incluir sub-lanzamientos, conocidos como "bifurcaciones fuertes", que cambian la funcionalidad de una manera que no es compatible con la anterior.

Las cuatro etapas principales de desarrollo se denominan _Frontier_, _Homestead_, _Metropolis_, y _Serenity_. Las bifurcaciones fuertes intermedias que han ocurrido (o están planeadas) hasta la fecha se llaman en código _Ice Age_, _DAO_, _Tangerine Whistle_, _Spurious Dragon_, _Byzantium_, y _Constantinople_. Tanto las etapas de desarrollo como las bifurcaciones fuertes intermedias se muestran en la siguiente línea de tiempo, que está "fechada" por el número de bloque:


Bloque #0:: ((("Frontier")))__Frontier__&#x2014;La etapa inicial de Ethereum, que duró desde el 30 de julio de 2015 hasta marzo de 2016.

Bloque #200.000:: ((("Ice Age")))__Ice Age__&#x2014;Una bifurcación fuerte para introducir un aumento exponencial de la dificultad, para motivar una transición a la Prueba de Colaterales, cuando esté lista.

Bloque #1,150,000:: ((("Homestead")))__Homestead__&#x2014;La segunda etapa de Ethereum, lanzada en marzo de 2016.

Bloque 1.192.000:: ((("DAO (Organización Autónoma Descentralizada)")))__DAO__&#x2014;Una bifurcación fuerte que reembolsó a las víctimas del ataque en contra del contrato de The  DAO y que causó que Ethereum y Ethereum Clasic se dividieran en dos sistemas competidores.

Bloque #2.463.000:: ((("Tangerine Whistle")))__Tangerine Whistle__&#x2014;Una bifurcación fuerte para cambiar el cálculo del gas para ciertas operaciones de E/S-pesadas y para limpiar el estado acumulado de un ataque de denegación de servicio (DoS) que explotó el bajo coste del gas de esas operaciones.

Bloque #2,675,000:: ((("Spurious Dragon")))__Spurious Dragon__&#x2014; Una bifurcación fuerte para abordar más vectores de ataque DoS, y realizar otra limpieza de estado. También implementó un mecanismo de protección contra ataque de repetición.


Bloque #4.370.000:: ((("Metropolis"))((("bifurcación Byzantium")))__Metropolis Byzantium__&#x2014;Metrópolis es la tercera etapa de Ethereum, es la etapa actual al momento de escribir este libro, que fue lanzada en octubre de 2017. Byzantium es la primera de las dos bifurcaciones fuertes planeadas para Metrópolis.


Después de Byzantium, hay una bifurcación más planeada para Metrópolis: ((("bifurcación Constantinople")))((("Serenity")))Constantinopla. A Metrópolis le seguirá la etapa final del despliegue de Ethereum, con el nombre en clave de Serenity.


[[general_purpose_blockchain]]
=== Ethereum: Una Cadena de Bloques de Propósito General

((("Bitcoin","la cadena de bloques de Ethereum comparada con la de Bitcoin")))((("Ethereum (en general)","como cadena de bloques de propósito general")))La cadena de bloques original, es decir, la cadena de bloques de Bitcoin, realiza un seguimiento del estado de las unidades de Bitcoin y de sus propietarios. ((("máquina de estados distribuida, Ethereum as")))Se puede pensar en Bitcoin como una _máquina de estados_ de consenso distribuido, donde las transacciones causan una _transición de estado_ global, alterando la titularidad de las monedas. Las transiciones de estado están limitadas por las reglas de consenso, permitiendo que todos los participantes converjan (tarde o temprano) en un estado común (de consenso) referente al sistema, después de ser minados varios bloques.

Ethereum es también una máquina de estados distribuida. Pero en lugar de rastrear sólo el estado de la titularidad de su moneda, ((("tuplas llave-valor")))Ethereum rastrea las transiciones de estado de un almacén de datos de propósito general, es decir, un almacén que puede contener cualquier data expresable en forma de _tuplas llave-valor_. Un almacén de datos de llaves y valores contiene valores arbitrarios, cada uno de ellos referenciado por alguna llave; por ejemplo, el valor "Dominando a Ethereum" es referenciado por la llave "Título del Libro". En cierto modo, esto sirve para el mismo propósito que el modelo de almacenamiento de datos de la _Memoria de Acceso Aleatorio_ (RAM) utilizado por la mayoría de las computadoras de uso general. Ethereum tiene una memoria que almacena tanto el código como los datos, y utiliza la cadena de bloques de Ethereum para rastrear cómo cambia esta memoria con el tiempo. Al igual que una computadora de propósito general con almacenamiento de programas, Ethereum puede colocar código en su máquina de estado y _ejecutar_ ese código, almacenando los cambios de estado resultantes en su cadena de bloques. Dos de las diferencias más críticas con respecto a la mayoría de las computadoras de propósito general, son que los cambios de estado de Ethereum se rigen por las reglas del consenso, por un lado, y que el estado se distribuye globalmente, por otro. Ethereum responde a la pregunta: "¿Qué pasaría si pudiéramos rastrear cualquier estado arbitrario y pudiéramos programar la máquina de estados para crear una computadora global que opere bajo consenso?"

[[ethereum_components]]
=== Los Componentes de Ethereum

((("cadena de bloques","componentes de la")))((("Ethereum (en general)","componentes de la cadena de bloques")))En Ethereum, los componentes del sistema de la cadenas de bloques, descritos en <<blockchain_components>> son, más específicamente:


Red P2P:: Ethereum se ejecuta en la _red principal de Ethereum_, que es accesible en el puerto TCP 30303, y ejecuta un protocolo llamado _ÐΞVp2p_.

Reglas de consenso:: Las reglas de consenso de Ethereum se definen en la especificación de referencia, el Yellow Paper (ver <<references>>).

Transacciones:: Las transacciones de Ethereum son mensajes de red que incluyen (entre otras cosas) un remitente, un destinatario, un valor y una carga de datos.

[role="pagebreak-before"]
Máquina de estado:: Las transiciones de estado de Ethereum son procesadas por la _Máquina Virtual de Ethereum_ (EVM), una máquina virtual basada en una pila que ejecuta _código binario_ (instrucciones en el lenguaje de la máquina). Los programas de la EVM, llamados "contratos inteligentes", se escriben en lenguajes de alto nivel (por ejemplo, Solidity) y se compilan en código binario para su ejecución en la EVM.

Estructuras de datos:: El estado de Ethereum se almacena localmente en cada nodo como una _base de datos_ (normalmente en forma de bibliotecas "LevelDB" de Google), que contiene las transacciones y el estado del sistema en una estructura de datos hash serializada llamada _Árbol de Merkle-Patricia_.

Algoritmo de consenso:: Ethereum usa el modelo de consenso de Bitcoin, el Consenso Nakamoto, el cual usa bloques con una firma y ordenados secuencialmente, ponderado en importancia por la prueba de trabajo (del inglés, "Proof-of-Work" o PoW) para determinar la cadena más larga, y por lo tanto, el estado actual. Sin embargo, hay planes de migrar a un sistema de votación ponderado de prueba de colaterales (del inglés "Proof-of-Stake" o PoS), denominado _Casper_, en el futuro cercano.

Seguridad económica:: Ethereum usa actualmente un algoritmo de prueba de trabajo (PoW) llamado _Ethash_, pero esto cambiará en el futuro con la migración a una prueba de colaterales (PoS).

Clientes:: Ethereum tiene varias implementaciones interoperables del cliente de software, de los cuales, los más prominentes son _Go-Ethereum_ (_Geth_) y _Parity_.

[[references]]
==== Referencias Adicionales

Las siguientes referencias proporcionan información adicional sobre las tecnologías mencionadas aquí:

* El Yellow Paper de Ethereum:
https://ethereum.github.io/yellowpaper/paper.pdf

* El "Beige Paper", una re-escritura del Yellow Paper para una audiencia más amplia en un lenguaje menos formal:
https://github.com/chronaeon/beigepaper

* Protocolo de red ÐΞVp2p:
http://bit.ly/2quAlTE

* Lista de recursos sobre la Máquina Virtual de Ethereum:
http://bit.ly/2PmtjiS

* Base de datos LevelDB (usado en la mayoría de ocasiones para guardar una copia local de la cadena de bloques):
https://github.com/google/leveldb

* Árboles de Merkle-Patricia:
https://github.com/ethereum/wiki/wiki/Patricia-Tree

* Algoritmo PoW Ethash:
https://github.com/ethereum/wiki/wiki/Ethash

* Guía de Implementación v1 de PoS Casper:
http://bit.ly/2DyPr3l

* Cliente Go-Ethereum (Geth):
https://geth.ethereum.org/

* Cliente Parity de Ethereum:
https://parity.io/

[[turing_completeness]]
=== Ethereum y la Completitud de Turing

((("Ethereum (en general)","completitud de Turing y")))((("completitud de Turing","Ethereum y")))Tan pronto como se empieza a leer acerca de Ethereum, inmediatamente encontramos el término "Turing completo". Se dice que Ethereum, a diferencia de Bitcoin, es Turing completo. ¿Qué significa esto exactamente?

((("Turing, Alan"))) El término se refiere al matemático Inglés Alan Turing, quién es considerado el padre de la ciencia de la computación. En 1936 creó un modelo matemático de computadora consistente en una máquina de estados que manejaba símbolos, leyéndolos y escribiéndolos en un espacio de memoria secuencial (similar a una cinta de papel de longitud infinita). Con la construcción de esta máquina de estados, Turing pasó a proveer un fundamento matemático para responder (en negativa) a preguntas sobre la _computabilidad universal_ que hacía referencia a si todos los problemas tenían solución. Él probó que existen ciertas clases de problemas que no se pueden resolver computacionalmente. ((("problema de la parada")))Específicamente él demostró que el _problema de la parada_ (el problema de determinar si, dado un programa arbitrario y su data de entrada, podremos saber si la ejecución del mismo terminará o si continuará ejecutándose infinitamente) no tiene una solución.

((("máquina Universal de Turing (UTM)")))((("UTM (Universal Turing machine)")))Alan Turing, además definió un sistema como _Turing completo_ si el mismo puede ser usado para simular una máquina de Turing. A dicho sistema se le denomina _Máquina Universal de Turing_ (del inglés "Universal Turing Machine" o UTM).

La habilidad de Ethereum de ejecutar un programa almacenado en una máquina de estados denominada Máquina Virtual de Ethereum mientras lee y escribe datos en memoria, hace de ella un sistema Turing-completo y por lo tanto una UTM. Ethereum puede computar cualquier algoritmo que puede ser computado por una máquina de Turing, dada la limitación de una memoria finita.

La mayor innovación de Ethereum es combinar la arquitectura de computación de propósito general basado en computadoras con almacenamiento de programas, con una cadena de bloques descentralizada, para de esta forma crear un ordenador global distribuido con estado único (o singleton). Los programas de Ethereum se ejecutan "en todas partes", y aún así producen un único estado común que es asegurado por sus reglas de pass:[<span class="keep-together">consenso</span>].

[[turing_completeness_feature]]
==== Completitud de Turing como una  "Característica"

((("completitud de Turing","como una característica")))Al escuchar que Ethereum es Turing completo, puedes llegar a la conclusión de que es una _característica_ que está de alguna forma ausente en un sistema que es Turing incompleto. Precisamente, es al contrario. La completitud de Turing es muy fácil de conseguir; de hecho, http://bit.ly/2ABft33[la máquina de estados Turing completa más sencilla conocida] tiene 4 estados y usa 6 símbolos, con una definición de estados que es de solo 22 instrucciones de longitud. Ciertamente, en ocasiones hay sistemas que son hallados "Turing completos por accidente." Una referencia entretenida sobre dichos sistemas, puede ser encontrada en el enlace: http://bit.ly/2Og1VgX[].

Sin embargo, la completitud de Turing es muy peligrosa, particularmente en sistemas de acceso abierto como las cadenas de bloques públicas, debido al problema de la parada que mencionamos anteriormente. Por ejemplo, las impresoras modernas son Turing completas y pueden recibir archivos para imprimir que las envían a un estado congelado. El hecho de que Ethereum sea Turing completo significa que Ethereum puede computar cualquier programa de cualquier complejidad. Pero esa flexibilidad trae algunos problemas espinosos de seguridad y de gestión de recursos. Una impresora que no responde se puede apagar y volver a encender. Eso no es posible con una cadena de bloques pública.

[[turing_completeness_implications]]
====Implicaciones de la Completitud de Turing

((("completitud de Turing","implicaciones de la")))Turing demostró que no se puede predecir si un programa finalizará al simularsele en una computadora. En términos simples, no podemos predecir el camino que tomará el programa sin ejecutarlo. ((("bucles infinitos")))Los sistemas Turing-Completos pueden caer en la ejecución de "bucles infinitos", un término utilizado (muy simplificado) para describir un programa que nunca termina su ejecución. Pero los bucles infinitos involuntarios pueden surgir si previo aviso, debido a la complejidad de las interacciones entre las condiciones iniciales y el código de un programa. En Ethereum esto plantea un reto: cada nodo participante (cliente) debe validar cada transacción, ejecutando cualquier contrato inteligente que sea invocado en ella. Pero como Turing demostró, Ethereum no puede predecir si un contrato inteligente terminará su ejecución o cuánto tiempo durará su ejecución, sin ejecutar efectivamente su programa. Por accidente o a propósito un contrato inteligente  puede ser creado para que corra infinitamente cuando un nodo lo intente validar. Esto efectivamente es un ataque de denegación de servicios (del inglés "Deny of Service" o DoS). Y ciertamente, entre un programa que toma milisegundos en validarse y otro que corre infinitamente sin terminar nunca su ejecución, hay un rango infinito de programas desagradables, que acaparan recursos, hinchan de data la memoria y sobrecalientan la CPU en procesos que simplemente desperdician recursos. En una computadora global, un programa que abusa de los recursos informáticos, está abusando de los recursos del planeta. ¿Como puede Ethereum restringir los recursos utilizados por un contrato inteligente, si no puede predecir cuántos recursos que serán utilizados?

((("EVM (Máquina Virtual de Ethereum)","gas y"))((("gas","como contador en la completitud de Turing")))Para responder a este desafío, Ethereum introduce un mecanismo de conteo llamado _gas_. Como la EVM ejecuta contratos inteligentes, la misma toma en cuenta cuidadosamente cada instrucción (cada cómputo, acceso a datos, etc). Cada instrucción tiene un costo predeterminado en unidades de gas. Cuando una transacción inicia la ejecución de un contrato inteligente, esta debe incluir el límite superior de unidades de gas que pueden ser consumidos en la ejecución del contrato inteligente. La EVM dará por finalizada la ejecución, si la cantidad de gas consumido por instrucciones computacionales excede el gas disponible para esa transacción. El gas es el mecanismo que Ethereum utiliza para permitir cómputos Turing-Completos a la vez que se limitan los recursos que cualquier programa puede consumir.

La siguiente pregunta es entonces: '¿De donde se obtiene el gas para pagar por la ejecución de las instrucciones computaciones en la computadora global de Ethereum?' El gas no se consigue en ninguna casa de cambio. ((("éter (en general)","gas y")))El mismo solo se puede adquirir como parte de una transacción y solo se puede comprar con éter. El éter se necesita para ser enviado junto con la transacción y necesita ser explícitamente destinado a la compra de gas con un precio de gas aceptable. Al igual que en una estación de servicios, el precio del gas (o "combustible") no es fijo. El gas es comprado para las transacciones, las instrucciones computacionales son ejecutadas y el gas que no es utilizado es devuelto al remitente de la transacción. 

[[DApp]]
=== De las Cadenas de Bloques de Uso General a las Aplicaciones Descentralizadas (DApps)

((("DApps (aplicaciones descentralizadas)","Ethereum como plataforma para")))((("Ethereum (en general)","DApps y")))Ethereum comenzó como un modo de crear una cadena de bloques de propósito general que pudiera ser programada para usos variados. Pero rápidamente, la visión de Ethereum se amplió para convertirse en una plataforma para el desarrollo de DApps. Las DApps representan una perspectiva más amplia que lo que son los contratos inteligentes. Una DApps es una forma de contrato inteligente y a la vez una interfaz de usuario web. En términos más generales, una DApp es una aplicación web que se construye sobre infraestructuras de servicios de código abierto, descentralizados y de redes P2P, o entre pares iguales.

Una DApp se compone al menos de:

- Contratos inteligentes en una cadena de bloques
- Una interfaz de usuario web o "frontend"

Adicionalmente, muchas DApps incluyen otros componentes descentralizados, tales como:

- Un protocolo de almacenamiento (P2P) descentralizado y su respectiva plataforma
- Un protocolo de mensajería (P2P) descentralizado y su respectiva plataforma

[TIP]
====
Podemos encontrar el término "DApps" deletreado como _&#208;Apps_. El caracter &#208; es el caracter Latín nombrado "ETH" aludiendo a Ethereum. Para mostrar este caracter se usa el código Unicode +0xD0+, o si es necesario la entidad de caracteres HTML +eth+ (o en entidad decimal +#208+).
====

[[evolving_WWW]]
=== La Tercera Era de la Internet

((("DApps (aplicaciones descentralizadas)","web3 y")))((("Ethereum (en general)","web3 y")))((("web3")))En 2004, el término "Web 2.0" saltó a la fama, describiendo una evolución de la web hacia contenidos generados por el usuario, interfaces receptivas e interactividad. Web 2.0 no es una especificación técnica, sino un término que describe el nuevo enfoque de las pass:[<span class="keep-together">aplicaciones</span>] web.

El concepto de DApps está destinado a llevar la World Wide Web a su próxima etapa evolutiva natural, introduciendo la descentralización con los protocolos P2P dentro de cada fase de una aplicación web. El término utilizado para describir esta evolución es _web3_, que significa la tercera versión de la web. ((("Wood, Dr. Gavin","y la web3")))Primeramente propuesta por el Dr Gavid Wood, la web3 representa una nueva visión y enfoque para las aplicaciones web: pasar de aplicaciones gestionadas y administradas de manera centralizada, a aplicaciones construidas con protocolos descentralizados. 

En capítulos posteriores exploraremos la biblioteca JavaScript web3.js de Ethereum, la cual enlaza aplicaciones JavaScript que se ejecutan en el navegador con la cadena de bloques de Ethereum. La biblioteca web3.js también incluye una interfaz de acceso a una red de almacenamiento P2P llamada _Swarm_ y un servicio de mensajería P2P llamado _Whisper_. Con estos tres componentes incluidos en una biblioteca JavaScript que se ejecuta en el navegador web, los desarrolladores disponen de una entorno completo de desarrollo de aplicaciones que les permite construir DApps en la web3. 

[[development_culture]]
=== Cultura de Desarrollo de Código de Ethereum

((("cultura de desarrollo de código, Ethereum")))(((("Ethereum (en general)","cultura de desarrollo de código")))Hasta ahora hemos hablado sobre cómo los objetivos y la tecnología de Ethereum difieren de los de otras cadenas de bloques que le precedieron, como Bitcoin. Ethereum también tiene una cultura de desarrollo de código muy diferente.

((("Bitcoin","cultura de desarrollo de código")))En Bitcoin, el desarrollo de código es guiado por principios conservadores: todos los cambios son estudiados cuidadosamente para asegurar que ninguno de los sistemas actuales sean interrumpidos. En casi todos los casos, los cambios son únicamente implementados si tienen compatibilidad con las versiones anteriores. Los clientes o nodos ya existentes, pueden optar por participar de los cambios, pero seguirán funcionando si deciden no actualizarse.

((("compatibilidad con versiones anteriores, Ethereum vs. Bitcoin")))En Ethereum, en comparación, la cultura de desarrollo de código de la comunidad se centra en el futuro más que en el pasado. El mantra (no del todo serio) es "moverse rápido y romper cosas". Si se necesita un cambio, se implementa, incluso si eso significa invalidar supuestos previos, romper la compatibilidad u obligar a los clientes a actualizarse. La cultura de desarrollo de código de Ethereum se caracteriza por la rápida innovación, la rápida evolución y la disposición a desplegar mejoras prospectivas, incluso si esto es a expensas de irrumpir con alguna compatibilidad con versiones anteriores.

Lo que esto significa para el desarrollador de código es que se debe permanecer flexible y estar preparado para reconstruir la infraestructura a medida que cambian algunas de las suposiciones subyacentes. Uno de los grandes desafíos que enfrentan los desarrolladores en Ethereum es la contradicción inherente entre el despliegue de código en un sistema inmutable y una plataforma de desarrollo que aún está en evolución. No se pueden simplemente "actualizar" nuestros contratos inteligentes. Se debe estar preparado para desplegar nuevos contratos, migrar usuarios, aplicaciones y fondos, así como comenzar de nuevo.

Irónicamente, esto también significa que el objetivo de construir sistemas con más autonomía y menos control centralizado todavía no se ha cumplido por completo. La autonomía y la descentralización requieren un poco más de estabilidad en la plataforma de la que probablemente obtendremos en Ethereum en los próximos años. Para "evolucionar" la plataforma, se debe estar listo para desechar y reiniciar nuestros contratos inteligentes, lo que significa que se debe retener un cierto grado de control sobre ellos.

Pero, en el lado positivo, Ethereum avanza muy rápido. Hay pocas oportunidades para la ley de trivialidad de Parkinson, una ley que hace referencia al fenómeno de retrasar el desarrollo de proyectos a causa de despilfarrar tiempo y recursos, discutiendo sobre detalles triviales y menores, como, por ejemplo, cómo construir el cobertizo para bicicletas en la parte trasera de una central nuclear. Si comenzamos por deshacernos de las bicicletas, es posible que de repente descubramos que mientras estábamos distraídos en ellas, el resto del equipo de desarrollo había cambiado los planes y habían abandonado las bicicletas en pos de aero-deslizadores autónomos.

Tarde o temprano, el desarrollo de la plataforma de Ethereum se ralentizará y sus interfaces se harán más estables. Pero mientras tanto, la innovación es el principio impulsor. Será mejor que sigamos el ritmo, porque nadie reducirá la velocidad por nosotros.

[[why_learn]]
=== ¿Por Qué Aprender Ethereum?

((("cadena de bloques","Ethereum como cadena de bloques para desarrolladores")))((("Ethereum (en general)","razones para aprenderlo")))Las cadenas de bloques tienen una curva de aprendizaje muy pronunciada, ya que combinan múltiples disciplinas en un solo dominio: programación, seguridad informática, criptografía, economía, sistemas distribuidos, redes P2P, etc. Ethereum hace que esta curva de aprendizaje sea mucho menos empinada, por lo que podemos comenzar rápidamente. Pero justo debajo de la superficie de un entorno engañosamente simple, se encuentran muchas más cosas. A medida que se aprende y se comienza a buscar más profundamente, siempre hay otra capa de complejidad y de asombro.

Ethereum es una gran plataforma para aprender sobre cadenas de bloques y está construyendo una comunidad masiva de desarrolladores, más rápido que cualquier otra plataforma de cadenas de bloques. Más que cualquier otra plataforma, Ethereum es una _cadena de bloques de desarrolladores_, construida por desarrolladores para desarrolladores. Un desarrollador familiarizado con aplicaciones de JavaScript puede ingresar a Ethereum y comenzar a producir código funcional muy rápidamente. Durante los primeros años de la vida de Ethereum, era común ver camisetas que anunciaban que se podía crear un token en solo cinco líneas de código. Por supuesto, esta es una espada de doble filo. Es fácil escribir código, pero es muy difícil escribir código _bueno_ y _seguro_.

[[teaching_objectives]]
=== Qué Enseña este Libro

Este libro se sumerge en Ethereum y examina todos los componentes. Comenzará con una transacción simple, analizará cómo funciona, creará un contrato simple, lo mejorará y seguirá su viaje a través del sistema de Ethereum.

Aprenderemos no solo cómo usar Ethereum&#x2014;cómo funciona&#x2014;sino también por qué está diseñado de la manera en que está. Podremos comprender cómo funcionan cada una de las piezas, y cómo estas encajan entre sí y por qué.(((range="endofrange", startref="ix_01what-is-asciidoc0")))((("cuenta","contrato", see="contratos inteligentes")))((("criptografía asimétrica", see="criptografía de llave pública")))((("BIPs", see="Bitcoin improvement proposals")))((("quema", see="quema de éter")))((("criptografía","asimétrica", see="criptografía de llave pública")))((("aplicaciones descentralizadas", see="DApps")))((("Organización Autónoma Descentralizada", see="DAO")))((("función por defecto", see="función fallback")))((("carteras deterministas (germinadas)","jerárquicas", see="carteras jerárquico deterministas")))((("ataques de DoS", see="ataques de denegación de servicios")))((("ECDSA", see="Elliptic Curve Digital Signature Algorithm")))((("ETC", see="Ethereum Classic")))((("Ethereum (en general)","clientes", see="clientes, Ethereum")))((("Propuestas de Mejora de Ethereum", see="EIP entries")))((("Servicio de Nombres de Ethereum", see="ENS")))((("Máquina Virtual de Ethereum", see="EVM")))((("Cuentas Manejadas Externamente", see="EOA")))((("comisiones", see="gas")))((("ICOs", see="Initial Coin Offerings")))((("Mastering Ethereum Token", see="METoken")))((("MEW", see="MyEtherWallet")))((("nombres/denominación", see="ENS (Ethereum Name Service)")))((("NFTs", see="tokens no indistinguibles")))((("PoS", see="proof of stake")))((("PoW", see="proof of work")))((("PoWHC", see="Proof of Weak Hands Coin")))((("comandos (RPC) Remote Procedure Call", see="JSON-RPC API")))((("commandos RPC (Remote Procedure Call)", see="JSON-RPC API")))((("Secure Hash Algorithm", see="SHA entries")))((("carteras germinadas", see="carteras deterministas")))((("contratos inteligentes","Vyper y", see="Vyper")))((("smartphones", see="carteras para móviles (smartphone)")))((("almacenamiento", see="almacenamiento de data")))((("SUICIDE", see="código operacional SELFDESTRUCT")))((("sincronización", see="sincronización rápida")))((("sincronización", see="primera sincronización")))((("comisiones de transacciones", see="gas")))((("carteras","HD", see="carteras jerárquico deterministas")))((("carteras","MetaMask", see="MetaMask")))