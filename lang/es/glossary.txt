prefacio
== Glosario rápido

Este glosario rápido contiene muchos de los términos usados en relación a Ethereum.  Estos términos son usados a través del libro, así que márcalos para una referencia rápida.

Cuenta:
((("cuenta","definición")))Es un objeto que contiene una dirección, un saldo, un nonce y tanto almacenamiento como código de manera opcional. Una cuenta puede ser una cuenta de contrato o una cuenta manejada externamente (de sus siglas en inglés, EOA).

Dirección:
((("direcciones","definición")))En su forma más general, una dirección representa o una EOA o un contrato que puede recibir (dirección de destino) o enviar (dirección de origen) transacciones en la cadena de bloques. En un lenguaje más técnico, una dirección consiste en los 160 bits más a la derecha de un hash Keccak de una llave pública ECDSA.

Assert::
((("función assert","definición")))En Solidity, +assert(false)+ compila en la forma binaria de +0xfe+, es decir, un código operacional no válido, que consume todo el gas restante y revierte todos los cambios. Cuando falla una instrucción +assert()+, está sucediendo algo muy incorrecto e inesperado, y deberíamos corregir nuestro código. Debemos usar +assert()+ para evitar condiciones que nunca deberían ocurrir.

Big-endian::
((("big-endian, definición")))Se trata de un estándar en la representación posicional de números, donde el dígito más significativo es el primero. Caso contrario al del estándar little-endian, donde el dígito menos significativo es el primero.

BIPs::
((("propuestas de mejora de Bitcoin (BIPs)")))Propuestas de mejora de Bitcoin (del inglés Bitcoin Improvement Proposals). Se trata de un conjunto de propuestas que han presentado miembros de la comunidad de Bitcoin para mejorar Bitcoin. Por ejemplo, BIP-21 es una propuesta para mejorar el esquema de identificador uniforme de recursos (URI) de Bitcoin.

Bloque:
((("bloque, definición")))Es una colección de información requerida (según encabezado de bloque) acerca de las transacciones incluidas y un conjunto de otros encabezados de bloque conocidos como ommers. Los mineros agregan bloques a la red Ethereum.

Cadena de Bloques::
((("cadena de bloques","definición")))En Ethereum, una secuencia de bloques validados por el sistema de prueba de trabajo, cada uno vinculado a su predecesor hasta el bloque génesis. Esto se diferencia del protocolo en Bitcoin en que no existe un límite en el tamaño del bloque; en su lugar, utilizan límites de combustible o gas variables.

Código Binario::
((("código binario", seealso="código binario de la EVM")))Es un conjunto de instrucciones abstractas diseñadas para una ejecución eficiente por un intérprete de software o una máquina virtual. A diferencia del código fuente legible por humanos, el código binario se expresa en formato numérico.

Bifurcación Byzantium::
((("bifurcación Byzantium")))La primera de las dos bifurcaciones fuerte para la etapa de desarrollo de Metropolis. Incluía a la EIP-649: Retardo de la Bomba de Dificultad de Metropolis y la Reducción de Recompensa de Bloque, donde la Edad de Hielo (ver más abajo) se retrasó 1 año y la recompensa de bloque se redujo de 5 a 3 éter.

Compilado::
((("compilado","definición")))Conversión de código escrito en un lenguaje de programación de alto nivel (por ejemplo, Solidity) en un lenguaje de nivel inferior (por ejemplo, código binario, legible por la EVM).

Consenso:
((("consenso","definición")))Cuando numerosos nodos&#x2014;generalmente la mayoría de los nodos en la red&#x2014;tienen todos, los mismos bloques en su mejor cadena de bloques, validada localmente. No confundir con reglas de consenso.

Reglas de Consenso::
((("reglas de consenso")))Son las reglas de validación de bloques que siguen los nodos completos para permanecer en consenso con los demás nodos. No confundir con consenso.

Bifurcación Constantinopla::
((("bifurcación Constantinopla")))Consiste en la segunda parte de la etapa de Metropolis, originalmente prevista para mediados-de-2018. Se esperaba que incluyera un cambio a un algoritmo de consenso híbrido de prueba-de-trabajo/prueba-de-participación, entre otros cambios.

Cuenta de Contrato::
((("cuentas de contratos","definición")))((("contratos inteligentes","definición")))Es una cuenta que contiene un código asociado el cual se ejecuta cada vez que recibe una transacción de otra cuenta (bien sea una EOA u otro contrato).

Transacción de creación de contrato::
((("transacción de creación de contrato")))Es una transacción especial, que tiene a a la "dirección cero" como destinatario, que se utiliza para registrar un contrato y grabarlo en la cadena de bloques Ethereum (véase "dirección cero").

DAO::
((("DAO (Organización Autónomo Descentralizada)","definición")))Organización Autónoma Descentralizada. Se trata de una empresa o cualquier otra organización que opere sin una gestión jerárquica. También puede referirse a un contrato llamado en su momento "The DAO" lanzado el 30 de abril de 2016, que luego fue pirateado en junio de 2016; Esto finalmente motivó una bifurcación fuerte (con el nombre en código DAO) en el bloque # 1,192,000, que revirtió al contrato DAO pirateado y causó que Ethereum y Ethereum Classic se dividieran en dos sistemas competidores.

DApp::
((("DApps (aplicaciones descentralizadas)","definición")))Aplicación descentralizada. Como mínimo, se trata de un contrato inteligente y una interfaz de usuario web. En términos más generales, una DApp es una aplicación web que se construye sobre servicios de infraestructura abiertos, descentralizados y entre pares iguales. Además, muchas DApps incluyen almacenamiento descentralizado y/o un protocolo y plataforma de mensajería.

Escritura::
((("escritura","definición")))Es el estándar de un token no indistinguible (de sus siglas en inglés, "non-fungible token" o NFT) introducido por la propuesta ERC721. A diferencia de los tokens ERC20, las escrituras prueban la propiedad y no son intercambiables, aunque no se reconocen como documentos legales en ninguna jurisdicción—al menos no actualmente (véase también "NFT").

Dificultad::
((("ajuste de dificultad")))Un ajuste con alcance sobre toda la red que controla cuántos cálculos se requieren para producir una prueba de trabajo.

Firma digital:
((("firmas digitales","definición")))Una cadena corta de datos que un usuario produce para un documento, usando una llave privada de tal manera que cualquier persona que conozca la llave pública correspondiente, la firma y el documento, pueda verificar que (1) el documento fue efectivamente "firmado" por el propietario de esa llave privada en particular, y (2) el documento no ha sido modificado después de su firma.

ECDSA::
((("Elliptic Curve Digital Signature Algorithm (ECDSA)","definición")))Se trata del "Algoritmo de Firma Digital basada en la Curva Elíptica" (o del inglés: "Elliptic Curve Digital Signature Algorithm"). Se trata de un algoritmo criptográfico utilizado por Ethereum para garantizar que los fondos solo puedan ser utilizados por sus propietarios.

EIP::
((("EIPs (Ethereum Improvement Proposals)","definición")))Son Propuestas de Mejora para Ethereum, o del inglés: "Ethereum Improvement Proposals". Se trata de un documento de diseño que proporciona información a la comunidad Ethereum, que describe la propuesta de una nueva característica, proceso o entorno. Para obtener más información, consúltese https://github.com/ethereum/EIPs (consúltese también "ERC").

ENS::
((("ENS (Ethereum Name Service)")))Servicio de Nombres de Ethereum (o del inglés "Ethereum Name Service"). Para mayor información véase https://github.com/ethereum/ens/.

Entropía
((("entropía","definición")))En el contexto de la criptografía, la entropía involucra falta de predictibilidad o el nivel de aleatoriedad. Al generar información secreta, como llaves privadas, los algoritmos generalmente se basan en una fuente de alta entropía para garantizar que la salida sea impredecible.

EOA::
((("EOA (Externally Owned Account)","definición")))Son las cuentas manejadas externamente (del inglés "externally owned accounts"). Son cuentas creadas por o para usuarios humanos de la red Ethereum.

ERC::
(((("ERC (Ethereum Request for Comments)", seealso="EIPs (Ethereum Improvement Proposals)")))Solicitudes de Comentarios en Ethereum (o del inglés "Ethereum Request for Comments"). Se trata de una etiqueta otorgada a algunas EIPs que intentan definir un estándar específico de uso en Ethereum.

Ethash::
((("Ethash")))Es un algoritmo de prueba de trabajo para Ethereum 1.0. Para mayor información, consúltese https://github.com/ethereum/wiki/wiki/Ethash.

Éter::
((("Éter (criptomoneda)")))Es la criptomoneda nativa utilizada por el ecosistema Ethereum, que cubre los costos de gas al ejecutar contratos inteligentes. Su símbolo es Ξ, el carácter griego Xi en mayúscula.

Evento::
((("eventos","definición")))Permiten el uso de funciones de registro en la EVM. Las DApps pueden escuchar eventos y usarlos para activar devoluciones de llamadas de JavaScript en la interfaz de usuario. Para obtener más información, consúltese http://solidity.readthedocs.io/en/develop/contracts.html#events.

EVM::
((("EVM (Máquina Virtual de Ethereum)","definición")))Es la "Máquina Virtual de Ethereum" (o del inglés "Ethereum Virtual Machine"). Se trata de una máquina virtual basada en la pila que ejecuta códigos binarios. En Ethereum, el modelo de ejecución de esta máquina, especifica cómo se altera el estado del sistema dados una serie de instrucciones de código binario y una pequeña tupla o secuencia de datos de entorno. Esto se especifica mediante un modelo formal de una máquina de estado virtual.

Lenguaje de ensamblaje de la EVM::
((("lenguaje de ensamblaje de la EVM")))Una forma legible por humanos del código binario usado por la EVM.

Función fallback::
((("función fallback")))Es una función predeterminada, que es llamada en ausencia de datos o en ausencia de un nombre de función reconocido.

Grifo::
((("Grifo, definición")))Es un servicio que distribuye fondos en forma de éter de prueba gratuitos que se puede utilizar en cualquier red de prueba.

Finney::
((("finney")))Una de las denominaciones de éter. 1 finney = 10^15^ wei, 10^3^ finney = 1 éter.

Bifurcación::
((("bifurcaciones")))Se trata de un cambio en el protocolo que provoca la creación de una cadena de bloques alternativa, o una divergencia temporal en dos posibles rutas de bloques durante la minería.


Frontier::
((("Frontier")))La etapa de desarrollo de prueba inicial de Ethereum, que duró desde julio de 2015 hasta marzo de 2016.

Ganache::
((("Ganache","definición")))Es una cadena de bloques Ethereum privada que puede usarse para ejecutar pruebas, ejecutar comandos e inspeccionar el estado mientras se controla cómo funciona la cadena.

Gas::
((("gas","definición")))Es la forma del combustible virtual utilizado en Ethereum para ejecutar contratos inteligentes. La EVM utiliza un mecanismo de contabilidad para medir el consumo de gas y limitar el consumo de recursos informáticos (véase "Completitud de Turing").

Límite de gas::
((("límite de gas")))Es la cantidad máxima de gas que puede consumir una transacción o un bloque.

Gavin Wood:
((("Wood, Dr. Gavin")))Es un programador británico que es co-fundador y ex-director de tecnología de Ethereum. En agosto de 2014 propuso Solidity, un lenguaje de programación orientado a contratos para escribir contratos inteligentes.

Bloque Génesis::
((("bloque génesis")))Es el primer bloque en una cadena de bloques, y se utiliza para inicializar esa red en particular y su criptomoneda.

Geth::
((("Geth (Go-Ethereum)","definición")))Go Ethereum. Una de las implementaciones más destacadas del protocolo Ethereum, escrita en lenguaje Go.

Bifurcación fuerte::
((("bifurcaciones fuertes")))Es una divergencia permanente en la cadena de bloques; también conocida como un cambio difícil de bifurcar. Suelen ocurrir cuando los nodos no actualizados no pueden validar los bloques creados por los nodos actualizados que siguen las reglas de consenso más nuevas. No debe confundirse con una bifurcación (a secas), bifurcación suave, bifurcación de software o bifurcación en Git.

Hash::
((("hash, definición")))Una data que sirve de huella digital, que posee longitud fija y cuya entrada puede ser de tamaño variable; producida por una función hash.

Cartera HD::
((("carteras jerárquico deterministas (BIP-32/BIP-44)","definición")))Es una cartera que utiliza el protocolo de creación y transferencia de llaves jerárquico deterministas (del inglés "Hierarchical Deterministic" o HD) (BIP-32).

Semilla de cartera HD::
((("semilla de cartera HD")))((("semillas", seealso="semillas originarias")))Es un valor utilizado para generar la llave privada maestra y el código de cadena maestra para una cartera HD. La semilla de la cartera se puede representar mediante palabras mnemónicas, lo que facilita a los humanos copiar, realizar copias de seguridad y restaurar sus llaves privadas.

Homestead::
((("Homestead")))La segunda etapa de desarrollo de Ethereum, lanzada en marzo de 2016 en el bloque #1.150.000.

ICAP::
((("ICAP (Inter-exchange Client Address Protocol)")))((("Inter-exchange Client Address Protocol (ICAP)")))Es el "Protocolo de Direcciones del Cliente de Inter-Exchange". Se trata de una codificación de direcciones de Ethereum que es parcialmente compatible con la codificación de números de cuentas bancarias internacionales (sel inglés IBAN), que ofrece una codificación versátil, con suma de verificación e interoperabilidad para las direcciones de Ethereum. Las direcciones ICAP usan un nuevo código de un "pseudo-país", IBAN: XE, que significa "eXtended Ethereum", como se usa en monedas no jurisdiccionales (por ejemplo, XBT, XRP, XCP).

Ice Age::
((("Ice Age")))Fue una bifurcación fuerte de Ethereum en el bloque #200.000 para introducir un aumento exponencial de la dificultad (también conocido como "Bomba de Dificultad"), lo que motivaría a una transición al esquema de prueba-de-participación.

IDE::
((("IDE (Integrated Development Environment)")))((("Integrated Development Environment (IDE)")))Entorno de desarrollo integrado (del inglés "Integrated Development Environment"). Una interfaz de usuario que normalmente combina un editor de código, un compilador, un ejecutador de programas y un depurador.

Problema del código inmutable al desplegarse::
((("problema del código inmutable al desplegarse")))Una vez que se despliega el código de un contrato (o biblioteca), éste se vuelve inmutable. Las prácticas de desarrollo de software estándar se basan en poder corregir posibles errores y agregar nuevas funciones, por lo que esto representa un desafío para el desarrollo de contratos inteligentes.

Transacción interna (o también "mensaje")::
((("transacción interna (mensaje)")))Es una transacción enviada desde una cuenta de contrato a otra cuenta de contrato o a una EOA.

IPFS::
((("IPFS (InterPlanetary File System)")))InterPlanetary File System (Sistema de Archivos "Inter-Planetarios"). Se trata a su vez de un protocolo, de una red y un proyecto en código abierto, diseñado para crear un método de entre pares iguales, para almacenar y compartir "hipermedia" con contenido direccionable, en un sistema de archivos distribuido.

KDF::
((("función de derivación de llaves (KDF)")))Función de derivación de llaves (o del inglés "Key Derivation Function"). También conocida como "algoritmo de extensión de contraseña", es utilizada por los formatos de almacén de llaves como protección contra ataques de fuerza bruta, de diccionario y ataques de tablas de arco iris en el cifrado de frases de contraseña, mediante el hash repetido de la frase de contraseña.

Keccak-256::
((("función hash Keccak-256")))Función hash criptográfica utilizada en Ethereum. Keccak-256 se estandarizó como SHA-3.

Archivo de resguardo de llave::
((("archivo de resguardo de llave")))Es un archivo codificado en formato JSON que contiene una única llave privada (generada aleatoriamente), y cifrada con una frase de contraseña para mayor seguridad.

LevelDB::
((("LevelDB")))Sistema de almacenamiento en disco, implementado como una biblioteca de código abierto liviana de único propósito, basada en pares de claves&#x2013;valor, con enlaces a muchas plataformas.

Biblioteca::
((("contrato tipo biblioteca")))Es un tipo especial de contrato inteligente que no tiene funciones pagaderas, ni función "fallback", ni almacenamiento de datos. Por lo tanto, no puede recibir ni retener éter ni almacenar datos. Una biblioteca sirve como código implementado previamente que otros contratos pueden invocar para cálculos de solo lectura.

Cliente ligero::
((("cliente light/ligero")))Un cliente de Ethereum que no almacena una copia local de la cadena de bloques ni valida bloques y transacciones. Ofrece las funciones de una cartera y puede crear y transmitir transacciones.

Árbol de Merkle Patricia::
((("Árbol de Merkle Patricia")))Es una estructura de datos utilizada en Ethereum para almacenar de manera eficiente pares clave&#x2013;valor.

Mensaje:
((("mensaje, definición")))Es una transacción interna que nunca se serializa y solo se envía dentro de la EVM.

Mensaje de invocación::
((("mensaje de invocación")))Es el acto de pasar un mensaje de una cuenta hacia otra. Si la cuenta de destino está asociada con algún contenido de código de la EVM, entonces la Máquina Virtual se iniciará con el estado de ese objeto y se ejecutarán acciones sobre el
mensaje.

METoken::
((("METoken (Mastering Ethereum Token)","definición")))Es el Token de Mastering Ethereum. Es un token ERC20 utilizado para las demostraciones de este libro.

Metropolis::
((("Metropolis")))Es la tercera etapa de desarrollo de Ethereum, lanzada en octubre de 2017.


Minero:
((("mineros")))Es un nodo de la red que se dedica a encontrar una prueba válida de trabajo para nuevos bloques, mediante el cálculo repetido de valores pass:[<span class="keep-together">hash</span>].

Mist::
((("Mist (cartera basada en navegador)")))((("carteras","Mist")))Es el primer navegador habilitado para Ethereum, construido por la Fundación Ethereum. Contiene una cartera basada en navegador que fue la primera implementación del estándar del token ERC20 (Fabian Vogelsteller, autor de ERC20, también fue el principal desarrollador de Mist). Mist también fue la primera cartera en introducir la suma de comprobación camelCase (EIP-55; véase <<EIP55>>). Mist ejecuta un nodo completo y ofrece un navegador DApp completo con soporte para almacenamiento basado en Swarm y direcciones ENS.

Red::
((("redes (Ethereum)","definición")))((("redes (Ethereum)","MetaMask y")))Se refiere a la red de Ethereum, una red "peer-to-peer" o de pares iguales que propaga transacciones y bloques a cada nodo de Ethereum (participantes de la red).

NFT::
((("tokens no indistinguibles (NFTs)","definición")))Del inglés "Non-Fungible Token" es decir, un token no indistinguible (también conocido como "escritura"). Este es un estándar para tokens introducido por la propuesta ERC721. Los NFT se pueden rastrear y comercializar, pero cada token es único y distinto; no son intercambiables como los son los tokens ERC20. Los NFT pueden representar la propiedad de activos digitales o físicos.

Nodo:
((("nodo","definición")))Es un cliente de software que participa en la red (de Ethereum).

Nonce::
((("nonces","definición")))En criptografía, se trata de un valor que solo se puede usar una sola vez. Hay dos tipos de nonce utilizados en Ethereum: un nonce de cuenta, que es un contador de transacciones para cada cuenta, que se utiliza para evitar ataques de repetición; y un nonce de prueba de trabajo que es el valor aleatorio que en un bloque se utiliza para satisfacer la prueba de trabajo.

Ommer::
((("ommer, definición")))Se trata de un bloque "hijo" de algún bloque ancestro que no es en sí mismo ancestro de otro bloque. Cuando un minero encuentra un bloque válido, otro minero puede haber publicado un bloque competidor que se agrega a la cima de la cadena de bloques. A diferencia de Bitcoin, los bloques huérfanos en Ethereum pueden incluirse en bloques más nuevos como ommers y recibir una recompensa de bloque parcial. El término "ommer" es el término de género neutro preferido para el hermano, o el descendiente de un bloque del mismo padre, pero a veces también se lo denomina bloque "tío".

Parity::
((("Parity","definición")))Es una de las implementaciones interoperables más destacadas del software de cliente de Ethereum.

Llave privada::
Véase &#x201c;llave secreta.&#x201d;

Prueba de participación (del inglés "Proof of Stake" o PoS)::
((("proof of stake (PoS)","definición")))Se trata de un método mediante el cual un protocolo de cadena de bloques de criptomonedas tiene como objetivo lograr un consenso distribuido. PoS pide a los usuarios que demuestren la titularidad de una cierta cantidad de criptomonedas (su "participación" en la red) para poder participar en la validación de transacciones.

Prueba de trabajo (del inglés "Proof of Work" o PoW):
((("proof of work (PoW)","definición")))Es un dato (la prueba) que requiere un cálculo significativo para poder encontrarlo. En Ethereum, los mineros deben encontrar una solución numérica para el algoritmo Ethash que cumpla con un objetivo de dificultad en toda la red.

Llave pública::
((("llaves públicas","definición")))Es un número, derivado a través de una función unidireccional a partir de una llave privada, que puede ser compartida públicamente y utilizada por cualquiera para verificar una firma digital realizada con la llave privada correspondiente.

Recibo::
((("recibo, definición")))Es la data devuelta por un cliente de Ethereum para representar el resultado de una transacción en particular, incluyendo un hash de la transacción, su número de bloque, la cantidad de gas utilizado y, en caso de implementación de un contrato inteligente, la dirección del contrato.

Ataque de Re-Ingreso::
((("ataques de reingreso","definición")))Es un tipo de ataque que consiste en que el contrato de un atacante invoca a una función del contrato-víctima de tal manera que durante la ejecución, la víctima vuelve a invocar al contrato del atacante, de manera recursiva. Esto puede resultar, por ejemplo, en el robo de fondos al pasar por alto actualizaciones del contrato-víctima que permiten que los saldos se contabilicen y/o se limiten los montos a ser retirados.

Recompensa::
((("recompensa, definición")))Es una cantidad de éter incluida en cada nuevo bloque como incentivo de la red al minero que encontró la solución de prueba de trabajo.

RLP::
((("Recursive Length Prefix (RLP)")))((("RLP (Recursive Length Prefix)")))Prefijo de longitud recursiva, (del inglés "Recursive Length Prefix" o RLP). Es un estándar de codificación diseñado por los desarrolladores de Ethereum para codificar y serializar objetos (estructuras de datos) de complejidad y longitud arbitrarias.

Satoshi Nakamoto:
((("Satoshi Nakamoto")))Es el nombre utilizado por la persona o personas que diseñaron Bitcoin, crearon su implementación de referencia original y fueron los primeros en resolver el problema del doble gasto de la moneda digital. Su verdadera identidad permanece desconocida.

Llave secreta (alias llave privada)::
((("llaves privadas","definición")))((("llaves secretas", seealso="llaves privadas")))Es el número secreto que le permite a los usuarios de Ethereum demostrar la titularidad de una cuenta o de contratos, mediante la generación de una firma digital (véase &#x201c;llave pública,&#x201d; &#x201c;dirección,&#x201d; &#x201c;ECDSA&#x201d;).

Serenity::
((("Serenity")))Es la cuarta y última etapa de desarrollo de Ethereum. Serenity aún no tiene una fecha de lanzamiento prevista.

Serpent::
((("Serpent")))Es un lenguaje de programación procedimental (imperativo) para contratos inteligentes, con una sintaxis similar a Python.

SHA::
((("SHA (Secure Hash Algorithm)")))Algoritmo hash seguro (del inglés "Secure Hash Algorithm" o SHA). Es una familia de funciones hash criptográficas publicadas por el Instituto Nacional de Estándares y Tecnología (NIST).

Singleton::
((("singleton")))Término de programación informática que describe un objeto del que sólo puede existir una instancia.

Contrato inteligente::
((("contratos inteligentes","definición")))Es un programa que se ejecuta en la infraestructura informática de Ethereum.

Solidity::
((("Solidity","definición")))Es un lenguaje de programación procedimental (imperativo) con una sintaxis similar a JavaScript, C++ o Java. Es el lenguaje más popular y utilizado para los contratos inteligentes de Ethereum. Fue creado por el Dr. Gavin Wood (coautor de este libro).

Ensamblador en línea de Solidity::
((("ensamblador en línea","defined")))((("ensamblador en línea de Solidity")))Lenguaje ensamblador de la EVM incrustado en un programa de Solidity. El soporte de Solidity para el ensamblaje en línea facilita la escritura de ciertas operaciones.

Spurious Dragon::
((("Spurious Dragon")))Es una bifurcación fuerte de la cadena de bloques de Ethereum, que se produjo en el bloque # 2.675.000 para hacer frente a un mayor espectro de vectores de ataque de denegación de servicio y para lograr el despeje del árbol de estados (véase también "Tangerine Whistle"). Además, un mecanismo de protección contra ataques de repetición.

Swarm::
((("Swarm","definición")))Es una red de almacenamiento descentralizada (entre pares iguales o P2P), que se utiliza junto con Web3 y Whisper para crear DApps.

Szabo::
((("szabo, definición")))Es una denominación del éter. 1 szabo = 10^12^ wei, 10^6^ szabo = 1 éter.

Tangerine Whistle::
((("Tangerine Whistle")))Es una bifurcación fuerte de la cadena de bloques de Ethereum, que se produjo en el bloque #2.463.000 para cambiar el cálculo de gas para ciertas operaciones intensivas en el intercambio de datos y para despejar el estado acumulado de los ataques de denegación de servicio, que aprovechó el bajo costo del gas de esas operaciones.

Testnet::
((("testnet","definición")))Del inglés "red de pruebas", es una red que se utiliza para simular el comportamiento de la red principal de Ethereum.

Transacción:
((("transacciones","definición")))Son datos encomendados a la cadena de bloques de Ethereum, firmados por una cuenta de origen y dirigidos hacia una dirección específica. La transacción contiene metadatos como el límite de gas para esa transacción.

Truffle::
((("Truffle","definición")))Uno de los entornos de desarrollo de Ethereum más utilizados.

Completitud de Turing::
((("completitud de Turing","definición")))Un concepto que lleva el nombre del matemático y científico informático inglés Alan Turing: se dice que un sistema de reglas para la manipulación de datos (como el conjunto de instrucciones de una computadora, un lenguaje de programación o un autómata celular) es "Turing completo" o "computacionalmente universal" si se puede utilizar para simular cualquier máquina de Turing.

Vitalik Buterin:
((("Buterin, Vitalik")))Es un programador y escritor ruso-canadiense conocido principalmente como co-fundador de Ethereum y de _Bitcoin Magazine_.

Vyper::
((("Vyper","definición")))Un lenguaje de programación de alto nivel, similar a Serpent, con sintaxis similar a Python. Pretende acercarse a un lenguaje puramente funcional. Creado por Vitalik Buterin.

Cartera::
((("carteras","definición")))Es aquel software que alberga llaves secretas. Se utiliza para acceder y controlar cuentas de Ethereum e interactuar con contratos inteligentes. No es necesario guardar las llaves en una billetera, en su lugar se pueden recuperar de algún almacenamiento fuera de línea (por ejemplo, una tarjeta de memoria o papel) para mejorar la seguridad. A pesar de su nombre, las carteras nunca almacenan las monedas o tokens reales.

Web3::
((("web3", seealso="DApps")))La tercera versión de la web. Propuesto por primera vez por el Dr. Gavin Wood, Web3 representa una nueva visión y enfoque para las aplicaciones web: desde aplicaciones administradas y de propiedad centralizada, hasta aplicaciones creadas sobre protocolos descentralizados.

Wei::
((("wei, definición")))La denominación más pequeña del éter. 10^18^ wei = 1 éter.

Whisper::
((("Whisper")))es un servicio de mensajería descentralizado (o entre pares iguales o P2P). Se utiliza junto con Web3 y Swarm para crear DApps.

Dirección cero::
((("dirección cero","definición")))Es una dirección de Ethereum especial, compuesta enteramente por ceros, que se especifica como la dirección de destino de las transacciones que crean a los contratos.