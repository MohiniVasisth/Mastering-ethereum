[[intro_chapter]]
== Asas-asas Ethereum

((("Ethereum (generally)","basics", id="ix_02intro-asciidoc0", range="startofrange")))Dalam bab ini kita akan mula meneroka Ethereum, mempelajari cara menggunakan dompet, cara membuat transaksi, dan juga asas bagaimana untuk menjalankan kontrak pintar.

[[ether_units]]
=== Unit Matawang Ether

((("currency units")))((("Ethereum (generally)","currency units")))Matawang Ethereum juga dipanggil _ether_, atau juga dikenali sebagai "ETH" atau simbol &#926; (dari huruf Yunani "Xi" yang kelihatan seperti huruf besar E) atau, selalunya,, &#9830;: sebagai copntoh, 1 ether, atau 1 ETH, atau &#926;1, atau &#9830;1.

[PETUA]
==== 
Gunakan huruf Unicode +U+039E+ untuk &#926; dan +U+2666+ untuk &#9830;.
==== 

Ether dibahagikan kepada unit yang lebih kecil, sehingga unit terkecil yang mungkin, yang dinamakan _wei_. Satu ether adalah 1 quintillion wei (1 * 10^18^ or 1,000,000,000,000,000,000). Anda mungkin mendengar orang berkata, mata wang "Ethereum", tetapi ini adalah kesilapan yang biasa. Ethereum adalah sistem, ether adalah mata wang.

Nilai ether sentiasa diwakili secara dalaman dalam Ethereum sebagai nilai integer yang tidak ditandatangani dalam kelas ukuran wei. Apabila anda melakukan transaksi 1 ether, urus niaga tersebut menyandarkan 1000000000000000000 wei sebagai nilai.

Kepelbagaian jenis Ether kedua-dua mempunyai _nama-nama saintifik_ menggunakan unit Sistem Antarabangsa (_SI_) dan gelaran lain yang memberi penghormatan kepada banyak pemikir besar pengkomputeran dan kriptografi.

<<ether_denominations>> menunjukkan kepelbagaian unit, nama biasa (bahasa pasar), dan nama SI-nya. Selaras dengan perwakilan nilai dalaman, jadual menunjukkan semua kelas ukuran dalam wei (baris pertama), dengan ether ditunjukkan sebagai 10^18^ wei pada baris ke-7.

[[ether_denominations]]
.Jenis Ether dan nama unitnya
[options="header"]
|===
| Nilai (dalam wei) | Eksponen | Nama biasa | Nama SI
| 1 | 1 | wei | Wei
| 1,000 | 10^3^ | Babbage | Kilowei atau femtoether
| 1,000,000 | 10^6^ | Lovelace | Megawei atau picoether
| 1,000,000,000 | 10^9^ | Shannon | Gigawei atau nanoether
| 1,000,000,000,000 | 10^12^ | Szabo | Mikroether atau mikro
| 1,000,000,000,000,000 | 10^15^ | Finney | Milliether atau milli
| _1,000,000,000,000,000,000_ | _10^18^_ | _Ether_ | _Ether_
| 1,000,000,000,000,000,000,000 | 10^21^ | Grand | Kiloether
| 1,000,000,000,000,000,000,000,000 | 10^24^ | | Megaether
|===

[[choosing_eth_wallet]]
=== Memilih Dompet Ethereum

((("Ethereum (generally)","wallet choices")))((("wallets","choosing")))((("wallets","defined")))Istilah "dompet" memberi terlalu banyak erti, walaupun semuanya berkaitan dan asasnya pada setiap hari ianya masih pada permasalahan yang sama. Kami akan menggunakan istilah "dompet" yang bermaksud aplikasi perisian yang membantu anda menguruskan akaun Ethereum anda. Pendek kata, dompet Ethereum adalah pintu masuk anda ke sistem Ethereum. Ia memegang kunci anda dan boleh membuat dan menyiarkan transaksi bagi pihak anda. Memilih dompet Ethereum mungkin sukar kerana terdapat banyak pilihan yang berlainan dengan ciri dan reka bentuk yang berbeza. Ada yang lebih sesuai untuk pemula dan ada yang lebih sesuai untuk pakar. Platform Ethereum itu sendiri sedang ditingkatkan, dan dompet "terbaik" seringkali adalah yang mampu menyesuaikan diri dengan perubahan yang datang dengan naik taraf platform.

Tetapi jangan risau! Jika anda memilih dompet dan tidak suka bagaimana ia berfungsi&#x2014;atau jika anda suka pada mulanya tetapi kemudian mahu mencuba yang lain pula#x2014;anda boleh menukar dompet kripto pada bila-bila masa sahaja. Apa yang perlu anda lakukan adalah membuat transaksi dengan menghantar dana anda dari dompet lama ke dompet baharu, atau mengeksport kunci peribadi anda dan mengimportnya ke dompet yang baharu.

Kami telah memilih tiga jenis dompet yang berbeza untuk digunakan melalui buku ini sebagai contoh: dompet mudah alih, dompet komputer meja, dan dompet berasaskan laman sesawang. Kami telah memilih tiga dompet ini kerana ia kepelbagaian unsur dan ciri-ciri yang luas. Walaubagaimanapun, pemilihan dompet ini bukan bermaksud mengesahan kualiti atau keselamatan platform itu. Ianya permulaan yang baik untuk menguji dan mencuba.

((("private keys","wallets and")))Diingatkan bahawa untuk aplikasi dompet dapat berfungsi, ia mesti mempunyai akses kepada kekunci peribadi anda, jadi amatlah penting anda hanya perlu memuat turun dan menggunakan aplikasi dompet dari sumber yang anda dipercayai sahaja. Mujurlah, secara amnya, aplikasi dompet kripto yang masyhur sering dipercayai. Walau bagaimanapun, amalan yang terbaik ialah dengan mengelakkan "meletakkan semua telur anda dalam satu bakul" dan mempunyai banyak akaun Ethereum di beberapa dompet kripto.

Berikut adalah dompet kripto yang sesuai untuk bermula:

MetaMask:: ((("MetaMask")))MetaMask ialah dompet jenis pelayar laman sesawang (Chrome, Firefox, Opera, Brave). Ia mudah digunakan dan boleh diuji, kerana ia mampu menghubungkan dengan berbagai nod Ethereum dan menguji rantai blok. Metamask adalah dompet kripto berasaskan laman sesawang.

Jaxx:: ((("Jaxx")))((("wallets","Jaxx")))Jaxx menawarkan dompet kripto kepelbagaian platform dan matawang yang mampu dijalankan dipelbagai jenis sistem operasi termasuklah Android, Windows, macOS dan Linux. Ia kerap dijadikan pilihan utama pengguna baharu kerana lebih mudah digunakan dan mesra pengguna. Jaxx boleh dipasang sama ada di telefon mudah alih mahupun komputer. 

MyEtherWallet (MEW):: ((("Ethereum Classic (ETC)","Emerald Wallet and")))((("MyEtherWallet (MEW)")))((("wallets","Emerald Wallet")))((("wallets","MyEtherWallet")))MyEtherWallet berasaskan laman sesawang yang beroperasi di mana-mana pelayar. Ia mempunyai daya tarikan tersendiri yang kita akan pelajari nanti. MyEtherWallet adalah dpet kripto berasaskan pelayar laman sesawang.

Emerald Wallet:: ((("Emerald Wallet")))Dompet Emerald direkabentuk untuk rantai blok Ethereum Classic, tetapi ia juga serasi dengan semua rantai blok Ethereum. Ia merupakan aplikasi komputer sumber terbuka dan beroperasi dengan Windows, macOS dan Linux. Dompet Emerald boleh menjalankan nod penuh atau bersambungan dengan nod kawalan orang ramai, iaitu sebagai nod ringan. Ia juga mengandungi alat untuk melakukan operasi baris perintah.

Kita akan mulakan pelajaran memasang Metamask ke dalam komputer meja/riba&#x2014;tetapi sebelum itu, kita akan bincangkan serba sedikit menguruskan kunci dan mengawalnya.

[[control_responsibility]]
=== Kemampuan Menjaga dan Menanggung

((("Ethereum (generally)","control and responsibility", id="ix_02intro-asciidoc1", range="startofrange")))Rantai blok seperti Ethereum adalah penting kerana ia beroperasi sebagai sistem _bukan terpusat_. Ianya banyak maksud, tetapi satu aspek penting ialah setiap pengguna Ethereum dapat&#x2014;dan harus&#x2014;menjaga kunci peribadi mereka sendiri, kerana ianya merupakan alat yang mengawal akses kepada dana dan kontrak pintar. Gabungan akses kepada dana dan kontrak pintar juga dinamakan sebagai "akaun" atau "dompet." Istilah ini boleh menjadi sangat rumit dalam fungsinya, jadi kita akan menerjah lagi ini dengan lebih terperinci kemudian. Sebagai asas ilmu kewangan, bagaimanapun, ia lebih mudah hanya memiliki satu kunci perribadi bagi satu "akaun". Sesetengah pengguna memilih untuk mengabaikan kunci peribadi mereka dengan mewalikan kepada pihak ketiga, contohnya bagi pengurup di dalam talian. Dalam buku ini, kami akan mengajar anda bagaimana untuk menjaga dan menguruskan kunci peribadi anda sendiri.

Dengan penjagaan maka datanglah tanggungjawab yang besar. Jika anda kehilangan kunci peribadi anda, anda juga turut kehilangan akses kepada dana dan kontrak anda. Tiada sesiapa yang boleh membantu anda mendapatkan semula akses&#x2014;manakala dana anda akan dikunci selama-lamanya. Berikut adalah beberapa tip untuk membantu anda menguruskan tanggungjawab ini:

* Jangan buat penambahbaikan keselamatan. Gunakan standard pendekatan dicuba dan diuji.

* Lebih penting lagi akaun (misalnya, Semakin tinggi nilai dana yang dikendalikan, atau semakin ketara kontrak pintar dapat diakses), maka langkah keselamatan yang lebih tinggi harus diambil.

* Keselamatan tertinggi adalah daripada peranti yang bebas dari sambungan internet, tetapi tahap ini tidak diperlukan bagi setiap akaun.

* Jangan simpan kunci peribadi anda dalam bentuk kebiasaan, terutamanya secara dalam bentuk digital. Mujurlah, kebanyakan antara muka pengguna hari ini tidak mempamerkan kunci peribadi asli.

* ((("private keys","wallets and")))Kunci peribadi boleh disimpan dalam bentuk yang data sulit, sebagai fail "kunci stor" digital. Dengan dienkrip, mereka memerlukan kata laluan untuk membuka kunci. Apabila anda diminta untuk memilih kata laluan, ciptalah kata laluan yang kuat (iaitu, panjang dan rawak), kemudian buat sandaran, serta jangan berkongsi maklumat itu. Jika anda tidak mempunyai pengurus kata laluan, tuliskannya dan simpankannya di tempat yang selamat dan rahsia. Untuk mengakses akaun, anda memerlukan kedua-duanya iaitu kunci stor dan kata laluan.

* Jangan simpan mana-mana kata laluan dalam dokumen digital, gambar digital, cetak skrin, pemacu dalam talian, PDF yang disulitkan, dan sebagainya. Sekali lagi, jangan buat penambahbaikan keselamatan. Gunakan pengurus kata laluan atau pen dan kertas.

* Apabila anda diminta untuk membuat sandaran kunci sebagai urutan kata mnemonik, gunakan pen dan kertas untuk membuat sandaran fizikal. Jangan tangguhkan "kemudian hari"; kerana anda akan terlupa. Sandaran mnemonik ini boleh digunakan untuk menjana semula kunci peribadi anda sekiranya anda kehilangan semua data yang disimpan pada peranti anda, atau jika anda lupa atau kehilangan kata laluan anda. Walau bagaimanapun, ianya juga boleh digunakan oleh penggodam untuk mendapatkan kekunci peribadi itu, jadi jangan simpankannya secara digital, dan simpanlah salinan fizikal yang telah ditulis itu dengan selamat di dalam laci yang terkunci atau peti keselamatan.

* Sebelum memindahkan sejumlah besar (terutama ke alamat  kripto baharu), mulakan terlebih dahulu dengan melakukan transaksi ujian kecil (misalnya, pemindahan kurang dari nilai RM 1.00) dan tunggu pengesahan penerimaan.

* Apabila anda mencipta akaun baharu, mulakan dengan menghantar satu transaksi kecil ke alamat baharu. Sebaik sahaja ujian transaksi selesai, cuba hantar semula dari akaun itu. Terdapat banyak kes penciptaan akaun menjadio ralat, dan jika kita mengetahui keralatan itu dari awal, kita hanya mengalami kerugian kecil sahaja. Sekiranya ujian dijalankan itu mendapati semuanya berjalan lancar, bermakna tetapan akaun telah sempurna.

* Penjelajah blok umum adalah cara mudah untuk melihat sama ada transaksi telah diterima oleh rangkaian. Walau bagaimanapun, kemudahan ini memberi kesan negatif terhadap kerahsiaan anda, kerana anda mendedahkan alamat anda kepada blok penjelajah, yang dapat menjejaki transaksi itu.

* Jangan cuba kirm wang kripto wang ke mana-mana alamat yang ditunjukkan di dalam buku ini. Kunci peribadi disenaraikan di dalam buku ini adalah contoh sahaja dan jika anda lakukan juga, seseorang yang tidak dikenali akan mengambil wang itu.

Sekarang kita telah sama-sama melengkapkan beberapa asas amalan terbaik bagi pengurusan kunci dan keselamatan utama, sekarang, mari kita belajar menggunakan MetaMask!(((range="endofrange", startref="ix_02intro-asciidoc1")))

[[installing_MetaMask]]
=== Bermula Dengan MetaMask

((("Ethereum (generally)","MetaMask basics", id="ix_02intro-asciidoc2", range="startofrange")))((("MetaMask","basics", id="ix_02intro-asciidoc3", range="startofrange")))Buka pelayar Google Chrome di komputer dan layari https://chrome.google.com/webstore/category/extensions[].

Buat carian "MetaMask" dan ketik pada logo kepala rubah. Anda akan dapati ia akan jadi seperti ini <<metamask_download>>.

[[metamask_download]]
.Butiran halaman sambungan Chrome MetaMask
image::images/metamask_download.png["MetaMask Detail Page"]

Sangat penting untuk mengesahkan bahawa anda sedang memuat turun sambungan MetaMask yang sebenar, kerana kadang-kadang orang dapat menyorok perkakas jahat dan mampu melepasi penapis Google. Metamask yang sebenar:

* Pamerkan ID +nkbihfbeogaeaoehlefnkodbefgpgknn+ dalam palang alamat 
* ditawarkan oleh https://metamask.io
* lebih 1,500 ulasan
* lebih 1,000,000 pengguna memuat turun

Jika anda sudah pasti ianya memang Metamask, ketik "Add to Chrome" dan pasangkan di pelayar Chrome

[[using_MetaMask]]
==== Mencipta Dompet

((("MetaMask","wallet setup with", id="ix_02intro-asciidoc4", range="startofrange")))Setelah MetaMask dipasang, anda akan melihat ikon baru (kepala rubah) di bar alat Google Chrome. Klik untuk memulakannya. Anda akan diminta untuk menerima terma dan syarat dan kemudian mencipta dompet Ethereum anda dengan memasukkan kata laluan(see <<metamask_password>>).

[[metamask_password]]
.Kata laluan halaman MetaMask sambungan Chrome
image::images/metamask_password.png["MetaMask Password Page"]

[PETUA]
==== 
Kata laluan mengawal akses kemasukan MetaMask, supaya ia tidak boleh digunakan oleh sesiapa sahaja yang menggunakan komputer dan pelayar Chrome itu.
==== 

((("mnemonic code words","MetaMask and", id="ix_02intro-asciidoc5", range="startofrange")))Sebaik sahaja anda telah menetapkan kata laluan, MetaMask akan menjana dompet untuk anda dan menunjukkan kepada anda sandaran _mnemonik_ yang terdiri daripada 12 perkataan Bahasa Inggeris  (lihat <<metamask_mnemonic>>). Kata-kata ini boleh digunakan dalam mana-mana dompet kripto yang serasi untuk memperoleh akses kepada dana anda sekiranya sesuatu berlaku kepada MetaMask atau komputer anda. Anda tidak memerlukan kata laluan untuk pemulihan ini; 12 perkataan sudah mencukupi.

[PETUA]
==== 
Buat sandaran mnemonik anda (12 perkataan) di atas kertas, dua kali. Simpan kedua-duanya di dua lokasi yang selamat di tempat yang berasingan, seperti peti keselamatan tahan api, laci terkunci, atau peti deposit keselamatan. Jagalah kertas itu seperti nilai setara dengan apa yang anda simpan di dompet Ethereum anda. Sesiapa yang mempunyai akses kepada kata-kata ini, boleh mendapat akses dan mencuri wang anda.
==== 

[[metamask_mnemonic]]
.Mnemonic adalah kod sandaran yang dihasilkan dari MetaMask
image::images/metamask_mnemonic.png["MetaMask Mnemonic Page"]

Sebaik sahaja anda telah sahkan  bahawa anda telah menyimpan frasa mnemonik dengan selamat, anda akan dapat melihat butiran akaun Ethereum anda, seperti yang ditunjukkan di sini <<metamask_account>>.(((range="endofrange", startref="ix_02intro-asciidoc5")))

[[akaun_metamask]]
.Akaun Ethereum di dalam MetaMask
image::images/metamask_account.png["MetaMask Account Page"]

Halaman akaun anda menunjukkan nama akaun anda ("Akaun 1" secara lalai), alamat Ethereum  (+0x9E713...+ sebagai contoh), dan ikon berwarna-warni untuk membantu anda membezakan secara gambaran akaun ini dari akaun yang lain. Di bahagian atas halaman akaun, anda akan dapat melihat rangkaian Ethereum yang sedang anda kerjakan ("Rangkaian Utama" seperti contoh).

Tahniah! Anda telah siap menetapkan dompet akaun Ethereum.(((range="endofrange", startref="ix_02intro-asciidoc4")))

[[switching_networks]]
==== Mengubah Rangkaian

((("MetaMask","network choices")))Seperti yang dapat anda lihat di halaman akaun MetaMask, anda boleh memilih antara pelbagai rangkaian Ethereum. Secara lalai, MetaMask akan cuba menyambung ke rangkaian utama. Pilihan lain adalah t"estnet" awam, mana-mana nod Ethereum pilihan anda, atau nod yang menggunakan nod rantai blok kosong persendirian pada komputer anda sendiri (localhost):

Main Ethereum Network:: Rantai blok awam utama Ethereum. ETH sebenar, nilai sebenar, dan kesan sebenar.

Ropsten Test Network:: Ujian rantai blok awam Ethereum dan rangkaiannya. ETH pada rangkaian ini tidak mempunyai nilai.

Kovan Test Network:: Rangkaian dan ujian awam rantai blok Ethereum menggunakan protokol kesepakatan Aura dengan bukti kuasa (tandatangan bersekutu). ETH pada rangkaian ini tidak mempunyai nilai. Rangkaian ujian Kovan disokong oleh Parity sahaja. Klien Ethereum lain menggunakan protokol kesepakatan Clique, yang telah dicadangkan kemudian, sebagai bukti kuasa &#x2013;berasaskan pengesahan.

Rinkeby Test Network:: Rangkaian dan ujian awam rantai blok Ethereum menggunakan protokol kesepakatan Clique dengan bukti kuasa (penandatanganan bersekutu). ETH pada rangkaian ini tidak mempunyai nilai.

Localhost 8545:: Menyambung ke nod yang berjalan pada komputer yang sama dengan pelayar Chrome. Nod boleh menjadi sebahagian daripada mana-mana rantai blok awam (mainnet atau testnet), atau testnet persendirian.

Custom RPC:: Membolehkan anda menyambungkan MetaMask ke mana-mana nod dengan antara muka Panggilan Peranti Jauh (RPC) yang serasi dengan Geth. Nod boleh menjadi sebahagian daripada mana-mana rantai blok awam atau persendirian.

[NOTA]
==== 
Dompet MetaMask anda menggunakan kekunci peribadi yang sama dan alamat Ethereum pada semua rangkaian yang dihubunginya. Walau bagaimanapun, keseimbangan alamat Ethereum anda pada setiap rangkaian Ethereum akan berbeza. Sebagai contoh, kunci anda boleh mengawal ether dan kontrak pada Ropsten, tetapi bukan pada rangkaian utama.
==== 

[[getting_test_eth]]
==== Menguji Ether

((("ether (generally)","testnet")))((("MetaMask","and testnet ether")))((("test ether","obtaining")))((("testnet","ether for")))((("wallets","testnet ether and")))Tugas pertama anda adalah untuk mendapatkan mwngiai dompet anda. Anda tidak akan melakukannya di rangkaian utama kerana ianya melibatkan kos sebenar serta anda memerlukan sedikit pengalaman sebelum berurusan dengan wang sebenar. Buat masa ini, anda akan mengisi dompet anda dengan "testnet" ether.

((("Ropsten Test Network")))Ubah tetapan MetaMask kepada _Ropsten Test Network_. Ketik pada Deposit, dan pilih Ropsten Test Faucet. MetaMask akan membuka pelayar baharu, sebagaimana di sini <<metamask_ropsten_faucet>>.

[[metamask_ropsten_faucet]]
.MetaMask Ropsten Ujian Faucet
image::images/metamask_ropsten_faucet.png["MetaMask Ropsten Test Faucet"]

Anda mungkin dapat melihat bahawa laman sesawang sudah mengandungi alamat Ethereum di dalam dompet MetaMask anda. MetaMask menyepadukan laman sesawang membolehkan Ethereum  dengan dompet MetaMask anda dan anda dapat "melihat" alamat Ethereum pada laman sesawang, yang membolehkan anda, menghantar bayaran ke kedai di dalam talian yang turut memaparkan alamat Ethereum. MetaMask juga boleh mengisi laman sesawang dengan alamat dompet anda sendiri sebagai alamat penerima jika laman web meminta tandatangan dari anda. Di halaman ini, aplikasi faucet (aplikasi kripto testnet percuma) meminta alamat dompet dari MetaMask untuk menghantar ether penguji tadi.

Ketik butang hijau "permintaan 1 ether dari faucet". Anda akan melihat ID transaksi muncul di bahagian bawah halaman. Aplikasi faucet telah membuat pembayaran&#x2014;transaksi kepada anda. ID transaksi kelihatan seperti ini:

[[faucet_tx_id]]
----
0x7c7ad5aaea6474adccf6f5c5d6abed11b70a350fbc6f9590109e099568090c57
----

Dalam beberapa saat, urusniaga baharu akan dilombong oleh pelombong Ropsten dan dompet MetaMask anda akan menunjukkan baki 1 ETH. Klik pada ID urus niaga dan pelayar Chrome itu akan membawa anda ke _block explorer_, yang merupakan laman sesawang yang membolehkan anda melihat gambaran blok serta meneroka blok, alamat, dan transaksi. MetaMask menggunakan https://etherscan.io/[Etherscan block explorer], sebagai salah satu peneroka blok Ethereum yang mahsyur. Urusniaga yang mengandungi pembayaran dari Ropsten Test Faucet ditunjukkan di sini <<ropsten_block_explorer>>.

[[penjelajah_blok_ropsten]]
.Etherscan penjelajahan blok Ropsten
image::images/ropsten_block_explorer.png["Etherscan Ropsten Block Explorer"]

Transaksi tersebut telah direkodkan di blok Ropsten dan boleh dilihat pada bila-bila masa oleh sesiapa sahaja, hanya dengan mencari ID transaksi, atau http://bit.ly/2Q860Wk[visiting the link].

Cuba lawat pautan tersebut, atau masukkan transaksi cincangan (hash) ke laman sesawang _ropsten.etherscan.io_, untuk melihatnya sendiri.

[[sending_eth_MetaMask]]
==== Menghantar Ether dari Metamask

((("MetaMask","sending ether from", id="ix_02intro-asciidoc6", range="startofrange")))((("test ether","sending", id="ix_02intro-asciidoc7", range="startofrange")))Sebaik sahaja anda telah menerima ujian pertama anda dari Ropsten Test Faucet, anda boleh mencuba dengan menghantar ether kembali ke faucet. Seperti yang dapat anda lihat di halaman "Ropsten Test Faucet," ada pilihan untuk "mendermakan" 1 ETH ke faucet. Pilihan ini tersedia supaya apabila anda selesai menguji, anda boleh mengembalikan wang kripto testnet itu semula, supaya orang lain mendapat giliran menggunakannya. Walaupun ujian ether tidak mempunyai nilai, sesetengah orang tidak memulangkan semula, menjadikannya ianya sukar bagi orang lain untuk menggunakan rangkaian ujian. Meryorokkan ether ujian sangatlah menyedihkan!

Mujurlah, kita tidak menguji penyorok ether. Klik butang jingga "1 ether" untuk memberitahu MetaMask agar membuat urusniaga dengan pembayaran kepada faucet sebanyak 1 ether. MetaMask akan menyediakan transaksi dan muncul tetingkap dengan pengesahan, seperti ditunjukkan dalam <<send_to_faucet>>.


[[send_to_faucet]]
.Mernghantar 1 ether ke faucet
image::images/send_to_faucet.png["Sending 1 ether to the faucet"]

Oops! Anda mungkin tersedar urusniaga kita tidak sempurna&#x2014;MetaMask memaklumkan bahawa baki kita tidak mencukupi. Pada pandangan pertama, ini mungkin kelihatan mengelirukan: anda mempunyai 1 ETH, anda mahu menghantar 1 ETH, jadi mengapa MetaMask mengatakan anda mempunyai dana yang tidak mencukupi?

((("gas","basics")))Jawapannya adalah kerana kos _gas_. Setiap urus niaga Ethereum memerlukan pembayaran yuran yang dikutip oleh pelombong untuk mengesahkan transaksi. Bayaran dalam Ethereum dikenakan dalam mata wang maya yang dipanggil gas. Anda membayar gas dengan ether, sebagai sebahagian daripada urusniaga.

[NOTA]
==== 
((("gas","on test networks")))Bayaran juga diperlukan pada rangkaian ujian. Tanpa bayaran, rangkaian ujian akan bertindak berbeza dari rangkaian utama, menjadikannya platform pengujian yang tidak cukup sifat. Yuran juga melindungi rangkaian ujian daripada serangan DoS dan kontrak yang tidak dibina (contohnya, keluk tak terhingga), sama seperti mereka melindungi rangkaian utama.
==== 

Apabila anda membuat urusniaga, Metamask membuat pengiraan purata harga gas bagi transaksi semasa dengan 3 gwei yang bermaksud 3 gigawei. Wei adalah kiraan terkecil pass:[<span class="keep-together">subdivision</span>] dalam matawang ether sebagaimama yang dibincangkan di  <<ether_units>>. Takat gas ditetapkan pada kos asas transaksi iaitu 21,000 unit gas. Justeru itu, jumlah paling tinggi yang anda akan belanja bagi Ethereum ialah 3 * 21,000 gwei = 63,000 gwei = 0.000063 ETH. (Adalah diingatkan bahawa harga gas boleh turun dan naik kerana ia ditentukan oleh pelombong. Kita akan belajar kelak bagaimana hendak menyelaraskan nilai gas sama ada tinggi atau rendah untuk memastikan urusniaga anda disegerakan jika perlu.)

Semua ini bermaksud: kebiasaanya ketika membuat transaksi mengirim 1 ETH memerlukan baki sekurang-kurangnya 1.000063 ETH. Walaupun MetaMask membundarkan kepada nilai _lebih rendah_ iaitu 1 ETH ketika menunjukkan jumlah keseluruhan, kos sebenarnya adalah 1.000063 ETH tetapi anda cuma memiliki 1 ETH. Tekan "Reject" untuk membatalkan urusniaga

Jom dapatkan lebih banyak lagi ether ujian! Ketik butang hijau "permintaan 1 ether dari faucet" dan tunggu beberapa saat. Jangan risau, kerana faucet mempunyai banyak ether dan akan memberikan jika anda mahukannya..

Sebaik sahaja anda mempunyai baki 2 ETH, anda boleh cuba lagi. Kali ini, apabila anda menekan butang jingga iaitu derma "1 ether", anda mempunyai baki yang mencukupi untuk melakukan transaksi. Ketik "Submit" apabila muncul tetingkap pembayaran Metamask. Selepas itu, anda akan melihat baki 0.999937 ETH kerana anda menghantar 1 ETH kepada faucet tadi bersama dengan kos gas iaitu 0.000063 ETH(((range="endofrange", startref="ix_02intro-asciidoc7")))(((range="endofrange", startref="ix_02intro-asciidoc6")))

[[explore_tx_history]]
==== Menjelajah Riwayat Urusniaga Pada Alamat ETH

((("addresses","exploring transaction history of", id="ix_02intro-asciidoc8", range="startofrange")))((("MetaMask","exploring transaction history of an address with", id="ix_02intro-asciidoc9", range="startofrange")))kini anda telah menjadi arif dalam menggunakan MetaMask untuk menghantar dan menerima duit ether ujian. Dompet anda telah menerima sekurang-kurangnya dua pembayaran dan menghantar sekurang-kurangnya sekali. Anda boleh melihat semua urusniaga ini menggunakan blok pelayar _ropsten.etherscan.io_. Anda boleh menyalin alamat dompet anda dan tampalkannya ke dalam kotak carian penjelajah blok, atau gunakan MetaMask untuk membuka halaman itu. Di sebelah ikon akaun MetaMask, terdapat butang yang menunjukkan tiga titik. Klik padanya untuk menunjukkan menu pilihan berkaitan akaun (see <<metamask_account_context_menu>>).

[[konteks_menu_akaun_metamask]]
.Keadaan menu akaun Metamask
image::images/metamask_account_context_menu.png["MetaMask Account Context Menu"]

Pilih "View account on Etherscan" untuk melihat akaun kita di pelayar Erherscan bagi paparan riwayat urusniaga yang lalu, sebagaimana ditunjukkan di <<block_explorer_account_history>>.

[[riwayat_akaun_penjelajah_blok]]
.Transaksi riwayat alamat ETH dalam Etherscan
image::images/block_explorer_account_history.png["Address Transaction History on Etherscan"]

Di sini anda dapat melihat keseluruhan sejarah transaksi alamat Ethereum anda. Ia menunjukkan semua urusniaga yang direkodkan di rantai blok Ropsten di mana alamat anda sama ada sebagai penghantar atau penerima. Klik pada beberapa transaksi ini untuk melihat butiran lanjut

Anda boleh meneroka sejarah transaksi mana-mana alamat. Lihatlah sejarah transaksi alamat penguji faucet tadi di Ropsten (penunjuk: ia adalah alamat "penghantar" yang disenaraikan dalam pembayaran terdahulu ke alamat ETH anda). Anda dapat melihat semua ether ujian yang dihantar oleh faucet kepada anda dan ke alamat yang lain. Setiap transaksi yang anda tekan dan semak, akan membawa anda ke lebih banyak alamat dan transaksi. Tidak lama kemudian, anda akan sesat dalam liku-liku data yang saling berkaitan. Rangkaian rantai blok awam mengandungi khazanah maklumat yang besar, semuanya boleh diterokai secara program, seperti yang akan kita pelajari akan datang(((range="endofrange", startref="ix_02intro-asciidoc9")))(((range="endofrange", startref="ix_02intro-asciidoc8"))).(((range="endofrange", startref="ix_02intro-asciidoc3")))(((range="endofrange", startref="ix_02intro-asciidoc2")))

[[intro_world_computer]]
=== Memperkenalkan Dunia Komputer

((("Ethereum (generally)","and EVM")))((("EVM (Ethereum Virtual Machine)","as world computer")))((("world computer, Ethereum as")))Anda kini telah mencipta dompet, menghantar dan menerima ether. Setakat ini, kita telah menjadikan Ethereum sebagai matawang kripto. Lebih dari itu. fungsi matawang kripto bergantung kepada fungsi Ethereum sebagai dunia komputer yang bukan terpusat. ((("smart contracts","ether and")))Ether juga digunakan untuk bayar urusan _kontrak pintar_ yang merupakan program komputer yang dijalankan pada teladan komputer yang dipanggil _Mesin Maya Ethereum_ (EVM).

EVM wujud bersendirian secara sejagat, yang bermaksud ia beroperasi seolah-olah ianya komputer contoh tunggal, yang berjalan di mana-mana. Setiap nod pada rangkaian Ethereum mengendalikan salinan setempat EVM untuk mengesahkan pelaksanaan kontrak, manakala rantai blok Ethereum merekodkan perubahan _tingkah laku_ dunia komputer ini kerana ia memproses transaksi dan kontrak pintar. Kita akan membincangkan hal ini dengan lebih terperinci <<evm_chapter>>.

[[EOA_contracts]]
=== Pemilikan Akaun Luaran (EOAs) dan Kontrak.

((("contract accounts", seealso="smart contracts")))((("EOA (Externally Owned Account)","basics")))((("Ethereum (generally)","EOAs and contracts")))((("smart contracts","basics")))Jenis akaun yang anda buat dalam dompet MetaMask dipanggil _akaun pemilikan luaran (EOA). Akaun yang dimiliki secara luaran adalah mereka yang mempunyai kunci peribadi; iaitu mempunyai kunci peribadi bermakna anda yang mengawal akses kepada dana atau kontrak dengan sendiri. Kini, anda mungkin rasa, terdapat satu lagi jenis akaun. Jenis akaun yang lain ialah _akaun kontrak_. Akaun kontrak mempunyai kod kontrak pintar, yang EOA tiada. Selain itu, akaun kontrak tidak mempunyai kunci persendirian. Sebaliknya, ia dimiliki (dan dikawal) oleh kod logik kontrak pintarnya iaitu program perisian yang dicatatkan pada rantai blok Ethereum semasa penciptaan akaun kontrak dan dilaksanakan oleh EVM.

Kontrak mempunyai alamat, seperti juga EOA. Kontrak juga boleh menghantar dan menerima ether, seperti EOA. Walau demikian, apabila destinasi urusniaga adalah alamat kontrak, ia menyebabkan kontrak itu untuk _dijalankan_ dengan EVM, menggunakan transaksi, dan data urus niaga, sebagai inputnya. Sebagai tambahan kepada ether, urusniaga juga mengandungi _data_ yang menunjukkan fungsi khusus dalam kontrak untuk dijalankan dan parameter apa yang akan disampaikan kepada fungsi tersebut. Dengan cara ini, urus niaga boleh _berhubung_ fungsi dalam kontrak.

Ambil perhatian di sini, walaupun akaun kontrak tidak mempunyai kunci persendirian, ia bukan bermakna ianya tidak boleh mengurus transaksi. Hanya EOA boleh memulakan urus niaga, tetapi akaun kontrak boleh _bertindak_ ke atas urus niaga dengan memanggil kontrak lain, membina laluan pelaksanaan yang rumit. Salah satu penggunaan lazim ini ialah EOA yang menghantar transaksi permintaan kepada dompet kontrak pintar pelbagai tandatangan atau disebut Multisig, untuk menghantar ETH ke alamat lain. Corak pengaturcaraan DApp yang lazimnya adalah mempunyai Kontrak A yang memanggil Kontrak B untuk mengekalkan kenyataan yang dikongsi bersama merentas pengguna Kontrak A.

Dalam beberapa bahagian seterusnya, kami akan menulis kontrak pertama kita semua. Anda kemudian akan belajar cara membuat, membiayai, dan menggunakan kontrak dengan dompet MetaMask anda dan menguji ether pada rangkaian ujian Ropsten.

[[simple_contract_example]]
=== Kontrak Mudah: Mengujian Faucet Ether

((("contract accounts","creating", seealso="Faucet.sol contract", id="ix_02intro-asciidoc10", range="startofrange")))((("Faucet.sol contract (test example)","creating", id="ix_02intro-asciidoc11", range="startofrange")))Ethereum mempunyai banyak bahasa peringkat tinggi yang berbeza, semuanya boleh digunakan untuk menulis kontrak dan menghasilkan kod bait EVM. Anda boleh membaca banyak perkara yang paling menonjol dan menarik di <<high_level_languages>>. Salah satu bahasa paling tinggi yang kerap menjadi pilihan untuk memprogramkan kontrak pintar ialah Solidity. ((("Wood, Dr. Gavin","and Solidity"))Solidity )telah dicipta oleh Dr Gavin Wood, pengarang bersama buku ini, dan telah menjadi bahasa yang paling banyak digunakan dalam Ethereum (dan seterusnya). Kita akan menggunakan Solidity untuk menulis kontrak pertama kita nanti.

((("Solidity","faucet.sol and")))Bagi contoh pertama (<<solidity_faucet_example>>), kita akan cuba menulis kontrak yang mengawal _faucet_. Anda telah menggunakan faucet untuk mendapatkan ether ujian pada rangkaian ujian Ropsten. Faucet adalah satu perkaitan mudah: ia memberikan ether kepada mana-mana alamat yang meminta, dan boleh diisi semula secara berkala. Anda boleh menjadikan faucet sebagai dompet yang dikawal oleh manusia atau pelayan sesawang.

[[solidity_faucet_example]]
.Faucet.sol: Kontrak Solidity yang melaksanakan faucet
==== 
[source,solidity,linenums]
----
include::code/Solidity/Faucet.sol[]
----
==== 

[NOTA]
==== 
Anda akan temui kod mudah di dalam buku ini di bahagian _kod_ https://github.com/ethereumbook/ethereumbook/[the book's GitHub repository]. Secara khususnya, _Faucet.sol_ kita adalah di dalam:

----
code/Solidity/Faucet.sol
----
==== 

Ini adalah kontrak yang sangat mudah, semudah kita boleh membuatnya. Ia juga merupakan kontrak, menunjukkan beberapa tabiat buruk dan kelemahan keselamatan. Kita akan belajar dengan mengkaji semua kelemahannya di bab kemudian. Tetapi untuk sekarang, mari kita lihat apa kontrak ini dan bagaimana ia berfungsi, mengikut baris. Anda akan menyaksikan serta merta bahawa banyak elemen Solidity adalah serupa dengan bahasa pengaturcaraan sedia ada, seperti JavaScript, Java, atau Cpass:[++].

Garis pertama ulasan:

[[comment]]
[source,solidity]
----
// Kontrak pertama kita adalah faucet!
----

Komen adalah untuk manusia membacanya dan tidak termasuk dalam pelaksanaan kod bait EVM. Kita biasanya meletakkannya pada baris sebelum kod yang akan dijelaskan, atau kadangkala pada baris yang sama. Komen bermula dengan dua garis miring: +//+. Segala-galanya dari garis miring pertama sampai akhir baris itu diperlakukan sama seperti garis kosong dan diabaikan.

Baris berikutnya pula di mana kontrak sebenar kita bermula:

[[contract_definition]]
[source,solidity]
----
contract Faucet {
----

Baris ini mengisytiharkan objek +kontrak+ sama dengan mengisytiharkan +kelas+ dalam bahasa fahaman objek yang lain. Takrif kontrak termasuk semua garis antara tanda kurung dakap (pass:[<code>{}</code>]), mentakrifkan _ruang lingkup_, sebagaimana tanda kurung dakap itu digunakan pada bahasa pemprograman yang lain.

Kemudian, kita isytiharkan fungsi perrama kontrak +Faucet+.

[[fungsi_pengeluaran]]
[source,solidity]
----
function withdraw(uint withdraw_amount) public {
----

Fungsi dinamakan +withdraw+, dan memerlukan satu hujah integer tidak bertanda (+ uint +) bernama +jumlah_pengeluaran+. Ia diisytiharkan sebagai fungsi awam, bermakna ia boleh dipanggil oleh kontrak lain. Takrif fungsi dikenali dengan, di perantaraan tanda kurung dakap. Bahagian pertama +withdraw+ fungsinya membatasi had pengeluaran:

[[had_pengeluaran]]
[source,solidity]
----
require(withdraw_amount <= 100000000000000000);
----

Ia menggunakan fungsi Solidity terbina dalam +diperlukan+ untuk menguji pra-syarat, bahawa +jumlah_pengeluaran+ kurang daripada atau sama dengan 100,000,000,000,000,000 wei, yang mana di dalam unit ether (see <<ether_denominations>>) bersamaan 0.1 ether. Jika fungsi +pengeluaran+ tadi dipanggil dengan +withdraw_amount+ lebih besar daripada jumlah tersebut, fungsi +require+ di sini akan menyebabkan pelaksanaan kontrak berhenti dan gagal kerana _exception_ iaitu pengecualian. Perhatikan bahawa pernyataan perlu ditamatkan dengan koma bertitik dalam Solidity..

Sebahagian daripada kontrak faucet kita tadi adalah logik utama. Ia mengawal aliran dana keluar dari kontrak dengan meletakkan had pengeluaran. Ini adalah kawalan yang sangat mudah tetapi dapat memberikan anda sekilas kuasa rantai block yang dapat diprogramkan: perisian bukan terpusat yang mengawal wang.

Berikutnya adalah pengeluaran sebenar:

[[arahan_pengeluaran]]
[source,solidity]
----
msg.sender.transfer(withdraw_amount);
----

Beberapa perkara menarik yang berlaku di sini. Objek +msg+ adalah salah satu input yang boleh diakses oleh semua kontrak. Ia mewakili urusniaga yang mencetuskan pelaksanaan kontrak ini. Penentuan +pengirim+ ialah alamat penghantar transaksi. Fungsi +pemindahan+ adalah fungsi terbina dalam yang memindahkan ether dari kontrak semasa ke alamat penghantar. Jika baca dari belakang, ini bermakna +pemindahan+ kepada +penghantar+ dari +msg+ yang mencetuskan pelaksanaan kontrak ini. Fungsi +pemindahan+ mengambil jumlah sebagai satu-satunya asbab. Kita memberikan + nilai +withdraw_amount+ yang merupakan parameter untuk mengisytiharkan fungsi +pengeluaran+ pada baris terdahulu.

Baris yang berikutnya adalah penutup tanda kurung dakap, yang menandakan berakhirnya pernyataan fungsi +withdraw+ tadi

Seterusnya, kita isytiharkan pula satu lagi fungsi:

[[fallback_function]]
[source,solidity]
----
function () external payable {}
----

((("fallback function")))Fungsi ini dipanggil _fallback_ atau _default_, jika urus niaga yang mencetuskan kontrak, tidak memberi nama mana-mana fungsi yang diisytiharkan dalam kontrak, atau sebarang fungsi sama sekali, atau tidak mengandungi data. Kontrak boleh mempunyai satu fungsi lalai (tanpa nama) dan biasanya ia menerima ether. Itulah sebabnya ia ditakrifkan sebagai fungsi luaran dan boleh bayar, yang bermakna ia boleh menerima ether ke dalam kontrak itu. Ia tidak melakukan apa-apa, selain menerima ether, seperti yang ditunjukkan oleh ruang kosong dalam tanda kurung:[(<code>{}</code>)]. Jika kita membuat transaksi menghantar ethere ke alamat kontrak dalam kes jikanianya dompet kripto, maka fungsi ini akan mengendalikannya. 

Di bawah berikut merupakan fungsi lalai kita bagi penutup tanda kurung dakap, yang menutup takrifan kontrak +Faucet+. Itu sahaja!(((range="endofrange", startref="ix_02intro-asciidoc11")))(((range="endofrange", startref="ix_02intro-asciidoc10")))

[[compile_faucet_contract]]
=== Menyusun Kontrak Faucet

((("compiling","Faucet.sol contract", id="ix_02intro-asciidoc12", range="startofrange")))((("Faucet.sol contract (test example)","compiling", id="ix_02intro-asciidoc13", range="startofrange")))Sekarang kita sudah pun mempunyai kontrak contoh pertama, kita perlu menggunakan penyusun (compiler) Solidity untuk menukar kod Solidity ke dalam kod bait EVM supaya ia dapat dilaksanakan oleh EVM pada rantai blok dengan sendiri.

Penyusun Solidity hadir sebagai penyendiri yang boleh dilaksanakan, iaitu sebahagian daripada pelbagai kerangka, dan terkumpul di dalam Persekitaran Pembangunan Bersepadu (IDEs). Untuk memastikan semuanya mudah, kami akan menggunakan salah satu IDE yang masyhur, yang dipanggil _Remix_.

((("Remix IDE")))Gunakan pelayar Chrome anda (dengan dompet MetaMask yang anda gunakan sebelum ini) untuk melayari ke IDE Remix di https://remix.ethereum.org[].

Apabila pertama kali memasuki Remix, ia akan bermula dengan wakil kontrak iaitu _ballot.sol_. Kita tidak memerlukannya, jadi tutupnya dengan mengetik +x+ di sudut jejalur, seperti yang dilihat dalam  <<remix_close_tab>>.

[[remix_close_tab]]
.Tutup contoh lalai jejalur itu
image::images/remix_close_tab.png["Close the default example tab"]

Sekarang, tambahkan jejalur baharu dengan mengetik pada tanda tambah di alat atas kiri bar alat, seperti yang dilihat di <<remix_toolbar>>. Namakan fail itu, _Faucet.sol_.

[[remix_toolbar]]
.Ketik pada tanda tambah untuk membuka jejalur baharu
image::images/remix_toolbar.png["Click the plus sign to open a new tab"]

Setelah anda membuka jejalur baharu, salin dan tampal kod itu dari contoh tadi <<remix_faucet_load>>.

[[remix_faucet_load]]
.Salin kod contoh Faucet ke dalam jejalur baharu itu
image::images/remix_faucet_load.png["Copy the Faucet example code into the new tab"]

Sebaik sahaja anda telah memuatkan kontrak _Faucet.sol_ ke dalam IDE Remix, IDE secara langsung akan mengumpul kod. Sekiranya semuanya berjalan lancar, anda akan melihat kotak hijau dengan "Faucet" di dalamnya muncul di sebelah kanan, di bawah jejalur "Compile", mengesahkan penyusunan telah berjaya (see <<remix_compile>>).

[[remix_compile]]
.Remix berjaya menyusun kontrak Faucet.sol
image::images/remix_compile.png[""]

Sekiranya ada yang tidak kena, kemungkinan ialah IDE Remix menggunakan versi penyusunan Solidity yang berbeza dari versi 0.5.12. Dalam hal ini, arahan bahasa "pragma" akan menghalang _Faucet.sol_ daripada disusun. Untuk menukar versi penyusun, pergi ke jejalur Tetapan, tetapkan versi kepada 0.5.12, dan cuba lagi.

Penyusun Solidity kini telah menggabungkan _Faucet.sol_ menjadi kod bait EVM. Jika anda ingin tahu, kod bait kelihatan seperti ini:

[[faucet_bytecode]]
----
PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xF JUMPI PUSH1 0x0 DUP1
REVERT JUMPDEST PUSH1 0xE5 DUP1 PUSH2 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN
STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3F JUMPI
PUSH1 0x0 CALLDATALOAD PUSH29
0x100000000000000000000000000000000000000000000000000000000 
SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x2E1A7D4D EQ PUSH1 0x41 JUMPI
JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH1 0x4B JUMPI PUSH1 0x0 DUP1 REVERT
JUMPDEST PUSH1 0x5F PUSH1 0x4 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1
SWAP2 SWAP1 POP POP PUSH1 0x61 JUMP JUMPDEST STOP JUMPDEST PUSH8
0x16345785D8A0000 DUP2 GT ISZERO ISZERO ISZERO PUSH1 0x77 JUMPI PUSH1 0x0 DUP1
REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND
PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1
0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO
ISZERO PUSH1 0xB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP STOP LOG1 PUSH6
0x627A7A723058 KECCAK256 PUSH9 0x13D1EA839A4438EF75 GASLIMIT CALLVALUE LOG4 0x5f
PUSH24 0x7541F409787592C988A079407FB28B4AD000290000000000
----

Tidakkah anda suka dengan bahasa peringkat tinggi seperti Solidity berbanding pengaturcaraan langsung dalam kod bait EVM? Saya juga sukakannya! (((range="endofrange", startref="ix_02intro-asciidoc13")))(((range="endofrange", startref="ix_02intro-asciidoc12")))

[[create_contract]]
=== Mencipta Kontrak Di Dalam Rantai Blok

((("blockchain","creating contract on", id="ix_02intro-asciidoc14", range="startofrange")))((("Faucet.sol contract (test example)","on the blockchain", id="ix_02intro-asciidoc15", range="startofrange")))Jadi, kita sudah memiliki kontrak. Kita telah menyusunnya menjadi kod bait. Sekarang, kita perlu "mendaftarkan" kontrak itu di dalam rantai blok Ethereum. Kitai akan menggunakan testnet Ropsten untuk menguji kontrak kami, jadi itulah rantai blok yang kita mahu hantarkannya nanti.

((("zero address","contract registration")))Mendaftarkan kontrak di rantai blok melibatkan penciptaan transaksi khas yang hala tujunya ke alamat +0x0000000000000000000000000000000000000000+, juga dikenali sebagai _zero address_. Alamat sifar adalah alamat khas yang memberitahu rantai blok Ethereum bahawa anda ingin mendaftarkan kontrak. Mujurlah, IDE Remix mengendalikan semua itu untuk anda dan menghantar transaksi ke MetaMask.

((("Remix IDE", id="ix_02intro-asciidoc16", range="startofrange")))Mula-mula, tukar ke jejalur _Run_ dan pilih _Web3 Injected_ dalam kotak pilihan menu jatuhan ke bawah (dropdown). Ini menghubungkan IDE Remix ke dompet MetaMask, dan melalui MetaMask ke rangkaian ujian Ropsten. Sebaik sahaja anda berbuat demikian, anda boleh melihat Ropsten di bawah menu _Environment_. Manakala di dalam kotak pemilihan Akaun, ia menunjukkan alamat dompet anda (see <<remix_run>>).

[[remix_run]]
.Jejalur Menjalankan IDE Remix, dengan suntikan Web3 dipilih
image::images/remix_run.png["Remix IDE Run tab, with Injected Web3 environment selected"]

Di bawah tetapan _Run_ yang baru sahaja anda sahkan tadi ialah kontrak +Faucet+, bersedia untuk diciptakan. Ketik pada butang _Deploy_ seperti ditunjukkan dalam <<remix_run>>.

Remix akan membina urusniaga "penciptaan" khas dan MetaMask akan meminta anda meluluskannya, seperti yang ditunjukkan dalam <<remix_metamask_create>>. Anda akan melihat transaksi penghasilan kontrak tidak mempunyai ether di dalamnya, tetapi ia mempunyai 262 bait data (kontrak yang tersusun) dan akan memakan sejumlah 10 gwei gas. Ketik "submit" untuk meluluskannya.

[[cipta_remix_metamask]]
.MetaMask memaparkan transaksi penciptaan kontrak
image::images/remix_metamask_create.png["MetaMask showing the contract creation transaction"]

Sekarang anda perlu menunggu. Ia akan mengambil masa kira-kira 15 hingga 30 saat untuk kontrak dilombong di Ropsten. Remix tidak tidak akan mengambil masa panjang, tetapi bersabarlah.

Sebaik sahaja kontrak dicipta, ia muncul di bahagian bawah jejalur "Run" (lihat di <<remix_contract_interact>>).

[[remix_contract_interact]]
.Kontrak Faicet sudah dihidupkan!
image::images/remix_contract_interact.png["The Faucet contract is ALIVE!"]

Perhatikan bahawa kontrak +Faucet+ sekarang mempunyai alamatnya sendiri: Remix menunjukkannya sebagai &#x201c;Faucet at 0x72e...c7829&#x201d; (walaupun alamat, huruf dan nombor rawak, akan berbeza). Simbol papan klip kecil di kanan membolehkan anda menyalin alamat kontrak ke papan klip anda. Kita akan menggunakannya dalam bahagian seterusnya.(((range="endofrange", startref="ix_02intro-asciidoc16")))(((range="endofrange", startref="ix_02intro-asciidoc15")))

[[interact_contract]]
=== Bertindak balas dengan Kontrak

((("Faucet.sol contract (test example)","interacting with", id="ix_02intro-asciidoc17", range="startofrange")))Mari kita ulang semula apa yang telah kita telah pelajari sejauh ini: Kontrak Ethereum adalah program yang mengawal wang, yang berjalan di dalam mesin maya yang dipanggil EVM. Ia dicipta oleh transaksi khas yang mengemukakan kod baitnya untuk direkodkandalam rantai bloknya. Sebaik sahaja ia dicipta pada rantai blok, ia akan memiliki alamat Ethereum, seperti dompet kripto. Apabila seseorang menghantar transaksi ke alamat kontrak itu, menyebabkan kontrak itu bekerja di EVM, dengan urus niaga sebagai inputnya. Transaksi dihantar ke pass:[<span class="keep-together">contract</span>] alamat yang mungkin mempunyai ether atau data atau kedua-duanya. Jika ia mengandungi ether, ia "didepositkan" kepada baki kontrak. Jika ia mengandungi data, data boleh menentukan fungsi nama dalam kontrak lalu memanggilnya, untuk menghantar hujahan kepada fungsinya.

[[view_contract_address]]
==== Melihat Alamat Kontrak Di Dalam Penjelajah Blok

((("Faucet.sol contract (test example)","viewing contract address in a block explorer")))Sekarang kita mempunyai kontrak yang direkodkan pada rantai blok, dan kita dapat melihat ianya mempunyai alamat Ethereum. Mari kita semak di dalam penjelajah blok _ropsten.etherscan.io_ untuk melihat bagaimanakah rupa kontrak. Dalam IDE Remix, salin alamat kontrak dengan mengetik ikon papan klip di sebelah namanya (see <<remix_contract_address>>).

[[remix_contract_address]]
.Salin alamat kontrak daripada Remix
image::images/remix_contract_address.png["Copy the contract address from Remix"]

Biarkan Remix terbuka; kita akan kembali semula lagi nanti. Sekarang, arahkan pelayar anda ke _ropsten.etherscan.io_ dan tampal alamat ke dalam kotak carian. Anda seharusnya dapat melihat riwayat kontrak alamat Ethereum, seperti yang ditunjukkan dalam <<etherscan_contract_address>>.(((range="endofrange", startref="ix_02intro-asciidoc17")))

[[etherscan_contract_address]]
.Melihat alamat kontrak Faucet di penjelajah blok Etherscan
image::images/etherscan_contract_address.png["View the Faucet contract address in the etherscan block explorer"]

[[fund_contract]]
==== Menabung Akan Kontrak Tersebut

((("Faucet.sol contract (test example)","sending ether to", id="ix_02intro-asciidoc18", range="startofrange")))Buat masa ini, kontrak hanya mempunyai satu transaksi dalam sejarahnya yakni transaksi penciptaan kontrak. Seperti yang anda lihat, kontrak juga tidak mempunyai ether (tanpa baki). Itu kerana kita tidak mengisi apa-apa dalam kontrak semasa transaksi dalam penciptaan, walaupun kami sebenarnya boleh sahaja diisikan terus.

Faucet tadi memerlukan dana! Projek pertama kita akan menggunakan MetaMask untuk menghantar ether ke kontrak itu. Anda masih perlu alamat kontrak dalam papan klip tadi (jika belum salin lagi, salin semula dari Remix). Buka MetaMask, dan hantar 1 ether ke dalamnya, seperti mana alamat Ethereum yang lain (see <<metamask_send_to_contract>>).

[[metamask_send_to_contract]]
.Kirim 1 ether ke alamat kontrak
image::images/metamask_send_to_contract.png[""]

Dalam seminit, jika anda memuatkan semula penjelajah blok Etherscan, ia akan menunjukkan satu lagi urus niaga ke alamat kontrak dan baki terkini 1 eter.

Ingat lagi fungsi bayaran luaran secara lalai yang tidak dinamakan dalam kod _Faucet.sol_ tadi? Ia kelihatan seperti ini:

[[fallback_function_review]]
[source,solidity]
----
function () external payable {}
----

Apabila anda mengirim transaksi ke alamat kontrak, tanpa data yang menentukan fungsi yang hendak dipanggil, ia akan memanggil dengan fungsi secara lalai. Kita mengisytiharkannya sebagai +payable+ iaitu boleh dibayar, ia menerima dan mendepositkan 1 ether ke dalam baki akaun kontrak. Transaksi anda menyebabkan kontrak dijalankan di EVM, bagi mengemaskini bakinya. Anda telah menabung kepada Faucet itu!(((range="endofrange", startref="ix_02intro-asciidoc18")))

[[withdraw_from_contract]]
==== Mengeluarkan wang dari Kontrak

((("Faucet.sol contract (test example)","withdrawing funds from", id="ix_02intro-asciidoc19", range="startofrange")))((("withdrawal of funds from contract", id="ix_02intro-asciidoc20", range="startofrange")))Seterusnya, jom keluarkan beberapa dana dari Faucet. Untuk pengeluaran, kita perlu membina transaksi yang memanggil fungsi +withdraw+ dan menyerahkan hujahan +withdraw_amount+ atau jumlah pengeluaran kepadanya. Untuk memudahkan lagi, Remix akan membina transaksi itu untuk kita dan MetaMask akan membentangkannya untuk kelulusan tandatangan kita.

Kembali ke jejalur Remix dan lihat kontrak pada jejalur Run. Anda harus melihat kotak jingga ditandai +withdraw+ dengan medan pengisian bertanda +uint256 withdraw_amount+ (lihat di <<remix_contract_withdraw>>).

[[remix_contract_withdraw]]
.Fungsi Pengeluaran Faucet.sol bagi Remix
image::images/remix_contract_interact.png["The withdraw function of Faucet.sol, in Remix"]

Ini adalah antara muka Remix kepada kontrak. Ia membolehkan kita untuk membina transaksi untuk memanggil fungsi yang ditakrifkan di dalam kontrak. Kita akan memasukkan jumlah pengeluaran iaitu +withdraw_amount+ dan klik butang pengeluaran untuk menjana transaksi.

Pertama sekali, mari kita ketahui jumlah pengeluaran iaitu +withdraw_amount+. Kita akan mencuba mengeluarkan 0.1 eter, yang merupakan jumlah had tertinggi yang dibenarkan oleh kontrak itu. Ingatlah bahawa semua nilai mata wang dalam Ethereum adalah dalam denominasi di dalam wei, dan fungsi +withdraw+ menjangka +withdraw_amount+ dinyatakan dalam wei juga. Amaun yang kita mahukan adalah 0.1 eter, iaitu 100,000,000,000,000,000 wei (1 diikuti oleh 17 sifar).



[PETUA]
==== 
Disebabkan oleh keterhadan dalam JavaScript, nombor sebesar 10^17 tidak dapat diproses oleh Remix. Sebaliknya, kita melampirkannya dengan sebut harga berganda, untuk membolehkan Remix menerimanya sebagai rentetan dan menggunakannya sebagai nombor besar iaitu +BigNumber+. Sekiranya kita tidak memasukkannya dalam sebut harga, IDE Remix akan gagal memprosesnya dan memaparkan "Error encoding arguments: Error: Assertion failed." iaitu ralat pengekodan kerana penegasan gagal.
==== 

Taip "100000000000000000" (dengan pengikat kata) ke dalam kotak +withdraw_amount+ dan ketik butang +withdraw+ (rujuk <<remix_withdraw>>).

[[pengeluaran_remix]]
.Ketik "withdraw" pada Remix untuk menghasilkan transaksi pengeluaran
image::images/remix_withdraw.png[""]

MetaMask akan memunculkan tetingkap urusniaga untuk anda mengesahkannya. Klik sahkan (comfirm) untuk memanggil kontrak bagi tujuan pengeluaran wang (rujuk <<metamask_withdraw>>).

[[metamask_withdraw]]
.Transaksi MetaMask memanggil fungsi pengeluaran
image::images/metamask_withdraw.png["MetaMask transaction to call the withdraw function"]

Tunggu seminit dan kemudian muatkan kembali penjelajah blok Etherscan untuk melihat transaksi yang terpapar dalam riwayat alamat kontrak +Faucet+ (lihat di <<etherscan_withdrawal_tx>>).

[[etherscan_withdrawal_tx]]
.Etherscan memaparkan fungsi panggilan pengeluaran transaksi
image::images/etherscan_withdrawal_tx.png["Etherscan shows the transaction calling the withdraw function"]


Kini, kita melihat transaksi baharu dengan alamat kontrak sebagai destinasi dan nilai 0 eter. Baki kontrak telah berubah dan kini 0.9 eter kerana ia menghantar 0.1 ether seperti yang diminta. Tetapi kita tidak melihat transaksi keluar atau "OUT" dalam bahaguan riwayat alamat kontrak atau _contract address history_.

Di manakah bahagian pengeluaran akan keluar? Satu jejalur baharu telah muncul di halaman riwayat alamat kontrak, bernama Transaksi Dalaman.((("internal transaction (message)")))Kerana pemindahan 0.1 ether berasal dari kod kontrak, ia juga merupakan transaksi dalaman (juga dipanggil _message_). Ketik pada jejalur itu untuk melihatnya (rujuk <<etherscan_withdrawal_internal>>).


"Transaksi dalaman" ini dihantar oleh kontrak dalam baris kod dari fungsi pass:[<code><span class="keep-together">withdraw</span></code>] di dalam _Faucet.sol_):

[[arahan_semakan_pengeluaran]]
[source,solidity]
----
msg.sender.transfer(withdraw_amount);
----

Bagi mengingati semula: kita menghantar transaksi dari dompet MetaMask yang mengandungi arahan data untuk memanggil fungsi +pengeluaran+ dengan fungsi hujah +jumlah pengeluaran+ sebanyak 0.1 ether. Transaksi itu menyebabkan kontrak itu berjalan di dalam EVM. Oleh sebab EVM menjalankan fungsi +pengeluaran+ kontrak +Faucet+, mula-mula ia memanggil fungsi +require+ dan mengesahkan bahawa jumlah yang diminta kurang daripada atau sama dengan pengeluaran tertinggi yang dibenarkan iaitu 0.1 ether. Kemudian ia telah memanggil fungsi +pemindahan+ untuk menghantar eher kepada kita. Menjalankan fungsi +pemindahan+ telah menjana urusniaga dalaman kerana telah mendeposit 0.1 ether ke alamat dompet milik kita, dari baki kontra tadi.. Itulah yang ditunjukkan pada jejalur Transaksi Dalaman di Etherscan(((range="endofrange", startref="ix_02intro-asciidoc20")))(((range="endofrange", startref="ix_02intro-asciidoc19"))).(((range="endofrange", startref="ix_02intro-asciidoc14")))

[[etherscan_withdrawal_internal]]
.Etherscan menunjukkan transaksi dalaman memindahkan ether keluar dari kontrak
image::images/etherscan_withdrawal_internal.png["Etherscan shows the internal transaction transferring ether out from the contract"]

[[intro_conclusion]]
=== Kesimpulan

Dalam bab ini, anda menyediakan dompet menggunakan MetaMask dan membiayainya menggunakan faucet pada rangkaian ujian Ropsten. Anda menerima ether ke alamat Ethereum dompet anda, kemudian anda menghantar ether ke alamat Ethereum.

Seterusnya, anda menulis kontrak Faucet di Soliditi. Anda menggunakan IDE Remix untuk menyusun kontrak ke dalam kod bait EVM, kemudian menggunakan Remix untuk membentuk transaksi dan mencipta kontrak +Faucet+ pada blok Ropsten. Sebaik sahaja dibuat, kontrak +Faucet+ mempunyai alamat Ethereum, dan anda menghantar beberapa ether. Akhirnya, anda berjaya membina transaksi untuk memanggil fungsi +pengeluaran+ dan berjaya meminta 0.1 ether. Kontrak itu menyemak permintaan dan menghantar 0.1 ether kepada anda dengan urusniaga dalaman.

Mungkin tidak terlalu banyak ilmu yang diperoleh, tetapi anda berjaya bertindak balas dengan perisian yang mengawal wang pada dunia komputer bukan terpusat.

Kita akan buat lebih banyak lagi program kontrak pintar <<smart_contracts_chapter>>dan belajar tentang amalan terbaik dilakukan serta pertimbangan keselamatan di dalam <<smart_contract_security>>.(((range="endofrange", startref="ix_02intro-asciidoc0")))