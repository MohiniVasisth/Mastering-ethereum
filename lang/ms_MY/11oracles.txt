[[oracles_chap]]
== Oracle

((("oracles", id="ix_11oracles-asciidoc0", range="startofrange")))Dalam bab ini, kita membincangkan _oracles_, iaitu sistem yang dapat menyediakan sumber data luaran kepada kontrak pintar Ethereum. Istilah "oracle" berasal dari kisah dongeng Yunani, di mana ia merujuk kepada seseorang dalam komunikasi dengan para dewa yang dapat melihat melihat masa depan. Dalam konteks rantaian blok, ramalan atau oracle merupakan sistem yang boleh menjawab soalan yang bersifat luaran kepada Ethereum. ((("trustless systems", seealso="oracles")))Secara unggulnya, oracle adalah sistem yang tidak dapat dikekalkan, yang bermaksud bahawa ia tidak perlu dipercayai kerana ia beroperasi pada prinsip-prinsip yang bukan terpusat.

[[why_oracles]]
=== Mengapa Orakel Diperlukan

((("oracles","reasons for using")))Alat utama platform Ethereum adalah Mesin Maya Ethereum (EVM), dengan keupayaan untuk melaksanakan program dan mengemaskini tingkah laku Ethereum, yang dikekang oleh peraturan kesepakatan, pada mana-mana nod dalam rangkaian bukan terpusat. Untuk mengekalkan kesepakatan, pelaksanaan EVM mestilah benar-benar ketara dan hanya berdasarkan konteks bersama tingkah laku Ethereum dan transaksi yang ditandatangani. Ini mempunyai dua kesan penting: yang pertama adalah, tidak ada sumber penilaian (intrinsik) yang bekerja untuk EVM dan kontrak pintar; yang kedua ialah data sokongan (extrinsik) hanya boleh diperkenalkan sebagai muatan data transaksi.

Mari kita bongkar kedua kesan itu lagi. Untuk memahami larangan fungsi rawak sebenar dalam EVM yang menghasilkan kontrak pintar secara rawak, pertimbangkan kesan terhadap cubaan untuk mencapai kesepakatan selepas melaksanakan fungsi sedemikian: nod A akan melaksanakan perintah dan menyimpan +3+ bagi pihak kontrak pintar dalam simpanannya, manakala nod B, yang melaksanakan kontrak pintar yang sama, akan menyimpan +7+. Oleh itu, nod A dan B akan datang kepada nod yang berlainan tentang apa keadaan yang sepatutnya, walaupun telah menjalankan kod yang sama dalam konteks yang serupa. Ia mampu menjadikan penyata yang berbeza yang dapat dicapai setiap kali kontrak pintar dinilai. Oleh itu, tidak ada cara untuk rangkaian, yang mana banyaknya nod yang berjalan secara bebas di seluruh dunia, untuk mencapai kesepakatan bukan terpusat mengenai keadaan yang sepatutnya. Dalam praktiknya, ia akan menjadi keadaannya lebih cepat buruk berbanding contoh ini, kerana kesan yang berlaku secara tidak langsung, termasuk pemindahan ether, akan dibina secara eksponen.

Perhatikan bahawa fungsi pseudo-rawak, seperti fungsi kriptografi selamat hash (yang ditentukan dan sememangnya, sebahagian daripada EVM), tidak mencukupi untuk banyak aplikasi. Ambil contoh permainan perjudian yang melambung duit syiling untuk menyelesaikan pembayaran taruhan, yang memerlukan hasil rawak sama ada kepala atau ekor&#x2014;pelombong dapat memperoleh kelebihan dengan bermain permainan dan hanya termasuk transaksi mereka di blok yang dimenanginya. Jadi bagaimana kita dapat menyelesaikan masalah ini? Nah, semua nod boleh bersetuju dengan kandungan transaksi yang ditandatangani, jadi maklumat yang berlainan dari luaran, termasuk sumber rawak, maklumat harga, ramalan cuaca, dan lain-lain, boleh diperkenalkan sebagai bahagian data transaksi yang dihantar ke rangkaian. Walau bagaimanapun, data semata-mata tidak boleh dipercayai, jika ia berasal dari sumber yang tidak boleh dipercayai. Oleh itu, kita baru sahaja menangguhkan masalah ini. Kita menggunakan oracle sebagai cubaan menyelesaikan masalah ini, yang akan dibincangkan secara terperinci, dalam bab ini.

[[oracle_use_cases]]
=== Perihal Penggunaan dan Contoh Oracle

((("oracles","use cases/examples")))Oracle, dengan idealnya, menyediakan cara yang tidak percaya (atau sekurang-kurangnya hampir tidak mempercayai) untuk mendapatkan maklumat ekstrinsik (iaitu maklumat luaran dari "dunia nyata" atau di luar rantaian) seperti keputusan permainan bola sepak, harga emas, atau nombor yang benar-benar rawak, ke platform Ethereum untuk kontrak pintar bagi tujuan digunakan. Ia juga boleh digunakan untuk menyampaikan data dengan selamat kepada DApp secara langsung. Oleh itu, Oracle boleh dianggap sebagai alat kerja untuk merapatkan jurang antara dunia rantaian dan kontrak pintar. Membenarkan kontrak pintar untuk menguatkuasakan hubungan kontrak berdasarkan peristiwa dunia sebenar dan data memperluaskan lagi skopnya secara dramatik. Bagaimanapun, ini juga boleh mengakibatkan risiko luar kepada model keselamatan Ethereum. Pertimbangkan kontrak "wasiat faraid" yang mengagihkan aset apabila seseorang telah mati. Ini adalah sesuatu yang sering dibincangkan dalam ruang kontrak pintar, dan menonjolkan risiko sesuatu yang dipercayai. Jika jumlah warisan dikawal oleh kontrak sedemikian cukup tinggi, insentif untuk menggodam oracle dan pencetus pengagihan aset _sebelum_ pemilik meninggal dunia adalah sangat tinggi.

Perhatikan bahawa beberapa orakel memberikan data yang khusus kepada sumber data peribadi tertentu, seperti sijil akademik atau kad pengenalan kerajaan. Sumber data tersebut, seperti universiti atau jabatan kerajaan, dipercayai sepenuhnya, dan kebenaran data adalah subjektif (kebenaran hanya ditentukan oleh rayuan kepada jabatan sumber manusia). Oleh itu, data tersebut tidak dapat diberikan tanpa kepercayaan - yakni, tanpa mempercayai suatu sumber-kerana tidak ada kebenaran yang secara objektif dapat diandalkan. Oleh itu, kita memasukkan sumber-sumber data ini dalam takrif kita tentang apa yang disebut sebagai "orakel" kerana ia juga menyediakan jambatan data untuk kontrak pintar. Data yang berikan secara umumnya mengambil bentuk pengesahan, seperti pasport atau rekod pencapaian. Perakuan akan menjadi sebahagian besar daripada kejayaan platform rantai blok pada di masa depan, terutamanya berkaitan dengan isu berkaitan pengesahan identiti atau reputasi, jadi adalah penting untuk meneroka bagaimana ia boleh disampaikan oleh platform rantai blok.

Beberapa lagi contoh data yang mungkin disediakan oleh orakel termasuk:

* Nombor rawak/entropi dari sumber fizikal seperti proses kuantum/termal: misalnya, untuk memilih pemenang dalam kontrak pintar loteri
* Pencetus parametrik diindeks kepada bahaya semulajadi: contohnya, mencetuskan kontrak bijak terikat dengan bencana, seperti pengukuran skala Richter untuk bon gempa bumi
* Data kadar pengurupan: misalnya, untuk penentuan nilai kriptografi yang tepat untuk mata wang fiat
* Data pasaran modal: contohnya, keranjang harga aset/sekuriti yang ditokenkan
* Data rujukan tanda aras: contohnya, memasukkan kadar faedah ke dalam pasaran saham kewangan pintar
* Data statik/pseudostatik: pengecam keselamatan, kod negara, kod mata wang, dll.
* Data masa dan selang: untuk memicu peristiwa berdasarkan ukuran masa yang tepat
* Data cuaca: contohnya, pengiraan premium insurans berdasarkan ramalan cuaca
* Peristiwa politik: untuk penyelesaian pasaran ramalan
* Acara sukan: untuk penyelesaian ramalan pasaran dan kontrak sukan fantasi
* Data geolokasi: contohnya, seperti yang digunakan dalam pengesanan rantaian bekalan
* Pengesahan kerosakan: untuk kontrak insurans
* Peristiwa yang berlaku di blok lain: fungsi saling boleh berkerja
* Harga pasaran Ether: contohnya, untuk ramalan harga gas fiat
* Statistik penerbangan: misalnya, seperti yang digunakan oleh kumpulan dan kelab untuk tabungan tiket penerbangan


Dalam bahagian yang berikut, kita akan meneliti beberapa cara yang boleh digunakan oleh orakel, termasuk corak asasnya, perumpamaan perhitungan, orakel bukan terpusat, dan pelaksanaan klien orakel dalam Solidity.

[[oracle_design_patterns]]
=== Corak Reka Bentuk Orakel

((("oracles","design patterns", id="ix_11oracles-asciidoc1", range="startofrange")))Semua orakel memberikan beberapa fungsi utama, mengikut definisi. Ini termasuk keupayaan untuk:

* Kumpulkan data dari sumber rantaian luar.
* Pindahkan rantaian data dengan mesej yang ditandatangani.
* Buat data yang tersedia dengan meletakkannya dalam simpanan kontrak pintar.

Setelah data tersedia dalam penyimpanan kontrak pintar, ia boleh diakses oleh kontrak pintar lain melalui panggilan mesej yang memanggil fungsi "retrieve" kontrak pintar orakel itu; ia juga boleh diakses oleh nod Ethereum atau klien yang membolehkan rangkaian secara langsung dengan "melihat ke dalam&#x201d;  storan orakel itu.

Tiga cara utama untuk penetapan orakel boleh dikategorikan sebagai _permintaan maklumbalas_, pass:[<span class="keep-together"><em>siar-langgan</em></span>], dan _segera-baca_.

((("immediate-read oracles")))((("oracles","immediate-read")))Bermula dengan orakel yang paling ringkas dan sederhana adalah yang menyediakan data yang hanya diperlukan untuk keputusan segera, seperti "Apakah alamat untuk __ethereumbook.info__?" atau "Adakah orang ini berumur lebih 18?" Mereka yang ingin bertanya data jenis ini cenderung untuk melakukannya secara "tepat pada masanya", pemeriksaan dilakukan apabila maklumat diperlukan dan kemudian tidak bertanga lagi. Contoh Orakel itu termasuk orang-orang yang memegang data tentang atau dikeluarkan oleh organisasi, seperti sijil akademik, kod dail, keahlian institusi, pengecam lapangan terbang, kas pengenalan sendiri dan sebagainya. Jenis orakel ini menyimpan data serentak di dalam penyimpanan kontraknya, manakala mana-mana kontrak pintar lain boleh melihatnya menggunakan panggilan permintaan ke kontrak orakel. Ia boleh dikemas kini. Data dalam simpanan orakel juga tersedia untuk carian langsung oleh aplikasi berasaskan rantai blok (iaitu, Ethereum pass:[<span class="keep-together">disambungkan pelanggan</span>]) tanpa perlu panjang lebar dan menanggung kos gas semata-mata untuk mengeluarkan transaksi. Sebuah kedai yang ingin memeriksa umur pelanggan yang ingin membeli alkohol boleh menggunakan orakel dengan cara ini. Jenis orackel ini menarik minat kepada organisasi atau syarikat yang mungkin perlu menjalankan dan menyelenggara pelayan untuk menjawab permintaan data tersebut. Perhatikan bahawa data yang disimpan oleh orakel mungkin tidak menjadi data mentah yang dipersembahkan oleh orakel, misalnya, untuk kecekapan atau sebab kerahsiaan. Sebuah universiti mungkin menubuhkan satu orakel untuk sijil pencapaian akademik pelajar masa lalu. Walau bagaimanapun, menyimpan butir-butir lengkap sijil (yang boleh dijalankan ke halaman kursus yang diambil dan gred yang dicapai) akan tindakan berlebihan. Sebaliknya, hash bagi siji itu sahaja sudahl mencukupi. Begitu juga, kerajaan mungkin ingin memasukkan pengenalan diri rakyat ke platform Ethereum, di mana jelas butiran yang perlu dipelihara. Bahkan, cincangan data (secara berhati-hati, di dalam pokok Merkle dengan Salt) dan hanya menyimpan akar hash dalam simpanan kontrak pintar akan menjadi cara itu berkesan untuk mengatur perkhidmatan sedemikian.

((("oracles","publish-subscribe")))((("publish-subscribe oracles")))Persediaan seterusnya ialah _siar-langganan_, di mana orakel berkesan menyediakan perkhidmatan siaran untuk data yang dijangka berubah (mungkin secara seharian dan kerap) dipantau oleh kontrak pintar pada rangkaian, atau diawasi oleh nyahkekaburan (daemon) di luar rantai untuk dikemaskini. Kategori ini mempunyai corak yang serupa dengan suapan RSS, WebSub, dan sebagainya, di mana orakel dikemas kini dengan maklumat baharu dan isyarat bendera bahawa data baru tersedia kepada mereka yang menganggap diri mereka "dilanggan." Pihak yang berminat mestilah mengutip orakel untuk memeriksa sama ada maklumat terkini telah berubah, atau mendengar kemaskini kepada kontrak orakel dan bertindak apabila ia berlaku. Contohnya termasuk suapan harga, maklumat cuaca, statistik ekonomi atau sosial, data trafik, dan lain-lain. Pengundian adalah sangat tidak cekap di dunia pelayan web, tetapi tidak begitu dalam konteks sesama rakan maya (p2p) rantai blok: Klien Ethereum perlu meneruskan semua perubahan tingkah laku, termasuk perubahan kepada storan kontrak, maka pengundian untuk perubahan data adalah panggilan setempat kepada pelanggan yang diselaraskan. Log peristiwa Ethereum menjadikannya mudah bagi aplikasi untuk melihat perkembangan terkini orakel, justeru corak ini boleh dalam beberapa cara bahkan dianggap sebagai "pemuatnaik" perkhidmatan (push service). Walau bagaimanapun, jika pengundian dilakukan dari kontrak pintar, yang mungkin diperlukan untuk beberapa aplikasi yang bukan terpusat (misalnya, jika insentif pengaktifan tidak berlaku), maka perbelanjaan gas secara terang-terangan mungkin terpaksa ditanggung.

((("oracles","request-response")))((("request-response oracles")))Kategori _permintaan-maklumbalas_ adalah yang paling rumit: di mana ruang data terlalu besar untuk disimpan kontrak pintar dan pengguna dijangka hanya memerlukan sebahagian kecil daripada kumpulan data keseluruhan pada satu masa. Ia juga merupakan model yang sesuai untuk perniagaan penyedia data. Secara praktikal, orakel seperti itu boleh dilaksanakan sebagai sistem kontrak pintar di dalam rantai blok dan infrastruktur di luar rantaian yang digunakan untuk memantau permintaan, mengambil dan mengembalikan data. Permintaan untuk data dari aplikasi yang bukan terpusat biasanya akan menjadikan proses penyegerakkan yang melibatkan beberapa langkah. Dalam corak ini, pertama, EOA beroperasi dengan aplikasi yang bukan terpusat, menghasilkan tindak balas dengan fungsi yang ditetapkan dalam kontrak pintar orakel. Fungsi ini memulakan permintaan kepada orakel, dengan hujah-hujah yang berkaitan yang memperincikan data yang diminta sebagai tambahan kepada maklumat tambahan yang mungkin termasuk fungsi panggil balik dan parameter penjadualan. Setelah transaksi ini disahkan, permintaan orakel dapat diperhatikan sebagai peristiwa EVM yang dipancarkan oleh kontrak orakel, atau sebagai perubahan keadaan; hujah boleh diambil dan digunakan untuk melakukan pertanyaan sebenar sumber data rantaian luar. Orakel itu juga mungkin memerlukan pembayaran untuk memproses permintaan, pembayaran gas untuk panggil balik, dan keizinan untuk mengakses data yang diminta. Akhirnya, data yang dihasilkan ditandatangani oleh pemilik orakel, membuktikan kesahihan data pada masa yang diberikan, dan dihantar dalam transaksi kepada aplikasi yang yang bukan terpusat yang membuat permintaan itu-sama ada secara langsung atau melalui kontrak orakel. Bergantung pada parameter penjadualan, orakel boleh menyiarkan transaksi selanjutnya yang mengemas kini data pada jarak masa yang tetap (contohnya, maklumat penetapan harga terakhir).

Langkah-langkah untuk oracle permintaan-maklumbalas boleh diringkaskan seperti berikut:

1. Menerima pertanyaan daripada DApp.
2. Mengasingkan pertanyaan.
3. Semak bahawa kebenaran pembayaran dan data akses disediakan.
4. Mendapatkan data yang berkaitan dari sumber rantaian luar (dan menyulitkannya jika perlu).
5. Masukkan transaksi dengan data yang disertakan.
6. Siarkan transaksi ke rangkaian.
7. Jadualkan apa-apa transaksi yang diperlukan, seperti pemberitahuan, dsb.

Pelbagai skema lain juga mungkin; sebagai contoh, data boleh diminta dari dan dikembalikan terus oleh EOA, menghapus keperluan untuk kontrak pintar orakel. Begitu juga, permintaan dan tindak balas boleh dibuat ke dan dari perkakasan Internet Kebendaan (IoT) yang dibolehkan. Oleh itu, orakel boleh menjadi manusia, perisian, atau perkakasan.

Corak permintaan-maklumbalas yang diterangkan di sini biasanya dilihat dalam seni bina klien-pelayan. Walaupun ini adalah corak pemberitaan yang berguna yang membenarkan aplikasi mempunyai perbualan dua hala, ia mungkin tidak sesuai di bawah syarat tertentu. Sebagai contoh, bon pintar yang memerlukan kadar faedah dari orakel mungkin perlu meminta data setiap hari di bawah corak permintaan-maklumbalas untuk memastikan kadar sentiasa betul. Memandangkan kadar faedah tidak berubah, corak penerbitan langganan mungkin lebih sesuai di sini-terutamanya apabila mengambil kira jalur lebar Ethereum yang terhad.

Siar-langgan pula adalah corak di mana penerbit (dalam konteks ini, oracle) tidak menghantar mesej terus kepada penerima, tetapi sebaliknya menyifatkan mesej yang diterbitkan ke tahap yang berbeza. Pelanggan dapat meluahkan minat dalam satu atau lebih pembahagian itu dan mendapatkan hanya berita yang menarik. Di bawah corak sedemikian, orakel boleh menulis kadar faedah ke storan dalamannya sendiri setiap kali ia berubah. Pelbagai DApp yang dilanggan hanya dapat membacanya dari kontrak orakel, sehingga mengurangkan kesan pada lebar jalur rangkaian sambil mengurangkan kos penyimpanan.

((("broadcast (multicast) oracle")))((("multicast (broadcast) oracle")))((("oracles","broadcast/multicast")))Dalam corak penyiaran atau pelbagai siaran, sebuah orakel akan menghantar semua mesej ke saluran dan kontrak yang dilanggan akan mendengar saluran di bawah pelbagai mod langganan. Sebagai contoh, orakel boleh menerbitkan mesej ke saluran kadar pertukaran matawamg kripto. Kontrak pintar yang melanggan boleh meminta kandungan penuh saluran jika ia memerlukan siri masa untuk, misalnya, pengiraan purata pergerakan; yang lain hanya memerlukan kadar terkini untuk pengiraan harga tempat. Corak siaran adalah sesuai di mana oracle tidak perlu mengetahui identiti langganan pass:[<span class="keep-together">kontrak</span>].(((range="endofrange", startref="ix_11oracles-asciidoc1")))

[[data_authentication_sec]]
=== Pengesahan data

((("data authentication, oracles and")))((("oracles","and data authentication")))((("oracles","data authentication with"))Jika kita anggap punca )data yang ditanya oleh DApp adalah berwibawa dan boleh dipercayai (andaian tidak penting), satu soalan yang luar biasa akan berlaku: memandangkan alat kerja orakel dan alat kerja permintaan-maklumbalas boleh dikendalikan oleh entiti yang berbeza, bagaimana kita boleh mempercayai alat kerja ini? Terdapat kemungkinan yang jelas bahawa data boleh dialihkan dari tempanyat, maka dengan itu amat penting bahawa kaedah rantaian dapat membuktikan ketelusan data yang dikembalikan. Dua pendekatan biasa untuk pengesahan data ialah _bukti-pengesahan_ dan _persekitaran pelaksanaan terpercaya_ (TEE).

((("authenticity proofs")))Bukti Ketulenan adalah kriptografi yang menjamin bahawa data tidak diganggu. Berdasarkan pelbagai teknik pengesahan (contohnya, bukti digital yang ditandatangani), mereka secara berkesannya mengalihkan kepercayaan dari pembawa data kepada penafsir (iaitu penyedia pengesahan). Dengan mengesahkan bukti keaslian pada rangkaian, kontrak pintar dapat mengesahkan ketelusan data sebelum beroperasi di atasnya. ((("Oraclize")))http://www.oraclize.it/[Oraclize] adalah contoh perkhidmatan oracle yang memanfaatkan pelbagai bukti ketulenan. ((("TLSNotary proofs")))Satu bukti seperti yang sedia ada untuk pertanyaan data dari rangkaian utama Ethereum adalah bukti TLSNotary. Bukti TLSNotari membenarkan klien memberi bukti kepada pihak ketiga bahawa trafik sesawang HTTPS berlaku antara klien dan pelayan. Walaupun HTTPS sendiri selamat, ia tidak menyokong pemetaan data. Akibatnya, bukti TLSNotari bergantung pada tandatangan TLSNotari (melalui PageSigner). Bukti TLSNotari memanfaatkan protokol Keselamatan Lapisan Pengangkutan (TLS), yang membolehkan kunci induk TLS, yang menandatangani data selepas ia telah diakses, dipecah antara tiga pihak: pelayan (oracle), yang diaudit (pengorakel), dan juruaudit. Pengorakel menggunakan contoh mesin maya Perkhidmatan Web Amazon (AWS) sebagai juruaudit, yang boleh disahkan sebagai telah diubahsuai sejak proses penciptaan objek. Contoh AWS ini menyimpan rahsia TLSNotary, membolehkannya memberikan bukti ketulenan. Walaupun ia menawarkan jaminan yang lebih tinggi terhadap data yang merosakkan daripada alat kerja permintaan-maklumbalas yang tulen, pendekatan ini memerlukan anggapan bahawa Amazon sendiri tidak akan campur tangan dengan proses penciptaan VM.

((("TEEs (trusted execution environments)")))((("Town Crier")))((("trusted execution environments (TEEs)")))http://www.town-crier.org/[Town Crier] adalah sistem suapan data Orakel yang disahkan berdasarkan pendekatan TEE; kaedah tersebut menggunakan daerah yang selamat berasaskan perkakasan untuk memastikan ketelusan data. Town Crier menggunakan  ((("SGX (Software Guard eXtensions)")))((("Software Guard eXtensions (SGX)"))) Penyambung Pengawal Perisian (SGX) dari Intel, untuk memastikan bahawa maklumbalas dari pertanyaan HTTPS dapat disahkan sebagai tulen . SGX menyediakan jaminan ketelusan, memastikan bahawa aplikasi yang berjalan di dalam lingkungan ini tidak dilindungi oleh CPU untuk mengganggu proses lain. Ia juga menyediakan kerahsiaan, memastikan bahawa keadaan aplikasi adalah legap terhadap proses lain apabila berjalan di dalam lingkungan. Dan akhirnya, SGX membenarkan pengesahan, dengan menghasilkan bukti yang ditandatangani secara digital bahawa aplikasi yang dikenal pasti dengan hash binaannya-sebenarnya berjalan di dalam lingkungan. Dengan mengesahkan tandatangan digital ini, adalah tidak mustahil untuk aplikasi bukan terpusat membuktikan bahawa contoh Town Crier berjalan dengan selamat di dalam daerah SGX. Ini, seterusnya, membuktikan bahawa contohnya tidak diganggu dan bahawa data yang dikeluarkan oleh Town Crier adalah sahih. Hartanah sulit juga membolehkan Town Crier mengendalikan data peribadi dengan membenarkan pertanyaan data disulitkan dengan menggunakan kunci awam contoh Town Crier. Mengendalikan alat kerj pertanyaan-maklumbalas orackel dalam daerah seperti SGX membolehkan kita memikirkan bahawa ianya berjalan dengan selamat pada perkakasan pihak ketiga yang dipercayai, memastikan bahawa data yang diminta itu akan dikembalikan tanpa campurtangan (anggaplah kitamempercayai Intel/SGX).

[[computation_oracles_sec]]
=== Penghitungan Orakel

((("oracles","computation oracles", id="ix_11oracles-asciidoc2", range="startofrange")))Setakat ini, kita hanya membincangkan hal-hal dalam konteks permintaan dan penyampaian data. Bagaimanapun, orakel juga boleh digunakan untuk melakukan perhitungan sewenang-wenangnya, satu fungsi yang boleh menjadi sangat berguna memandangkan batasan gas blok Ethereum yang sedia ada dan kos pengiraan yang agak mahal. Daripada hanya menyampaikan hasil pertanyaan, perhitungan Orakel boleh digunakan untuk melakukan perhitungan pada satu set input dan mengembalikan hasil perhitungan yang mungkin tidak dapat dihitung pada rantai. Sebagai contoh, seseorang mungkin menggunakan orakel pengiraan untuk melakukan perhitungan mundur intensif untuk menganggar hasil kontrak bon.

((("Oraclize")))Jika anda bersedia untuk mempercayai perkhidmatan berpusat tetapi boleh audit, anda boleh pergi lagi ke Pengorakel (Oraclize). Mereka menyediakan perkhidmatan yang membolehkan aplikasi bukan terpusat meminta output pengiraan yang dilakukan dalam mesin maya keselamatn komputer (sandbox) AWS. Contoh AWS mencipta wadah boleh laku dari dokumen teks berperintah (Dockerfile) yang ditetapkan pengguna yang dibungkus dalam arkib yang dimuat naik ke Sistem Fail Inter-Planet (IPFS; lihat<<data_storage_sec>>). Atas permintaan, Pengorakel mengambil arkib ini menggunakan cincangannya dan kemudian memulakan dan melaksanakan kandungan dokumen teks berperintah pada AWS, menyerahkan mana-mana hujah yang diberikan kepada aplikasi sebagai pembolehubah persekitaran. Aplikasi berkandung itu melakukan pengiraan, tertakluk kepada kekangan masa, dan menulis hasil kepada output piawaian, di mana ia dapat diambil oleh Pengorakel dan dikembalikan kepada aplikasi yang bukan terpusat. Pengorakel kini menawarkan perkhidmatan ini pada contoh t2.micro AWS yang boleh audit, jadi jika pengiraan adalah beberapa nilai bukan nremeh-temeh, adalah mungkin untuk memeriksa bahawa kamdungan dokumen teks berperintah yang betul telah dilaksanakan. Walau bagaimanapun, ini bukan penyelesaian yang benar-benar bukan terpusat.

((("cryplet")))Konsep "kriplet" sebagai piawaian untuk mengenalpasti orakel yang telah disahkan itu diangkat sebagai sebahagian daripada Rangka Kerja ESC yang lebih luas buat Microsoft. Kriplet dilaksanakan di dalam kapsul yang disulitkan yang melepaskan infrastruktur, seperti I/O, dan mempunyai CryptoDelegate yang dilampirkan supaya mesej masuk dan keluar ditandatangani, disahkan, dan dibuktikan secara langsung. Kroplet menyokong transaksi yang teragih supaya logik kontrak boleh mengambil pelbagai langkah, pelbagai rantai blok, dan transaksi sistem luaran kompleks dengan cara ACID. Ini membolehkan pembangun membuat penyelesaian mudah alih, terpencil, dan kebenaran persendirian untuk digunakan dalam kontrak pintar. Kriplet mengikut format yang ditunjukkan di sini:

[source,solidity]
----
public class SampleContractCryptlet : Cryptlet
{
        public SampleContractCryptlet(Guid id, Guid bindingId, string name,
            string address, IContainerServices hostContainer, bool contract)
            : base(id, bindingId, name, address, hostContainer, contract)
        {
            MessageApi = new CryptletMessageApi(GetType().FullName,
                new SampleContractConstructor())
----

((("TrueBit")))Untuk penyelesaian yang lebih bukan terpusat, kita boleh bertukar kepada https://truebit.io/[TrueBit], yang menawarkan penyelesaian untuk pengiraan rantaian di luar skala dan boleh disahkan. Ia menggunakan sistem penyelesai dan pengesah yang diberi insentif untuk membuat pengiraan dan pengesahan perhitungan tersebut. Sekiranya penyelesaian dicabar, proses pengesahan berulang pada subset perhitungan dilakukan di dalam rantai-jenis "permainan pengesahan". Permainan meneruskan satu siri pusingan, setiap keluk memeriksa subset kecil yang lebih kecil dan lebih kecil daripada pengiraan. Permainan ini akhirnya mencapai pusingan akhir, di mana cabaran itu cukup remeh sehingga para hakim iaitu -pelombong Ethereum- boleh membuat keputusan terakhir sama ada cabaran itu dipenuhi, di dalam rantai. Sebenarnya, TrueBit adalah pelaksanaan pasaran perhitungan, membenarkan aplikasi bukan terpusat untuk membayar perhitungan yang dapat disahkan dilakukan di luar rangkaian, tetapi bergantung kepada Ethereum untuk menguatkuasakan peraturan permainan pengesahan. Secara teorinya, ini membolehkan kontrak pintar yang tidak dipercayai untuk melaksanakan apa-apa tugas pengiraan dengan selamat.

Pelbagai aplikasi wujud untuk sistem seperti TrueBit, mulai daripada pembelajaran mesin untuk pengesahan bukti kerja. Satu contoh yang terakhir ialah Doge-Ethereum, yang menggunakan TrueBit untuk mengesahkan bukti kerja Dogecoin (Skrip), yang merupakan fungsi intensif memori-kerasi dan pengiraan yang tidak dapat dikira dalam had gas blok Ethereum. Dengan melaksanakan pengesahan ini pada TrueBit, ada kemungkinan untuk mengesahkan transaksi Dogecoin dengan selamat dalam kontrak pintar pada rangkaian ujian Rinkeby Ethereum. (((range="endofrange", startref="ix_11oracles-asciidoc2")))

[[decentralized_orackes_sec]]
=== Orakel Bukan Terpusat

((("oracles","decentralized")))Walaupun data terpusat atau perihal pengiraan Oracle sudah cukup untuk kebanyakkan aplikasi, ia mewakili satu titik kegagalan dalam rangkaian Ethereum. Sebilangan skema telah dicadangkan di sekitar idea tentang Orakel Bukan terpusat sebagai cara memastikan ketersediaan data dan penciptaan rangkaian pembekal data individu dengan sistem pengagregatan data di dalam rantai.

((("ChainLink")))https://www.smartcontract.com/link[ChainLink] telah mencadangkan rangkaian orakel yang bukan terpusat yang terdiri daripada tiga kontrak pintar utama&#x2014;kontrak reputasi, kontrak padanan pesanan, dan kontrak pengagregatan &#x2014dan di luar rantaian pemdaftar penyedia data. Kontrak reputasi digunakan untuk menjejaki prestasi pembekal data. Markah dalam kontrak reputasi digunakan untuk mengisi pendaftar di luar rantai. Kontrak pemadanan pesanan memilih tawaran dari orakel menggunakan kontrak reputasi. Ia kemudian memuktamadkan perjanjian peringkat perkhidmatan, yang merangkumi parameter pertanyaan dan bilangan orakel yang diperlukan. Ini bermakna pembeli tidak perlu berurusan secara langsung dengan orakel individu. Kontrak pengagregatan mengumpul maklum balas (dikemukakan menggunakan skema percaya-dedah) dari pelbagai orakel, mengira hasil terkumpul di akhir pertanyaan, dan akhirnya memberi hasil kepada nama baik kontrak.

Salah satu cabaran utama dengan pendekatan yang bukan terpusat ialah penggubalan fungsi pengaggregatan. ChainLink mencadangkan mengira tindak balas berwajaran, membolehkan skor yang sah dilaporkan untuk setiap maklum balas orakel. Mengesan markah "tidak sah" di sini adalah kerana tidak cekap, kerana ia bergantung pada tempat bahawa titik data terpencil, yang diukur dengan penyimpangan dari maklumbalas yang diberikan oleh rakan maya, adalah tidak betul. Mengira skor pengesahan berdasarkan tempat maklum balas orakel di antara taburan maklum balas risiko yang menghukum jawapan yang betul dari skor purata. Oleh itu, ChainLink menawarkan satu set piawaian kontrak pengagregatan, tetapi juga membolehkan kontrak pengagregatan tersuai untuk ditentukan.

((("SchellingCoin protocol")))Ilham yang berkaitan adalah protokol SchellingCoin. Di sini, beberapa peserta melaporkan nilai-nilai dan median diambil sebagai jawapan &#x201c;betul&#x201d; Pelapor dikehendaki menyediakan deposit yang diteragihkan untuk nilai-nilai yang lebih dekat dengan median, oleh itu ianya memberikan insentif kepada pelaporan nilai-nilai yang serupa dengan orang lain. Nilai yang sama, yang juga dikenali sebagai titik Schelling, yang mana pemaklumbalas mungkin mempertimbangkan sebagai semulajadi dan sasaran jelas yang mana satukah untuk diselaraskan, yang dijangka mendekati dengan nilai sebenar.

Jason Teutsch dari TrueBit baru-baru ini mencadangkan satu reka bentuk baru ketersediaan data di luar rantaian bukan terpusat. Reka bentuk ini memanfaatkan rantai blok bukti kerja yang berdedikasi yang mampu melaporkan dengan tepat sama ada data berdaftar boleh didapati semasa waktu tertentu. Pelombong cuba memuat turun, menyimpan, dan menyebarkan semua data yang terkini didaftarkan, dengan itu menjamin data tersedia di dalam secara setempat. Walaupun sistem sedemikian adalah mahal dalam erti kata bahawa setiap nod perlombongan menyimpan dan menyebarkan semua data berdaftar, sistem ini membolehkan penyimpanan digunakan semula dengan melepaskan data selepas tempoh pendaftaran berakhir.

[[oracle_client_interfaces_in_solidity_sec]]
=== Antaramuka Klien Orakel dalam Solidity

((("oracles","client interfaces in Solidity", id="ix_11oracles-asciidoc3", range="startofrange")))((("Oraclize", id="ix_11oracles-asciidoc4", range="startofrange")))((("Solidity","oracle client interfaces in", id="ix_11oracles-asciidoc5", range="startofrange")))<<using_oraclize_to_update_the_eth_usd>> adalah contoh Solidity yang membuktikan bagaimana Pengorakel boleh digunakan untuk membuat tinjauan berterusan untuk regu harga ETH/USD dari API dan menyimpan hasilnya dengan cara yang boleh digunakan.

[[using_oraclize_to_update_the_eth_usd]]
Menggunakan Pengorakel untuk mengemas kini kadar pertukaran ETH/USD dari sumber luaran
====
[source,solidity]
----
/*
Pemilihan regu harga ETH/USD memanfaatkan API CryptoCompare

Kontrak ini terus menyimpan regu harga ETH/USD yang dikemas kini,
yang dikemas kini setiap 10 minit.
 */

pragma solidity ^0.4.1;
import "github.com/oraclize/ethereum-api/oraclizeAPI.sol";

/*
   "oraclize_" prepended methods indicate inheritance from "usingOraclize"
 */
contract EthUsdPriceTicker is usingOraclize {

    uint public ethUsd;

    event newOraclizeQuery(string description);
    event newCallbackResult(string result);

    function EthUsdPriceTicker() payable {
        // isyarat penandaan dan penyimpanan bukti TLSN pada IPFS
        oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);

        // permintaan pertanyaan
        queryTicker();
    }

    function __callback(bytes32 _queryId, string _result, bytes _proof) public {
        if (msg.sender != oraclize_cbAddress()) throw;
        newCallbackResult(_result);

        /*
         * Menurunkan hasil rentetan ke integer yang tidak ditandatangani untuk kegunaan rantaian.
         * Menggunakan warisan "parseInt" yang diwarisi dari "usingOraclize", yang membolehkan
  * hasil rentetan (string) seperti "123.45" untuk ditukarkan ke nombor 12345.
         */
        ethUsd = parseInt(_result, 2);

        // dipanggil dari callback kerana kita mengundi harga
        queryTicker();
    }

    function queryTicker() external payable {
        if (oraclize_getPrice("URL") > this.balance) {
            newOraclizeQuery("Oraclize query was NOT sent, please add some ETH
                to cover for the query fee");
        } else {
            newOraclizeQuery("Oraclize query was sent, standing by for the
                answer...");

            // param pertanyaan adalah (kelewatan dalam beberapa saat, jenis sumber data,
            // argumen sumber data)
            // menentukan JSONPath, untuk mengambil bahagian tertentu dari hasil API JSON
            oraclize_query(60 * 10, "URL",
                "json(https://min-api.cryptocompare.com/data/price?\
                fsym=ETH&tsyms=USD,EUR,GBP).USD");
        }
    }
}
----
====

Untuk menyepadukan dengan Pengorakel, kontrak +EthUsdPriceTicker+ mestilah anak kepada kontrak pass:[<span class="keep-together"><code>usingOraclize</code></span>]; +usingOraclize+ ditakrifkan dalam fail _oraclizeAPI_. Permintaan data dibuat menggunakan fungsi +oraclize_query+, yang diwarisi daripada kontrak +usingOraclize+. Ini adalah fungsi lebih muatan yang menjangkakan sekurang-kurangnya dua hujah:

* Sumber data yang disokong untuk digunakan, seperti URL, WolframAlpha, IPFS, atau pengiraan
* Argumen untuk sumber data yang diberikan, yang mungkin termasuk penggunaan pembantu huraian XML atau JSON

Pertanyaan harga dilakukan dalam fungsi +queryTicker+. Untuk melakukan pertanyaan, Pengorakel memerlukan bayaran yuran yang kecil dalam ether, yang meliputi kos gas untuk memproses keputusan dan menghantarnya ke fungsi +pass:[__]callback+ yuran tambahan yang disertakan untuk perkhidmatan tersebut. Jumlah ini bergantung kepada sumber data dan, jika dinyatakan, jenis bukti-ketulenan diperlukan. Sebaik sahaja data telah diambil, +pass:[__]callback+ dipanggil oleh akaun Pengorakel-terkawal yang dibenarkan untuk melakukan panggilan balik; ia melewati nilai tindak balas dan hujahan +queryId + yang bitara, yang, misalnya, boleh digunakan untuk mengendalikan dan menjejaki banyak panggilan balik dari Pengorakel.

((("BlockOne IQ")))Pembekal data kewangan Thomson Reuters juga menyediakan perkhidmatan orakel untuk Ethereum, yang dipanggil BlockOne IQ, yang membolehkan data pasaran dan rujukan diminta oleh kontrak pintar yang dijalankan pada rangkaian peribadi atau yang dibenarkan. <<contract_calling_the_blockone_iq_service_for_market_data>> menunjukkan antara muka untuk orakel, dan kontrak klien yang akan membuat permintaan itu.

[[contract_calling_the_blockone_iq_service_for_market_data]]
.Contract calling the BlockOne IQ service for market data
====
[source,solidity]
----
pragma solidity ^0.4.11;

contract Oracle {
    uint256 public divisor;
    function initRequest(
       uint256 queryType, function(uint256) external onSuccess,
       function(uint256
    ) external onFailure) public returns (uint256 id);
    function addArgumentToRequestUint(uint256 id, bytes32 name, uint256 arg) public;
    function addArgumentToRequestString(uint256 id, bytes32 name, bytes32 arg)
        public;
    function executeRequest(uint256 id) public;
    function getResponseUint(uint256 id, bytes32 name) public constant
        returns(uint256);
    function getResponseString(uint256 id, bytes32 name) public constant
        returns(bytes32);
    function getResponseError(uint256 id) public constant returns(bytes32);
    function deleteResponse(uint256 id) public constant;
}

contract OracleB1IQClient {

    Oracle private oracle;
    event LogError(bytes32 description);

    function OracleB1IQClient(address addr) external payable {
        oracle = Oracle(addr);
        getIntraday("IBM", now);
    }

    function getIntraday(bytes32 ric, uint256 timestamp) public {
        uint256 id = oracle.initRequest(0, this.handleSuccess, this.handleFailure);
        oracle.addArgumentToRequestString(id, "symbol", ric);
        oracle.addArgumentToRequestUint(id, "timestamp", timestamp);
        oracle.executeRequest(id);
    }

    function handleSuccess(uint256 id) public {
        assert(msg.sender == address(oracle));
        bytes32 ric = oracle.getResponseString(id, "symbol");
        uint256 open = oracle.getResponseUint(id, "open");
        uint256 high = oracle.getResponseUint(id, "high");
        uint256 low = oracle.getResponseUint(id, "low");
        uint256 close = oracle.getResponseUint(id, "close");
        uint256 bid = oracle.getResponseUint(id, "bid");
        uint256 ask = oracle.getResponseUint(id, "ask");
        uint256 timestamp = oracle.getResponseUint(id, "timestamp");
        oracle.deleteResponse(id);
        // Do something with the price data
    }

    function handleFailure(uint256 id) public {
        assert(msg.sender == address(oracle));
        bytes32 error = oracle.getResponseError(id);
        oracle.deleteResponse(id);
        emit LogError(error);
    }

}
----
====

Permintaan data dimulakan menggunakan fungsi +initRequest+, yang membolehkan jenis pertanyaan (dalam contoh ini, permintaan untuk harga urusniaga harian) yang dinyatakan, sebagai tambahan kepada dua fungsi panggil balik.
Ini mengembalikan pengenal +uint256+ yang kemudiannya boleh digunakan untuk memberikan hujahan tambahan. Fungsi +addArgumentToRequestString+ digunakan untuk menentukan Kod Instrumen Reuters (RIC), di sini untuk saham IBM dan pass:[<span class="keep-together"><code>addArgumentToRequestUint</code></span>]  membolehkan cap waktu ditetapkan. Sekarang, serahkan dengan tanda alias untuk +block.timestamp+ akan mengambil semula harga semasa untuk IBM. Permintaan tersebut kemudiannya dilaksanakan oleh fungsi +executeRequest+. Setelah permintaan diproses, kontrak orakel akan memanggil fungsi callback +onSuccess+ dengan pengecam pertanyaan, yang membolehkan data yang dihasilkan dapat diambil; dalam peristiwa gagal mendapatkannya, pass:[<span class="keep-together"><code>onFailure</code></span>] mengembalikan kod ralat. Medan yang tersedia yang dapat diperoleh seandainya berjaya adalah +open+, +high+, +low+, +close+ (OHLC), dan +bid+/+ask+ prices. (((range="endofrange", startref="ix_11oracles-asciidoc5")))(((range="endofrange", startref="ix_11oracles-asciidoc4")))(((range="endofrange", startref="ix_11oracles-asciidoc3")))


=== Kesimpulan

Seperti yang anda lihat, orakel memberikan perkhidmatan penting kepada kontrak pintar: ia membawa fakta luaran untuk melaksanakan kontrak. Dengan itu, sudah tentu, risalah juga memperkenalkan risiko yang jelas&#x2014;jika ianya adalah sumber yang dipercayai dan boleh disekutukan, ianya boleh mengakibatkan pelaksanaan sekutu kontrak pintar yang tersuap.

Umumnya, apabila mempertimbangkan penggunaan orakel, berhati-hati mengenai _model kepercayaan_. Jika anda menganggap bahawa orakel itu boleh dipercayai, anda mungkin akan menjejaskan keselamatan kontrak pintar anda dengan mendedahkannya kepada kebarangkalian input palsu. Ini bermaksud, orakel boleh jadi sangat berguna sekiranya andaian keselamatan dipertimbangkan dengan teliti.

Orakel bukan terpusat dapat menyelesaikan beberapa kebimbangan ini dan menawarkan data luaran Ethereum pintar yang tidak percaya data luaran. Pilih dengan berhati-hati dan anda boleh mula menjelajah jambatan antara Ethereum dan "dunia nyata" yang menawarkan orakel.(((range="endofrange", startref="ix_11oracles-asciidoc0")))