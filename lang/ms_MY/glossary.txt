[pendahuluan]
== Glosari Pantas

Glosari cepat ini mengandungi banyak istilah yang digunakan berhubung dengan Ethereum. Istilah-istilah ini digunakan di seluruh buku, jadi bookmark ini untuk rujukan cepat.

Akaun ::
(((&quot;akaun&quot;, &quot;ditakrifkan&quot;))) Objek yang mengandungi alamat, keseimbangan, fail, dan penyimpanan dan kod pilihan. Akaun boleh menjadi akaun kontrak atau akaun luar milik (EOA).

Alamat ::
(((&quot;alamat&quot;, &quot;ditakrifkan&quot;))) Secara umumnya, ini mewakili EOA atau kontrak yang boleh menerima (alamat destinasi) atau menghantar (alamat sumber) urus niaga di blockchain. Lebih khusus lagi, ia adalah 160 bit yang paling baik daripada hash kecik bagi kunci awam ECDSA.

Assert ::
((&quot;fungsi menegaskan&quot;, &quot;ditakrifkan&quot;))) Dalam Ketumpukan, + menegaskan (palsu) + menyusun kepada + 0xfe +, suatu opcode tidak sah, yang menggunakan semua gas yang tinggal dan mengembalikan semua perubahan. Apabila kenyataan + menegaskan () + gagal, sesuatu yang sangat salah dan tidak dijangka berlaku, dan anda perlu menetapkan kod anda. Anda harus menggunakan + menegaskan () + untuk mengelakkan keadaan yang tidak pernah berlaku.

Big-endian ::
(((&quot;besar-endian, ditakrifkan&quot;))) Perwakilan nombor kedudukan di mana digit paling penting adalah yang pertama. Sebaliknya sedikit-endian, di mana angka paling tidak penting adalah yang pertama.

BIPs ::
(((&quot;Cadangan peningkatan Bitcoin (BIP)&quot;))) Cadangan Penambahbaikan Bitcoin. Satu set cadangan bahawa ahli-ahli masyarakat Bitcoin telah mengemukakan untuk meningkatkan Bitcoin. Sebagai contoh, BIP-21 adalah cadangan untuk meningkatkan skim pengecam sumber seragam Bitcoin (URI).

Blok ::
((&quot;blok, ditakrifkan&quot;))) Satu koleksi maklumat yang diperlukan (header header) mengenai transaksi yang terkandung, dan satu set header blok lain yang dikenali sebagai ommers. Blok ditambahkan ke rangkaian Ethereum oleh pelombong.

Blockchain ::
((&quot;blokchain&quot;, &quot;ditakrifkan&quot;))) Di Ethereum, urutan blok yang disahkan oleh sistem bukti kerja, masing-masing menghubungkan kepada pendahulunya sehingga ke blok genesis. Ini berbeza dari protokol Bitcoin kerana ia tidak mempunyai had saiz blok; ia sebaliknya menggunakan pelbagai had gas.

Bytecode ::
(((&quot;bytecode&quot;, seealso = &quot;EVt bytecode&quot;))) Satu set arahan abstrak direka untuk pelaksanaan yang berkesan oleh penterjemah perisian atau mesin maya. Tidak seperti kod sumber manusia yang boleh dibaca, bytecode dinyatakan dalam format angka.

Garpu Byzantium ::
(((&quot;Byzantium fork&quot;))) Yang pertama daripada dua garpu keras untuk tahap pembangunan Metropolis. Ia termasuk EIP-649: Kelewatan Kesukaran Bom Metropolis dan Pengurangan Blok Reward, di mana Zaman Ais (lihat di bawah) ditangguhkan oleh 1 tahun dan ganjaran blok dikurangkan daripada 5 hingga 3 eter.

Penyusun ::
(((&quot;menyusun&quot;, &quot;ditakrifkan&quot;))) Menukar kod yang ditulis dalam bahasa pengaturcaraan peringkat tinggi (contohnya, Pepejal) ke dalam bahasa peringkat rendah (misalnya, bytecode EVM).

Perundingan ::
((&quot;konsensus&quot;, &quot;ditakrifkan&quot;))) Apabila banyak nod-biasanya kebanyakan nod pada rangkaian-semuanya mempunyai blok yang sama dalam blockchain terbaik mereka yang disahkan tempatan. Tidak perlu dikelirukan dengan peraturan konsensus.

Peraturan konsensus ::
(((&quot;peraturan konsensus&quot;))) Peraturan pengesahan blok yang node penuh mengikuti untuk kekal dalam kesepakatan dengan nod lain. Tidak boleh dikelirukan dengan konsensus.

Garpu Constantinople
(((&quot;Garpu Constantinople&quot;))) Bahagian kedua tahap Metropolis, yang pada asalnya dirancang untuk pertengahan 2018. Dijangkakan untuk memasukkan suis kepada algoritma konsensus bukti-kerja / bukti-mengenai hibrid, antara perubahan lain.

Akaun kontrak ::
((&quot;akaun kontrak&quot;, &quot;ditakrifkan&quot;))) ((&quot;kontrak pintar&quot;, &quot;ditakrifkan&quot;))) Akaun yang mengandungi kod yang dilaksanakan setiap kali ia menerima transaksi dari akaun lain (EOA atau kontrak).

Transaksi penciptaan kontrak ::
(&quot;Transaksi penciptaan kontrak&quot;))) Transaksi khas, dengan &quot;alamat sifar&quot; sebagai penerima, digunakan untuk mendaftarkan kontrak dan merekodkannya di blok Ethereum (lihat &quot;alamat sifar&quot;).

DAO ::
(((&quot;DAO (Organisasi Berautonomi yang Dedenralkan)&quot;, &quot;ditakrifkan&quot;))) Organisasi Autonomi yang terdesentralisasi. Sebuah syarikat atau organisasi lain yang beroperasi tanpa pengurusan hierarki. Juga boleh merujuk kepada kontrak yang dinamakan &quot;The DAO&quot; yang dilancarkan pada 30 April 2016, yang kemudiannya digodam pada bulan Jun 2016; ini akhirnya memotivasi garpu keras (kata nama DAO) di blok # 1,192,000, yang membatalkan kontrak DAO yang digodam dan menyebabkan Ethereum dan Ethereum Classic dipecah menjadi dua sistem yang bersaing.

DApp ::
(((&quot;DApps (aplikasi terdesentralisasi)&quot;, &quot;ditakrifkan&quot;))) Permohonan terdesentralisasi. Sekurang-kurangnya, ia adalah kontrak pintar dan antara muka pengguna web. Secara lebih mendalam, DApp adalah aplikasi web yang dibina di atas perkhidmatan infrastruktur terbuka, terdesentralisasi, dan peer-to-peer. Di samping itu, banyak DApps termasuk storan dan / atau protokol mesej dan platform.

Surat Ikatan ::
((&quot;akta&quot;, &quot;ditakrifkan&quot;)) piawaian token tanpa fungible (NFT) yang diperkenalkan oleh cadangan ERC721. Tidak seperti token ERC20, perbuatan membuktikan pemilikan dan tidak boleh ditukar ganti, walaupun mereka tidak diiktiraf sebagai dokumen undang-undang dalam mana-mana bidang kuasa-sekurang-kurangnya tidak pada masa ini (lihat juga &quot;NFT&quot;).

Kesukaran ::
(((&quot;tetapan kesukaran&quot;))) Satu tetapan rangkaian yang mengawal berapa banyak pengiraan diperlukan untuk menghasilkan bukti kerja.

Tandatangan digital::
(&quot;tandatangan digital&quot;, &quot;ditakrifkan&quot;))) Satu rentetan data pengguna menghasilkan dokumen menggunakan kunci persendirian supaya sesiapa yang mempunyai kunci awam yang sama, tandatangan, dan dokumen itu boleh mengesahkan bahawa (1) dokumen itu &quot;ditandatangani&quot; oleh pemilik kunci peribadi tertentu itu, dan (2) dokumen itu tidak diubah selepas ditandatangani.

ECDSA ::
(((&quot;Algoritma Tandatangan Digital Curve Elliptic (ECDSA)&quot;, &quot;ditakrifkan&quot;))) Algoritma Tandatangan Elektik Alur Eliptik. Algoritma kriptografi yang digunakan oleh Ethereum untuk memastikan bahawa dana hanya boleh dibelanjakan oleh pemiliknya.

EIP ::
(((&quot;EIPs (Proposal Penambahbaikan Ethereum)&quot;, &quot;ditakrifkan&quot;))) Cadangan Penambahbaikan Ethereum. Dokumen reka bentuk memberikan maklumat kepada komuniti Ethereum, menerangkan ciri baru yang dicadangkan atau proses atau persekitarannya. Untuk mendapatkan maklumat lanjut, lihat https://github.com/ethereum/EIPs (lihat juga &quot;ERC&quot;).

ENS ::
(((&quot;ENS (Perkhidmatan Nama Ethereum)&quot;))) Perkhidmatan Nama Ethereum. Untuk mendapatkan maklumat lanjut, lihat https://github.com/ethereum/ens/.

Entropy ::
(((&quot;entropi&quot;, &quot;ditakrifkan&quot;))) Dalam konteks kriptografi, kekurangan ramalan atau tahap kekangan. Apabila menjana maklumat rahsia, seperti kunci peribadi, algoritma biasanya bergantung pada sumber entropi yang tinggi untuk memastikan output tidak dapat diramalkan.

EOA ::
(((&quot;EOA (Akaun Luaran Luaran)&quot;, &quot;ditakrifkan&quot;))) Akaun Luaran Luaran. Akaun yang dibuat oleh atau untuk pengguna manusia rangkaian Ethereum.

ERC ::
(((&quot;ERC (Ethereum Request for Comments)&quot;, seealso = &quot;EIPs (Ethereum Improvements Proposals)&quot;))) Ethereum Request for Comments. Label yang diberikan kepada sesetengah EIP yang cuba menentukan standard tertentu penggunaan Ethereum.

Ethash ::
(((&quot;Ethash&quot;))) Algoritma bukti-kerja untuk Ethereum 1.0. Untuk mendapatkan maklumat lanjut, lihat https://github.com/ethereum/wiki/wiki/Ethash.

Ether ::
(((&quot;Ether (cryptocurrency)&quot;))) Kaum cryptocurrency asli yang digunakan oleh ekosistem Ethereum, yang meliputi kos gas semasa melaksanakan kontrak pintar. Simbolnya adalah Îž, watak huruf besar aksara Yunani.

Acara ::
((("events","defined")))Allows the use of EVM logging facilities. DApps can listen for events and use them to trigger JavaScript callbacks in the user interface. For more information, see http://solidity.readthedocs.io/en/develop/contracts.html#events.

EVM::
((("EVM (Ethereum Virtual Machine)","defined")))Ethereum Virtual Machine. A stack-based virtual machine that executes bytecode. In Ethereum, the execution model specifies how the system state is altered given a series of bytecode instructions and a small tuple of environmental data. This is specified through a formal model of a virtual state machine.

EVM assembly language::
((("EVM assembly language")))A human-readable form of EVM bytecode.

Fallback function::
((("fallback function")))A default function called in the absence of data or a declared function name.

Faucet::
((("faucet, defined")))A service that dispenses funds in the form of free test ether that can be used on a testnet.

Finney::
((("finney")))A denomination of ether. 1 finney = 10^15^ wei, 10^3^ finney = 1 ether.

Fork::
((("forks")))A change in protocol causing the creation of an alternative chain, or a temporal divergence in two potential block paths during mining.


Frontier::
((("Frontier")))The initial test development stage of Ethereum, which lasted from July 2015 to March 2016.

Ganache::
((("Ganache","defined")))A personal Ethereum blockchain that you can use to run tests, execute commands, and inspect state while controlling how the chain operates.

Gas::
((("gas","defined")))A virtual fuel used in Ethereum to execute smart contracts. The EVM uses an accounting mechanism to measure the consumption of gas and limit the consumption of computing resources (see "Turing complete").

Gas limit::
((("gas limit")))The maximum amount of gas a transaction or block may consume.

Gavin Wood::
((("Wood, Dr. Gavin")))A British programmer who is the cofounder and former CTO of Ethereum. In August 2014 he proposed Solidity, a contract-oriented programming language for writing smart contracts.

Blok Kejadian ::
((("genesis block")))The first block in a blockchain, used to initialize a particular network and its cryptocurrency.

Geth::
((("Geth (Go-Ethereum)","defined")))Go Ethereum. One of the most prominent implementations of the Ethereum protocol, written in Go.

Hard fork::
((("hard forks")))A permanent divergence in the blockchain; also known as a hard-forking change. One commonly occurs when nonupgraded nodes can't validate blocks created by upgraded nodes that follow newer consensus rules. Not to be confused with a fork, soft fork, software fork, or Git fork.

Hash::
(((&quot;hash, ditakrifkan&quot;))) Satu cap jari panjang tetap bagi input saiz berubah-ubah, yang dihasilkan oleh fungsi hash.

HD wallet::
((("hierarchical deterministic wallets (BIP-32/BIP-44)","defined")))A wallet using the hierarchical deterministic (HD) key creation and transfer protocol (BIP-32).

HD wallet seed::
((("HD wallet seed")))((("seeds", seealso="root seeds")))A value used to generate the master private key and master chain code for an HD wallet. The wallet seed can be represented by mnemonic words, making it easier for humans to copy, back up, and restore private keys.

Homestead::
((("Homestead")))The second development stage of Ethereum, launched in March 2016 at block #1,150,000.

ICAP::
((("ICAP (Inter-exchange Client Address Protocol)")))((("Inter-exchange Client Address Protocol (ICAP)")))Inter-exchange Client Address Protocol. An Ethereum address encoding that is partly compatible with the International Bank Account Number (IBAN) encoding, offering a versatile, checksummed, and interoperable encoding for Ethereum addresses. ICAP addresses use a new IBAN pseudo-country code: XE, standing for "eXtended Ethereum," as used in nonjurisdictional currencies (e.g., XBT, XRP, XCP).

Ice Age::
((("Ice Age")))A hard fork of Ethereum at block #200,000 to introduce an exponential difficulty increase (aka Difficulty Bomb), motivating a transition to proof of stake.

IDE::
((("IDE (Integrated Development Environment)")))((("Integrated Development Environment (IDE)")))Integrated Development Environment. A user interface that typically combines a code editor, compiler, runtime, and debugger.

Immutable deployed code problem::
((("immutable deployed code problem")))Once a contract's (or library's) code is deployed, it becomes immutable. Standard software development practices rely on being able to fix possible bugs and add new features, so this represents a challenge for smart contract development.

Internal transaction (also "message")::
((("internal transaction (message)")))A transaction sent from a contract account to another contract account or an EOA.

IPFS ::
((("IPFS (InterPlanetary File System)")))InterPlanetary File System. A protocol, network, and open source project designed to create a content-addressable, peer-to-peer method of storing and sharing hypermedia in a distributed filesystem.

KDF::
((("key derivation function (KDF)")))Key Derivation Function. Also known as a "password stretching algorithm," it is used by keystore formats to protect against brute-force, dictionary, and rainbow table attacks on passphrase encryption, by repeatedly hashing the passphrase.

Keccak-256::
((("Keccak-256 hash function")))Cryptographic hash function used in Ethereum. Keccak-256 was standardized as SHA-3.

Keystore file::
((("keystore file")))A JSON-encoded file that contains a single (randomly generated) private key, encrypted by a passphrase for extra security.

LevelDB::
((("LevelDB")))An open source on-disk key&#x2013;value store, implemented as a lightweight, single-purpose library, with bindings to many platforms.

Library::
((("library contract")))A special type of contract that has no payable functions, no fallback function, and no data storage. Therefore, it cannot receive or hold ether, or store data. A library serves as previously deployed code that other contracts can call for read-only computation.

Pelanggan ringan ::
((("light/lightweight client")))An Ethereum client that does not store a local copy of the blockchain, or validate blocks and transactions. It offers the functions of a wallet and can create and broadcast transactions.

Merkle Patricia Tree::
((("Merkle Patricia Tree")))A data structure used in Ethereum to efficiently store key&#x2013;value pairs.

Message::
((("message, defined")))An internal transaction that is never serialized and only sent within the EVM.

Message call::
(((&quot;panggilan mesej&quot;))) Tindakan menyampaikan mesej dari satu akaun ke akaun yang lain. Jika akaun destinasi dikaitkan dengan kod EVM, maka VM akan dimulakan dengan keadaan objek tersebut dan mesej itu bertindak
upon.

METoken::
((("METoken (Mastering Ethereum Token)","defined")))Mastering Ethereum Token. An ERC20 token used for demonstration in this book.

Metropolis::
((("Metropolis")))The third development stage of Ethereum, launched in October 2017.


Miner::
((("miners")))A network node that finds valid proof of work for new blocks, by repeated pass:[<span class="keep-together">hashing</span>].

Mist::
((("Mist (browser-based wallet)")))((("wallets","Mist")))The first Ethereum-enabled browser, built by the Ethereum Foundation. It contains a browser-based wallet that was the first implementation of the ERC20 token standard (Fabian Vogelsteller, author of ERC20, was also the main developer of Mist). Mist was also the first wallet to introduce the camelCase checksum (EIP-55; see <<EIP55>>). Mist runs a full node and offers a full DApp browser with support for Swarm-based storage and ENS addresses.

Rangkaian ::
((("networks (Ethereum)","defined")))((("networks (Ethereum)","MetaMask and")))Referring to the Ethereum network, a peer-to-peer network that propagates transactions and blocks to every Ethereum node (network participant).

NFT::
((("nonfungible tokens (NFTs)","defined")))A non-fungible token (also known as a "deed"). This is a token standard introduced by the ERC721 proposal. NFTs can be tracked and traded, but each token is unique and distinct; they are not interchangeable like ERC20 tokens. NFTs can represent ownership of digital or physical assets.

Node::
((("node","defined")))A software client that participates in the network.

Nonce::
((("nonces","defined")))In cryptography, a value that can only be used once. There are two types of nonce used in Ethereum: an account nonce is a transaction counter in each account, which is used to prevent replay attacks; a proof-of-work nonce is the random value in a block that was used to satisfy the proof of work.

Ommer::
((("ommer, defined")))A child block of an ancestor that is not itself an ancestor. When a miner finds a valid block, another miner may have published a competing block which is added to the tip of the blockchain. Unlike with Bitcoin, orphaned blocks in Ethereum can be included by newer blocks as ommers and receive a partial block reward. The term "ommer" is the preferred gender-neutral term for the sibling of a parent block, but this is also sometimes referred to as an "uncle."

Parity::
((("Parity","defined")))One of the most prominent interoperable implementations of the Ethereum client software.

Private key::
See &#x201c;secret key.&#x201d;

Bukti kepentingan (PoS) ::
((("proof of stake (PoS)","defined")))A method by which a cryptocurrency blockchain protocol aims to achieve distributed consensus. PoS asks users to prove ownership of a certain amount of cryptocurrency (their "stake" in the network) in order to be able to participate in the validation of transactions.

Proof of work (PoW)::
((("proof of work (PoW)","defined")))A piece of data (the proof) that requires significant computation to find. In Ethereum, miners must find a numeric solution to the Ethash algorithm that meets a network-wide difficulty target.

Public key::
((("public keys","defined")))A number, derived via a one-way function from a private key, which can be shared publicly and used by anyone to verify a digital signature made with the corresponding private key.

Receipt::
((("receipt, defined")))Data returned by an Ethereum client to represent the result of a particular transaction, including a hash of the transaction, its block number, the amount of gas used, and, in case of deployment of a smart contract, the address of the contract.

Re-entrancy attack::
((("reentrancy attacks","defined")))An attack that consists of an attacker contract calling a victim contract function in such a way that during execution the victim calls the attacker contract again, recursively. This can result, for example, in the theft of funds by skipping parts of the victim contract that update balances or count withdrawal amounts.

Reward::
((&quot;ganjaran, ditakrifkan&quot;))) Sejumlah eter termasuk dalam setiap blok baru sebagai ganjaran oleh rangkaian kepada pelombong yang mendapati penyelesaian bukti kerja.

RLP::
((("Recursive Length Prefix (RLP)")))((("RLP (Recursive Length Prefix)")))Recursive Length Prefix. An encoding standard designed by the Ethereum developers to encode and serialize objects (data structures) of arbitrary complexity and length.

Satoshi Nakamoto::
((("Satoshi Nakamoto")))The name used by the person or people who designed Bitcoin, created its original reference implementation, and were the first to solve the double-spend problem for digital currency. Their real identity remains unknown.

Secret key (aka private key)::
((("private keys","defined")))((("secret keys", seealso="private keys")))The secret number that allows Ethereum users to prove ownership of an account or contracts, by producing a digital signature (see &#x201c;public key,&#x201d; &#x201c;address,&#x201d; &#x201c;ECDSA&#x201d;).

Serenity::
((("Serenity")))The fourth and final development stage of Ethereum. Serenity does not yet have a planned release date.

Serpent::
((("Serpent")))A procedural (imperative) smart contract programming language with syntax similar to Python.

SHA::
((("SHA (Secure Hash Algorithm)")))Secure Hash Algorithm. A family of cryptographic hash functions published by the National Institute of Standards and Technology (NIST).

Singleton ::
((("singleton")))A computer programming term that describes an object of which only a single instance can exist.

Smart contract::
(((&quot;kontrak pintar&quot;, &quot;ditakrifkan&quot;))) Satu program yang melaksanakan infrastruktur pengkomputeran Ethereum.

Solidity::
((("Solidity","defined")))A procedural (imperative) programming language with syntax that is similar to JavaScript, C++, or Java. The most popular and most frequently used language for Ethereum smart contracts. Created by Dr. Gavin Wood (coauthor of this book).

Solidity inline assembly::
((("inline assembly","defined")))((("Solidity inline assembly")))EVM assembly language in a Solidity program. Solidity's support for inline assembly makes it easier to write certain operations.

Spurious Dragon::
((("Spurious Dragon")))A hard fork of the Ethereum blockchain, which occurred at block #2,675,000 to address more denial-of-service attack vectors and clear state (see also "Tangerine Whistle"). Also, a replay attack protection mechanism.

Swarm::
((("Swarm","defined")))A decentralized (P2P) storage network, used along with Web3 and Whisper to build DApps.

Szabo::
((("szabo, defined")))A denomination of ether. 1 szabo = 10^12^ wei, 10^6^ szabo = 1 ether.

Tangerine Whistle::
((("Tangerine Whistle")))A hard fork of the Ethereum blockchain, which occurred at block #2,463,000 to change the gas calculation for certain I/O-intensive operations and to clear the accumulated state from a denial-of-service attack, which exploited the low gas cost of those operations.

Testnet::
((("testnet","defined")))Short for "test network," a network used to simulate the behavior of the main Ethereum network.

Transaction::
((("transactions","defined")))Data committed to the Ethereum Blockchain signed by an originating account, targeting a specific address. The transaction contains metadata such as the gas limit for that transaction.

Truffle::
((("Truffle","defined")))One of the most commonly used Ethereum development frameworks.

Turing complete::
((("Turing completeness","defined")))A concept named after English mathematician and computer scientist Alan Turing: a system of data-manipulation rules (such as a computer's instruction set, a programming language, or a cellular automaton) is said to be "Turing complete" or "computationally universal" if it can be used to simulate any Turing machine.

Vitalik Buterin::
((("Buterin, Vitalik")))A Russianâ€“Canadian programmer and writer primarily known as the cofounder of Ethereum and of _Bitcoin Magazine_.

Vyper::
((("Vyper","defined")))A high-level programming language, similar to Serpent, with Python-like syntax. Intended to get closer to a pure functional language. Created by Vitalik Buterin.

Wallet::
((("wallets","defined")))Software that holds secret keys. Used to access and control Ethereum accounts and interact with smart contracts. Keys need not be stored in a wallet, and can instead be retrieved from offline storage (e.g., a memory card or paper) for improved security. Despite the name, wallets never store the actual coins or tokens.

Web3::
((("web3", seealso="DApps")))The third version of the web. First proposed by Dr. Gavin Wood, Web3 represents a new vision and focus for web applications: from centrally owned and managed applications, to applications built on decentralized protocols.

Wei::
((("wei, defined")))The smallest denomination of ether. 10^18^ wei = 1 ether.

Whisper::
((("Whisper")))A decentralized (P2P) messaging service. It is used along with Web3 and Swarm to build DApps.

Zero address::
((("zero address","defined")))A special Ethereum address, composed entirely of zeros, that is specified as the destination address of a contract creation transaction.