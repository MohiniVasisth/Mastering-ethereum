[role="pagenumrestart"]
[[whatis_chapter]]
Apa Itu Ethereum?

((("Ethereum (generally)","about", id="ix_01what-is-asciidoc0", range="startofrange")))Ethereum ((("world computer, Ethereum as")))sering dianggap sebagai "dunia komputer.&#x201d;  Persoalannya, apakah maksud yang sebenar? Jom kita mulakan dari sudut sains komputer dan mentafsirkannya dengan mencerakin sifat dan analisa kemampuan Ethereum, dalam masa yang sama kita membandingkan dengan Bitcoin serta maklumat platform pengurup bukan terpusat (atau singkatannya rantai blok).

Dari sudut pemerhatian sains komputer, Ethereum adalah penentuan tetapi sebetulnya adalah tingkahlaku mesin tanpa kawalan, terdiri dari tingkahlaku menyendiri yang boleh diakses serata dunia dan juga mesin maya  yang membuat perubahan pada tingkahlaku itu.

Dari sudut pandangan lebih cerakin, Ethereum adalah sumber terbuka, rangka asas pengiraan bukan terpusat sepenuhnya yang melaksanakan pengaturcaraan yang digelar _kontrak pintar_. Ia menggunakan rantai blok untuk tujuan penyelarasan dan menyimpan segala perubahan tingkahlaku kelompok, bersama dengan matawang kripto iaitu _ether_ untuk menyukat dan desakan pelaksanaan sumber perbelanjaan.

Platform Ethereum membolehkan pembangun aplikasi untuk membina aplikasi bukan terpusat yang mantap dengan fungsi ekonomi terbina dalaman. Selain memberikan keupayaan dalam hal keberadaan, audit, telus dan berkecuali, ia juga mengurangkan atau menghapuskan sekatan dan mengurangkan sebahagian risiko rakan niaga.

[[bitcoin_comparison]]
=== Membandingkan dengan Bitcoin

((("Bitcoin","Ethereum compared to")))((("Ethereum (generally)","Bitcoin compared to")))Ramai orang akan sedar bahawa Ethereum hampir sama dengan matawang kripto yang lain, secara khususnya Bitcoin. Ethereum berkongsi unsur yang sama dalam rantai blok terbuka yang lain: iaitu menghubungkan rangkaian sesama rakan maya yang terlibat, mengatasi kelemahan&#x2013; kesepakatan algoritma Bizantium bagi tujuan penyelarasan tingkahlaku terkini (rantai blok bukti kerja) , menggunakan grafik kripto asli seperti tandatangan digital dan cincangan, dan ia juga matawang digital (ether).

Seringkali, penggunaan dan pembinaan Ethereum adalah ketara perbezaannya dengan rantai blok terbuka yang terdahulu sebelum kewujudannya, termasuklah Bitcoin.

((("Ethereum (generally)","purpose of")))Kegunaan Ethereum bukanlah diutamakan sebagai rangkaian pembayaran matawang digital. ((("utility currency, ether as")))Walaupun matawang digital ether mustahak dan penting dalam gerakan Ethereum, ether hanyalah matawang utiliti yang digunakan untuk pembayaran di platform Ethereum dalam dunia komputernya.

Tidak seperti Bitcoin, yang amat terhad bahasa tulisan bingkainya (skrip), Ethereum direkabentuk boleh diaturcara rantai bloknya kepada kepelbagaian guna yang berjalan dengan mesin _mesin maya_ yang mampu menyempurnakan kod rambang dan kerumitan luar kawalan. Bahasa skrip Bitcoin pula, dengan jelas, menyelesaikan penilaian benar/salah yang ringkas bagi syarat perbelanjaan. Bahasa Ethereum pula _dipermudahkan sepenuhnya_, iaitu Ethereum mampu terus berfungsi sebagai kegunaan am komputer.

[[blockchain_components]]
=== Bahagian-bahagian Rantai Blok

((("blockchain","components of")))((("Ethereum (generally)","blockchain components")))Bahagian-bahagian keterbukaan, rantai blok umum adalah (kebiasaannya):

* Rangkaian sesama rakan maya (P2P) yang menghubungkan peserta serta menyiarkan urusniaga dan blok urus niaga yang telah disahkan, berdasarkan "gosip" pass:[<span class="keep-together">protocol</span>]
* Wakalah, dalam bentuk urusniaga, mewakili perubahan kelakuan
* Sebuah peraturan kesepakatan, mentadbir apa sahaja bentuk urusniaga dan apa penyebab perubahan dalam pengesahan tingkah laku
* Sebuah jentera tingkah laku yang menghasilkan urusniaga bergantung kepada peraturan-peraturan kesepakatan
* Rantai kripto grafik dengan blok yang terjamin, bertindak sebagai pencatat bagi semua pengesahan dan penerimaan setiap perubahan tingkah laku
* Algoritma kesepakatan yang bukan terpusat yang mengawal keseluruhan rantai blok, dengan memaksa semua peserta agar bekerjasama dalam satu gerakan peraturan yang disepakati 
* Rancangan ganjaran seakan-akan permainan (contohnya. perbelanjaan bagi bukti kerja dan ganjaran setiap blok)  bagi jaminan berjaya memperoleh secara sepenuhnya dari tingkah laku jentera dalam keterbukaan pass:[<span class="keep-together">environment</span>]
* Satu atau lebih lagi perlaksanaan perisian sumber terbuka di atas ("klien")

Kebanyakan komponen ini biasanya digabungkan dalam klien perisian tunggal. Sebagai contoh, dalam (("Bitcoin Core")))((("bitcoind client")))Bitcoin, pelaksanaan rujukan dibangunkan oleh projek sumber terbuka _Bitcoin Core_ dan diterapkan sebagai klien _bitcoind_. Di Ethereum, berbanding rujukan pelaksanaan, terdapat juga ((("reference specification")))rujukan _khusus_, yang dihuraikan secara matematik sistem dalam Kertas Kuning (see <<references>>). Terdapat beberapa klien yang dibina mengikut rujukan tertentu.

Pada masa lalu, kita menggunakan istilah "rantai blok" untuk mewakili semua komponen yang disenaraikan, sebagai rujukan ringkas kepada gabungan teknologi yang merangkumi semua ciri yang diterangkan. Walau bagaimanapun, hari ini terdapat pelbagai blok utama dengan ciri-ciri yang berbeza. Kita memerlukan pengesah untuk membantu kita agar memahami ciri-ciri rantai blok yang dipersoalkan, seperti _keterbukaan, umum, global, bukan terpusat, berkecuali, _ dan _bebas sekatan_, untuk mengenal pasti ciri-ciri penting penting sistem "rantai blok" yang komponen-komponen ini mengizinkannya.

Tidak semua blok dicipta sama. Apabila seseorang memberitahu anda bahawa itu adalah rantai blok, anda tidak menerima jawapannya; Sebaliknya, anda perlu mula mengajukan banyak soalan untuk menjelaskan apa yang mereka maksudkan ketika menggunakan perkataan "rantai blok". Mulakan dengan meminta penjelasan mengenai komponen-komponen dalam senarai terdahulu, kemudian tanya sama ada "rantai blok" ini mempamerkan ciri-ciri menjadi _keterbnukaan, umum_, dan sebagainya.

[[ethereum_birth]]
=== Lahirnya Ethereum

((("Ethereum (generally)","birth of")))Semua pembaharuan yang hebat sering menyelesaikan masalah sebenar, dan Ethereum tidak terkecuali. Ethereum lahir tatkala manusia mengiktiraf kuasa model Bitcoin, dan cuba untuk bergerak di luar aplikasi matawang kripto. Tetapi pembangun menghadapi satu teka-teki: sama ada mereka perlu membangunkan bersama di atas Bitcoin itu sendiri atau memulakan rantai blok baharu. ((("Bitcoin","limitations of")))Bergantungan kepada Bitcoin bermakna terus tinggal di dalam keterbatasan guna rangkaian dan terus kekal mencari jalan penyelesaian. Set urusniaga yang terhad, jenis data, dan saiz penyimpanan data seolah-olah mengehadkan jenis aplikasi yang boleh dijalankan secara langsung pada Bitcoin; Apa sahaja pasti memerlukan sesuatu lapisan luar rantaian tambahan, dan dengan serta-merta ia menafikan banyak kelebihan menggunakan rantai blok awam. Untuk projek yang memerlukan lebih banyak kebebasan dan kelenturan tetapi pada masa yang sama terus berada di dalam rangkaian, pembinaan satu blok baharu adalah satu-satunya pilihan yang ada. Tetapi itu bermakna akan timbul banyak kerja: memulakan semula dari awal semua unsur-unsur infrastruktur, ujian menyeluruh, dan lain-lain lagi.

((("Buterin, Vitalik","and birth of Ethereum")))Menjelang akhir tahun 2013, Vitalik Buterin, seorang pengaturcara muda dan peminat Bitcoin, mula berfikir tentang meluaskan keupayaan Bitcoin dan Mastercoin (lapisan protokol Bitcoin yang diperluaskan bagi menawarkan asas kontrak pintar). Pada bulan Oktober tahun itu, Vitalik mencadangkan pendekatan yang lebih umum kepada pasukan Mastercoin, salah satunya ialah membolehkan kontrak fleksibel dan boleh ditulis (tetapi bukan Turing-sempurna) untuk menggantikan bahasa kontrak khusus Mastercoin. Walaupun pasukan Mastercoin kagum dengan cadangan ini, ianya terlalu radikal untuk dimuatkan dalam pelan pembangunan mereka.

Pada bulan Disember 2013, Vitalik mula berkongsi sebuah Kertas Putih yang menggariskan idea di sebalik Ethereum: sebuah Turing yang menyeluruh., kegunaan am rantai blok Beberapa orang telah membaca deraf awal ini dan menawarkan maklum balas, membantu Vitalik mengembangkan cadangan itu.

Kedua-dua pengarang buku ini menerima deraf awal Kertas Putih itu dan memberi komen mengenainya. Andreas M. Antonopoulos tertarik dengan idea itu dan membuat banyak pertanyaan kepada Vitalik mengenai penggunaan rantai blok yang berasingan untuk menguatkuasakan peraturan kesepakatan mengenai pelaksanaan kontrak pintar dan implikasi dari bahasa Turing-sempurna. Andreas terus mengikuti kemajuan Ethereum dengan minat yang besar tetapi ketika itu beliau berada di peringkat awal menulis bukunya _Mastering Bitcoin_, dan tidak dapat mengambil bahagian secara langsung dalam Ethereum sehingga habis. ((("Wood, Dr. Gavin","and birth of Ethereum")))Dr. Gavin Wood bagaimanapun, adalah salah seorang daripada orang pertama yang mendekati Vitalik dan menawarkan untuk membantu dengan kemahiran pengaturcaraan C ++ beliau. Gavin menjadi pengasas bersama Ethereum, Pereka Kod, dan Ketua Pegawai Teknikal.

Sebagaimana yang diceritakan oleh Vitalik di dalam http://bit.ly/2T2t6zs["Ethereum Prehistory" post]: 

____
Ini adalah masa apabila protokol Ethereum telah sepenuhnya menjadi ciptaan saya sendiri. Bermula dari sini, peserta baharu mula menyertai kumpulan ini. Setakat ini yang paling menonjol di bahagian protokolnya ialah Gavin Wood..

Gavin juga diberikan penghargaan yang tinggi kerana membuat perubahan halus dalam gambaran awal dengan melihat Ethereum sebagai platform untuk membina wang boleh diprogramkan, dengan kontrak berasaskan rantai blok yang boleh memegang aset digital dan memindahkannya mengikut peraturan yang telah ditetapkan, kepada tujuan umum platform pengiraan. Ini bermula dengan perubahan halus dalam penekanan dan terminologi, dan kemudian pengaruh ini semakin kuat dengan penekanan yang semakin meningkat pada peralatan "Web 3", yang menyaksikan Ethereum sebagai satu set teknologi bukan terpusat, dua yang lain adalah Whisper dan Swarm.
____

Bermula pada bulan Disember 2013, Vitalik dan Gavin menyempurnakan dan mengubah idea itu, bersama-sama membina lapisan protokol yang menjadi Ethereum.

Pengasas Ethereum telah memikirkan tentang sebuah blok tanpa kegunaan tertentu, yang boleh menyokong pelbagai aplikasi dengan menjadi _terprogram_. Idea tersebut adalah dengan menggunakan rantai blok umum seperti Ethereum, seorang pembangun boleh memprogramkan aplikasi tertentu tanpa perlu melaksanakan mekanisme asas rangkaian sesama rakan maya (p2p), rantai blok, algoritma kesepakatan, dan sebagainya. Platform Ethereum direka untuk meringkaskan butir-butir ini dan menyediakan persekitaran pengaturcaraan yang termaktub dan selamat untuk aplikasi rantai blok yang bukan terpusat.

Sama seperti Satoshi, Vitalik dan Gavin tidak hanya mencipta teknologi baru; mereka menggabungkan ciptaan baru dengan teknologi sedia ada dengan cara yang baru dan menyampaikan kod contoh pertama untuk membuktikan idea mereka kepada dunia.

Vitalik bekerja selama bertahun-tahun, membina dan menyempurnakan wawasan itu. Dan pada 30 Julai 2015, blok Ethereum pertama dilombong. Komputer di dunia mula berkhidmat untuk dunia.

[NOTA]
====
Artikel Vitalik Buterin "A Prehistory of Ethereum" diterbitkan pada bulan September 2017 dan membuatkan pandangan orang pertama kagum tentang Ethereum.

Boleh dibaca di
https://vitalik.ca/general/2017/09/14/prehistory.html[].
====

[[tahap_kemajuan]]
=== Empat Peringkat Pembangunan Ethereum

((("Ethereum (generally)","four stages of development")))Pembangunan Ethereum dirancang lebih dari empat peringkat yang berbeza, dengan perubahan besar yang berlaku pada setiap peringkat. ((("hard forks", seealso="DAO; other specific hard forks, e.g.: Spurious Dragon")))Tahap itu antaranya termasuk pembantu terbitan, yang dikenali sebagai garpu keras atau "hard fork" yang mengubah fungsinya dengan cara yang tidak serasi ke belakang.

Empat tahap pembangunan utama diberi nama _Frontier_, _Homestead_, _Metropolis_, dan _Serenity_. Perantaraan "Fork"  keras yang telah berlaku (atau dirancang) setakat ini ialah kod yang dinamakan _Ice Age_, _DAO_, _Tangerine Whistle_, _Spurious Dragon_, _Byzantium_, dan _Constantinople_. Kedua-dua peringkat pembangunan dan perantaraan "fork" keras telah ditunjukkan pada garis masa berikut, yang "bertarikh" oleh nombor blok:


Block #0:: ((("Frontier")))__Sempadan__&#x2014;Langkah pertamaa Ethereum, bermula pada 30 Julai 2015, hingga Mac 2016. 

Blok #200,000:: ((("Ice Age")))__Zaman Ais__&#x2014;Sebuah "fork" keras diperkenalkan bagi peningkatan kesukaran eksponen, untuk memotivasi peralihan ke PoS apabila telah bersedia.

Blok #1,150,000:: ((("Homestead")))__Kampung__&#x2014;Peringkat kedua Ethereum, dilancarkan pada bulan Mac 2016.

Blok #1,192,000:: ((("DAO (Decentralized Autonomous Organization)")))__DAO__&#x2014;Sebuah "fork" keras yang that memberi pampasan kepada mangsa penggodam kontrak DAO dan menyebabkan Ethereum dan Ethereum Classic terpisah menjadi dua dan bersaingan.

Blok #2,463,000:: ((("Tangerine Whistle")))__Siulan Limau__&#x2014;Sebuah "fork" keras yang mengubah pengiraan gas pada sebahagian operasi input dan output dan untuk menghapuskan tingkahlaku terkumpul daripada serangan khidmat-penafian (DoS) yang mengeksploitasi kos gas rendah sepanjang operasi tersebut.

Blok #2,675,000:: ((("Spurious Dragon")))__Naga Palsu__&#x2014;Sebuah "fork" keras bagi mengenalpasti lebih banyak vektor serangan DOS, dan penjelasan tingkah laku yang lain. Juga, mekanisme perlindungan serangan berulang.


Blok #4,370,000:: ((("Metropolis")))((("Byzantium fork")))__Metropolis Bizantium__&#x2014;Metropolis adalah peringkat ketiga Ethereum, semasa buku ini ditulis, dilterbitkan pada bulan Oktober 2017. Bizantium merupakan satu dari dua fork keras yang dirancangkan untuk Metropolis.


Selepas Bizantium, ada satu lagi fork keras dirancangkan untuk Metropolis: ((("Constantinople fork")))((("Serenity")))Konstatinopel. Metropolis bakal menyusul pada peringkaty akhir pelancaran Ethereum, kod nama adalah Serenity.


[[general_purpose_blockchain]]
=== Ethereum: Kegunaan Am Rantai Blok

((("Bitcoin","Ethereum blockchain compared to Bitcoin blockchain")))((("Ethereum (generally)","as general-purpose blockchain")))Rantai blok asal, iaitu rantai blok Bitcoin, menjejaki tingkah laku unit bitcoin dan pemilik mereka.  ((("distributed state machine, Ethereum as")))Anda boleh anggap Bitcoin sebagai kesepakatan teragih _tingkah laku jentera_, di mana transaksi menyebabkan peralihan _tingkah laku global_, mengubah pemilikan "koin". Perubahan tingkah laku dikekang oleh peraturan-peraturan kesepakatan, yang membolehkan semua peserta (akhirnya) berkumpul pada keadaan tingkah laku sistem kembali seperti biasa (konsensus) setelah beberapa blok dilombong.

Ethereum juga merupakan mesin tingkah laku teragih. Bukan sekadar menjejaki pemilikan matawang, ((("key-value tuple")))Ethereum menjejaki peralihan keadaan storan data bagi tujuan umum, iaitu, stor yang boleh memegang sebarang data yang boleh diungkapkan sebagai _kunci- nilai struktur data_. Kunci nilai stor data memegang nilai secara rambang, masing-masing dirujuk oleh beberapa kunci; contohnya, nilai "Mastering Ethereum" adalah merujuk kepada "Tajuk Buku". Dalam beberapa cara, ini memberi maksud yang sama seperti model simpanan data _Memori Akses Rawak_ (RAM) yang digunakan oleh kebanyakan komputer bagi tujuan umum. Ethereum mempunyai memori yang menyimpan kedua-dua kod dan data, dan ia menggunakan rantai blok Ethereum untuk mengesan bagaimana memori ini berubah dari masa ke masa. Seperti komputer yang direka khas untuk program komputer, Ethereum boleh memuatkan kod ke dalam mesin tingkah laku dan _menjalankan_ kod itu, menyimpan perubahan keadaan yang terhasil dalam rantai bloknya. Dua daripada perbezaan ketara dari kebanyakan komputer kegunaan am adalah perubahan keadaan Ethereum ditadbir oleh peraturan kesepakatan dan tingkahlakunya teragih secara global. Ethereum menjawab soalannya: "Bagaimanakah jika kita boleh mengesan mana-mana tingkah laku secara rambang dan memprogram mesin gelagat itu untuk mencipta operasi komputer di seluruh dunia di bawah satu perikatan?"

[[ethereum_components]]
=== Bahagian-bahagian Ethereum

((("blockchain","components of")))((("Ethereum (generally)","blockchain components")))DalamEthereum, pembahagian rantai blok dihuraikan seperti di <<blockchain_components>> dan secara jelasnya:


Rangkaian P2P:: Ethereum bekerja di dalam _rangkaian utama Ethereum_, yang boleh dialamatkan dengan TCP port 30303, and dan digerakkan dengan protokol _ÐΞVp2p_.

Peraturan Kesepakatan:: Peraturan Kesepakatan Ethereum dihuraikan dengan lebih jelas di dalam Kertas Kuning (lihat <<references>>).

Transaksi:: Transaksi Ethereum adalah mesej rangkaian yang termasuk (antaranya) penghantar, penerima, nilai, dan muatan data.

[role="pagebreak-before"]
Mesin Tingkahlaku:: Perubahan tingkahlaku Ethereum diproses oleh _Mesin Maya Ethereum_ (EVM), yakni sebuah mesin maya berasaskan longgokan saham yang menjalankan _kod bait_ (arahan bahasa mesin). Program EVM, yang dikenali sebagai "kontrak pintar," ditulis dalam bahasa peringkat tinggi (contohnya, Kepejalan) dan disusun dengan kod bait untuk pelaksanaan EVM.

Struktur data:: Tingkahlaku Ethereum disimpan secara setempat pada setiap nod sebagai _pengkalan data_ (biasanya LevelDB Google), yang mengandungi transaksi dan keadaan sistem dalam struktur data tercincang (hash) bersiri yang dipanggil _Pohon Merkle Patricia_.

Kesepakatan Algoritma:: Ethereum menggunakan model kesepakatan Bitcoin, yakni Kesepakatan Nakamoto, yang menggunakan blok bertanda tunggal berturut-turut, yang diberi nilai kepentingan oleh PoW untuk menentukan rantai terpanjang dan oleh  keadaan semasa. Walau bagaimanapun, terdapat rancangan untuk berpindah ke sistem pengundian berwajaran PoS, yang diberi nama _Casper_, dalam masa terdekat.

Keselamatan ekonomi:: Ethereum kini menggunakan algoritma PoW yang dipanggil _Ethash_, tetapi ini akhirnya akan digugurkan dengan  PoS pada suatu hari nanti.

Klien:: Ethereum mempunyai beberapa perisian saling boleh bekerja antara klien, yang paling menonjol adalah _Go-Ethereum_ (_Geth_) dan _Parity_.

[[references]]
==== Bacaan lanjut

Rujukan seterusnya bagi memberikan maklumat tambahan mengenai teknologi yang disebutkan di sini:

* The Ethereum Yellow Paper:
https://ethereum.github.io/yellowpaper/paper.pdf

* The Beige Paper, a rewrite of the Yellow Paper for a broader audience in less formal language:
https://github.com/chronaeon/beigepaper

* ÐΞVp2p network protocol:
http://bit.ly/2quAlTE

* Ethereum Virtual Machine list of resources:
http://bit.ly/2PmtjiS

* LevelDB database (used most often to store the local copy of the blockchain):
https://github.com/google/leveldb

* Pepohon Merkle Patricia:
https://github.com/ethereum/wiki/wiki/Patricia-Tree

* Algoritma PoW Ethash:
https://github.com/ethereum/wiki/wiki/Ethash

* Panduan Pelaksanaan Casper PoS v1:
http://bit.ly/2DyPr3l

* Go-Ethereum (Geth) client:
https://geth.ethereum.org/

* Klien Persamaan Ethereum:
https://parity.io/

[[turing_completeness]]
=== Ethereum dan Kesempurnaan Turing

((("Ethereum (generally)","Turing completeness and")))((("Turing completeness","Ethereum and")))Sebaik sahaja anda mula membaca tentang Ethereum, anda akan segera menemui istilah "Turing lengkap." Mereka pun berkata, Ethereum tidak seperti Bitcoin, ianya Turing lengkap. Apa sebenarnya maksudnya?

((("Turing, Alan")))Istilah ini merujuk kepada ahli matematik Inggeris, Alan Turing, yang dianggap sebagai bapa sains komputer. Pada tahun 1936, beliau mencipta model matematik komputer yang terdiri daripada mesin tingkah laku yang memanipulasi simbol dengan membaca dan menulisnya pada memori berurut (menyerupai pelekat pita kertas disambung-sambungkan tanpa penhujungnya). Dengan pembinaan ini, Turing terus menyediakan asas matematik untuk menjawab (dalam soalan-soalan negatif) mengenai kebolehan pengiraan _yang universal, yang bermaksud semua masalah dapat diselesaikan. Dia membuktikan bahawa ada kelas masalah yang sukar untuk dibuat pengiraan. ((("halting problem")))Secara khusus, beliau membuktikan bahawa _masalah teragak-agak_ (sama ada mungkin, diberikan program sewenang-wenang dan inputnya, untuk menentukan sama ada program itu akhirnya akan berhenti berjalan) tidak dapat diselesaikan.

((("Universal Turing machine (UTM)")))((("UTM (Universal Turing machine)")))Alan Turing kemudiannya didefinisikan sebagai sistem untuk menjadi _Turing lengkap_ jika ia boleh digunakan untuk meniru mana-mana mesin Turing. Sistem sedemikian dinamakan  _Mesin Turing Universal_ (UTM).

Keupayaan Ethereum untuk melaksanakan program yang disimpan, dalam mesin tingkah laku yang dipanggil Mesin Maya Ethereum, sambil membaca dan menulis data ke memori menjadikannya  ia sistem Turing-lengkap dan seterusnya UTM. Ethereum boleh mengira sebarang algoritma yang boleh dikira oleh mana-mana mesin Turing, memandangkan batasan memori tidak terhingga.

Inovasi terunggul Ethereum adalah untuk menggabungkan seni bina pengkomputeran kegunaan am komputer yang terprogram dengan rantaian blok tidak terpusat, dengan itu wujudlah komputer dunia dengan tingkah laku tunggal (singleton) yang teragih. Program Ethereum dijalankan "di mana-mana," namun menghasilkan keadaan biasa yang dijamin dengan peraturan kelulusan:[<span class="keep-together">consensus</span>].

[[turing_completeness_feature]]
==== Kesempurnaan Turing sebagai "Ciri"

((("Turing completeness","as feature")))Apabila mengetahui bahawa Ethereum adalah Turing lengkap, anda mungkin sampai pada kesimpulan bahawa ini adalah _cirinya_ yang entah bagaimana kekurangan dalam sistem yang Turingnya tidak lengkap. Lebih tepatnya, ia adalah sebaliknya. Kesempurnaan Turing sangat mudah dicapai; Sebenarnya, http://bit.ly/2ABft33[the simplest Turing-complete state machine known] mempunyai 4 gelagat dan menggunakan 6 simbol, dengan definisi keadaan yang hanya 22 arahan panjang. Sesungguhnya, kadang-kadang sistem didapati "secara tidak sengaja Turing lengkap" Rujukan menarik mengenai sistem sedemikian boleh didapati di  http://bit.ly/2Og1VgX[].

Bagaimanapun, kesempurnaan Turing sangat berbahaya, terutamanya dalam sistem akses terbuka seperti rantai blok awam, kerana masalah yang telah kita hadapi sebelumnya. Sebagai contoh, mesin pencetak moden adalah Turing lengkap dan boleh diberikan fail untuk mencetak yang menghantarnya ke dalam bentuk beku. Fakta bahawa Ethereum adalah Turing lengkap bermakna bahawa mana-mana program dengan sebarang kerumitan adalah boleh dikira oleh Ethereum. Tetapi keboleh-lenturan ini membawa beberapa masalah seperti keselamatan tergugat dan masalah sumber pengurusan. Pencetak kertas tadi yang tidak bertindak balas boleh dimatikan dan dihidupkan semula. Ini tidak mustahil akan berlaku terhadap rantai blok awam.

[[turing_completeness_implications]]
==== Kesan Dari Kesempurnaan Turing

((("Turing completeness","implications of")))Prinsip Turing telah membuktikan bahawa anda tidak boleh meramalkan sama ada program akan ditamatkan dengan cara dibuat-buat pada komputer. Secara ringkas, kita tidak dapat meramalkan laluan sesuatu program tanpa menjalankannya. ((("infinite loops"))Sistem turing-lengkap boleh berjalan dalam "keluk tak terbatas," istilah yang digunakan (dalam memudah-mudahkannya) untuk menggambarkan program yang tidak ditamatkan. Mencipta satu program yang menjalankan keluk yang tidak pernah berakhir adalah tidak penting. Tetapi keluk yang tak berkesudahan dan yang tidak diingini ini boleh timbul tanpa amaran, kerana tindak balas yang rumit antara keadaan permulaan dan kod. Dalam Ethereum, ianya sebuah cabaran: setiap peserta nod (klien) mestilah mengesahkan setiap transaksi, menjalankan apa-apa kontrak pintar bila diminta. Tetapi sebagai bukti Turing, Ethereum tidak dapat meramalkan jika kontrak pintar akan ditamatkan, atau berapa lamakah ia akan berjalan, tanpa benar-benar menjalankannya (mungkin berjalan selama-lamanya). Sama ada secara tidak sengaja atau dengan bertujuan, kontrak pintar boleh dibuat sedemikian rupa sehingga ia berjalan selama-lamanya apabila nod cuba untuk mengesahkannya. Ini adalah serangan DoS paling terkesan. Sudah tentu, antara satu program yang mengambil satu milisaat untuk mengesahkan, maka salah satunya yang berjalan itu dalam keadaan cela selama-lamanya, pembaziran memori dan cekera simpanan, memori-kembung, CPU yang terlalu panas yang membazir sumber tenaga. Di dalam dunia komputer, satu program yang menyalahgunakan sumber biasanya akan menyalahgunakan sumber dunia. Bagaimanakah Ethereum mengekang sumber yang digunakan oleh kontrak pintar jika ia tidak dapat meramalkan penggunaan sumber terlebih dahulu?

((("EVM (Ethereum Virtual Machine)","gas and")))((("gas","as counter to Turing completeness")))Bagi menyahut cabaran ini, Ethereum memperkenalkan mekanisme meteran yang dipanggil _gas_. Oleh kerana EVM melaksanakan kontrak pintar, ia berhati-hati meneliti setiap arahan (perhitungan, akses data, dan sebagainya). Setiap arahan mempunyai kos yang telah ditetapkan dalam unit gas. Apabila transaksi mencetuskan pelaksanaan kontrak pintar, ia mesti termasuk jumlah gas yang yang telah ditetapkan had tertinggi dari apa yang boleh digunakan untuk menjalankan kontrak pintar. EVM akan menamatkan pelaksanaan jika jumlah gas yang digunakan oleh pengiraan melebihi gas yang terdapat dalam urus niaga. Gas adalah mekanisme menggunakan Ethereum untuk membolehkan pengiraan Turing-lengkap sambil mengehadkan sumber-sumber yang boleh dihabiskan oleh mana-mana program.

Persoalan seterusnya ialah, 'bagaimana seseorang mendapat gas untuk membayar pengiraan di dunia perkomputeran Ethereum?' Anda tidak akan menemui gas di mana-mana pengurup. ((("ether (generally)","gas and")))Ia hanya boleh dibeli sebagai sebahagian daripada transaksi, dan hanya boleh dibeli dengan ether. Ether perlu dihantar bersama dengan urusniaga dan ia perlu diperuntukkan secara jelas bagi pembelian gas, serta harga gas yang boleh diterima. Sama seperti di pam, harga gas tidak tetap. Gas dibeli untuk urusniaga, pengiraan dilaksanakan, dan gas yang tidak digunakan dikembalikan kepada pengirim transaksi.

[[DApp]]
=== Dari Kegunaan Am Rantai Blok Kepada Aplikasi Bukan Terpusat (DApp)

((("DApps (decentralized applications)","Ethereum as platform for")))((("Ethereum (generally)","DApps and")))Ethereum bermula sebagai satu cara untuk membuatkan rantai blok menjadi kegunaan am yang boleh diprogramkan untuk pelbagai kegunaan. Tetapi dengan cepat, visi Ethereum berkembang menjadi platform untuk pengaturcaraan Dapp. DApp mewakili perspektif yang lebih luas daripada kontrak pintar. DApp adalah sekurang-kurangnya kontrak pintar dan sesawang antara muka pengguna. Secara lebih mendalam, DApp adalah aplikasi sesawang yang dibina di atas perkhidmatan infrastruktur terbuka, bukan terpusat, dan rakan-ke-rakan.

Dapp terdiri dari sekurang-kurangnya:

- Kontrak pintar dalam rantai blok
- Sesawang yang terpapar di depan antaramuka pengguna

Sebagai tambahan, kebanyakkan DApp terkandung di dalamnya kandungan bukan terpusat, contohnya:

- Platform dan protokol penyimpanan (P2P) terpusat
- Platform dan protokol wakalah (P2P) terpusat

[PETUA]
====
Mungkin kita rasa cara ejaan DApp _&#208;Apps_. Ianya &#208; huruf Latin iatu "ETH," yang merujuk kepada Ethereum. Untuk mempamerkan huruf ini, gunakan titik kod Unicode +0xD0+, atau entiti huruf HTML +eth+ (atau entiti penomboran iaitu +#208+).
====

[[evolving_WWW]]
=== Zaman Ketiga Internet

((("DApps (decentralized applications)","web3 and")))((("Ethereum (generally)","web3 and")))((("web3")))Dalam tahun 2004 istilah "Web 2.0" menjadi terkenal, menggambarkan evolusi laman sesawang ke arah kandungan yang dihasilkan pengguna, antara muka yang bertindak balas dan saling bergiat. Web 2.0 bukanlah satu ukuran teknikal, melainkan istilah yang menerangkan fokus laman sesawang baharu pass:[<span class="keep-together">aplikasi</span>].

Konsep DApps bertujuan untuk mengambil WWW ke peringkat perubahan semulajadi yang seterusnya, memperkenalkan konsep bukan terpusat dengan protokol rakan-ke-rakan ke dalam setiap aspek aplikasi laman sesawang. Istilah yang digunakan untuk menggambarkan perubahan ini ialah _web3_, yang bermaksud "versi" ketiga sesawang. (("Wood, Dr. Gavin","and web3")))Pertama kali  dicadangkan oleh Dr. Gavin Wood, web3 mewakili visi dan fokus baru untuk aplikasi sesawang: dari aplikasi yang dimiliki dan dikendalikan oleh pusat, kepada aplikasi yang dibina di atas protokol yang tidak terpusat.

Dalam bab-bab yang akan datang, kita akan menerokai pustaka Ethereum JavaScript web3.js, yang menghubungkan aplikasi JavaScript yang berjalan di pelayar anda dengan rantai blok Ethereum. Perpustakaan web3.js juga termasuk antara muka ke rangkaian penyimpanan P2P yang dipanggil _Swarm_ dan perkhidmatan mesej P2P yang dipanggil _Whisper_. Dengan tiga komponen ini termasuk dalam pustaka JavaScript yang berjalan dalam pelayar web anda, pembangun mempunyai kelengkapan pembangunan aplikasi sepenuhnya yang membolehkan mereka membina DApp web3.

[[development_culture]]
=== Pembangunan Budaya Ethereum

((("development culture, Ethereum")))((("Ethereum (generally)","development culture")))Setakat ini, kita telah membincangkan tentang bagaimana matlamat dan teknologi Ethereum berbeza daripada yang terdapat di blok lain yang mendahuluinya, seperti Bitcoin. Ethereum juga mempunyai budaya pembangunan yang sangat berbeza.

((("Bitcoin","development culture")))Dalam Bitcoin, pembangunan dikawal oleh prinsip-prinsip lama: semua perubahan dikaji dengan teliti untuk memastikan tidak ada sistem yang akan terganggu. Sebahagian besar, perubahan hanya dilaksanakan jika mereka serasi dengan yang di belakangnya. Pelanggan sedia ada dibenarkan untuk ikut serta, tetapi akan terus beroperasi jika mereka memutuskan untuk tidak menaik taraf sistem.

((("backward compatibility, Ethereum vs. Bitcoin")))Dalam Ethereum, secara perbandingannya, budaya pembangunan masyarakat difokuskan pada masa depan berdasarkan masa lalu. Mantera adalah "bergerak cepat dan memecahkan kebuntuan." Sekiranya perubahan diperlukan, ia dilaksanakan, walaupun itu bermakna membatalkan andaian terlebih dahulu, melanggar keserasian, atau memaksa pelanggan untuk mengemaskini. Kebudayaan pembangunan Ethereum dicirikan oleh kaedah baharu pesat, perubahan yang pesat membangun, dan kesediaan untuk berubah pada masa hadapan, walaupun ini mengorbankan beberapa keserasian terkebelakang.

Apa yang memberi makna kepada anda sebagai pembangun adalah anda mesti tetap boleh lentur dan bersedia untuk membina semula infrastruktur anda jika terdapat perubahan dasar. Salah satu cabaran besar yang dihadapi oleh pembangun di Ethereum adalah percanggahan yang antara menggerakkan kod ke sistem yang tidak berubah dan platform pembangunan yang masih berkembang. Anda tidak boleh semata-mata "menaiktaraf" kontrak pintar anda. Anda mesti bersedia untuk menggunakan yang baharu, memindahkan pengguna, aplikasi, dan dana, dan memulakan dari awal semula.

Kiasannya, ini juga bermaksud bahawa matlamat sistem pembinaan dengan lebih banyak perintah sendiri (autonomi) dan kawalan yang kurang terpusat masih belum dapat dicapai sepenuhnya. Autonomi dan bukan terpusat, lebih stabil sedikit dalam platform ini berbanding anda ingin menyertai Ethereum dalam beberapa tahun akan datang. Untuk "mengembangkan" platform, anda perlu bersedia dengan serpihan dan memulakan semula kontrak pintar anda, yang bermaksud anda perlu mengekalkan tahap tertentu kawalan ke atasnya.

Tetapi, di sisi positif, Ethereum bergerak maju dengan cepat. Terdapat sedikit peluang untuk "bike-shedding," iaitu ungkapan yang bermaksud bertahan dengan kemajuan pembangunan dengan membantah hal-hal kecil seperti bagaimana membuat basikal di belakang sebuah stesen kuasa nuklear. Sekiranya anda membuka bengkel basikal, mungkin tiba-tiba kita mendapati bahawa ketika sedang leka, pasukan pembangunan lain mengubah rancangan dan meninggalkan basikal itu kerana memihak kepada hoverkraf autonomi.

Akibatnya, pembangunan platform Ethereum akan bertambah perlahan dan antara muka akan kekal sebegitu. Tetapi dalam masa yang sama, prinsip hala tuju adalah membuat perubahan. Kita mesti teruskan juga perjalanan, kerana tidak ada yang akan pergerakan kita.

[[why_learn]]
=== Mengapa Harus Belajar Ethereum?

((("blockchain","Ethereum as developer&#39;s blockchain")))((("Ethereum (generally)","reasons to learn")))Rantai blok mempunyai keluk pembelajaran yang sangat curam, kerana mereka menggabungkan pelbagai disiplin ke dalam satu domain: pengaturcaraan, keselamatan maklumat, kriptografi, ekonomi, sistem diedarkan, rangkaian sesama rakan maya, dan lain-lain lagi. Ethereum menjadikan keluk pembelajaran ini jauh lebih curam secara berperingkat, supaya anda boleh bermula dengan cepat. Tetapi di bawah permukaan persekitaran yang mudah terletak lebih banyak lagi ilmu. Ketika anda belajar dan mula mencari lebih dalam, selalunya akan menemui kerumitan dan keajaiban.

Ethereum adalah platform yang hebat untuk belajar tentang rantaian blok dan ia membina komuniti pembangun secara pesat, lebih cepat daripada mana-mana platform rantai blok yang lain. Lebih dari itu, Ethereum adalah _rantai blok pembangun_ yang dibangunkan dari pembangun untuk pembangun. Seorang pembangun yang biasa dengan aplikasi JavaScript boleh masuk ke Ethereum dan mula menghasilkan kod kerja dengan cepat. Untuk beberapa tahun pertama kehidupan Ethereum, adalah perkara biasa untuk melihat baju kita yang mengumumkan bahawa kita boleh mencipta token kripto hanya dengan lima baris kod. Sudah tentu, ini adalah serampang dua mata. Sangat mudah untuk menulis kod, tetapi sangat sukar untuk menulis kod _baik_ lagi _selamat_.

[[teaching_objectives]]
=== Apakah Yang Buku Ini Akan Mengajarkan Anda

Buku ini terjun ke dasar Ethereum dan mengkaji setiap komponen. Anda akan bermula dengan urus niaga mudah, menelaah bagaimana ia berfungsi, membina kontrak mudah, menjadikannya lebih baik, dan mengikuti perjalanannya melalui sistem Ethereum.

Anda tidak akan belajar bagaimana menggunakan Ethereum&#x2014;bagaimana ianya bekerja&#x2014;dan juga mengapa ia direka bentuk seperti itu. Anda akan dapat memahami bagaimana setiap karya itu berfungsi, dan bagaimana dan mengapa ianya sesuai bersama.(((range="endofrange", startref="ix_01what-is-asciidoc0")))((("account","contract", see="smart contracts")))((("assymetric cryptography", see="public key cryptography")))((("BIPs", see="Bitcoin improvement proposals")))((("burn", see="ether burn")))((("cryptography","asymmetric", see="public key cryptography")))((("decentralized applications", see="DApps")))((("Decentralized Autonomous Organization", see="DAO")))((("default function", see="fallback function")))((("deterministic (seeded) wallets","hierarchical", see="hierarchical deterministic wallets")))((("DoS attacks", see="denial of service attacks")))((("ECDSA", see="Elliptic Curve Digital Signature Algorithm")))((("ETC", see="Ethereum Classic")))((("Ethereum (generally)","clients", see="clients, Ethereum")))((("Ethereum Improvement Proposals", see="EIP entries")))((("Ethereum Name Service", see="ENS")))((("Ethereum Virtual Machine", see="EVM")))((("Externally Owned Account", see="EOA")))((("fees", see="gas")))((("ICOs", see="Initial Coin Offerings")))((("Mastering Ethereum Token", see="METoken")))((("MEW", see="MyEtherWallet")))((("names/naming", see="ENS (Ethereum Name Service)")))((("NFTs", see="nonfungible tokens")))((("PoS", see="proof of stake")))((("PoW", see="proof of work")))((("PoWHC", see="Proof of Weak Hands Coin")))((("Remote Procedure Call (RPC) commands", see="JSON-RPC API")))((("RPC (Remote Procedure Call) commands", see="JSON-RPC API")))((("Secure Hash Algorithm", see="SHA entries")))((("seeded wallets", see="deterministic wallets")))((("smart contracts","Vyper and", see="Vyper")))((("smartphones", see="mobile (smartphone) wallets")))((("storage", see="data storage")))((("SUICIDE", see="SELFDESTRUCT opcode")))((("synchronization", see="fast synchronization")))((("synchronization", see="first synchronization")))((("transaction fees", see="gas")))((("wallets","HD", see="hierarchical deterministic wallets")))((("wallets","MetaMask", see="MetaMask")))