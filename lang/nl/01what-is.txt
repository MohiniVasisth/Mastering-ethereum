[role="pagenumrestart"]
[[watis_hoofdstuk]]
== Wat is Ethereum?

((("Ethereum (algemeen)","over", id="ix_01what-is-asciidoc0", range="startvanrange")))Ethereum ((("wereldcomputer, Ethereum als")))wordt vaak omschreven als "de wereldcomputer.&#x201d; Maar wat betekent dit? Laten we beginnen met een computerwetenschappelijke beschrijving, om dit vervolgens te ontcijferen met een praktische analyse van de mogelijkheden en karakteristieken van Ethereum, terwijl we het vergelijken met Bitcoin en andere gedecentraliseerde informatie uitwisselingsplatformen (of afgekort "blockchains").

Vanuit het standpunt van de computerwetenschap, is Ethereum een deterministisch maar praktisch onbegrensde toestandsmachine, bestaande uit wereldwijd toegankelijke singleton toestand en een virtuele machine die veranderingen aan die toestand toepast.

Vanuit een praktisch standpunt, is Ethereum een open source, gedecentraliseerde computer infrastructuur dat programma's, _smart contracts_ genoemd, uitvoert. Het gebruikt een blockchain om het systeem zijn gewijzigde toestand te synchroniseren en op te slaan. Dit met een cryptocurrency _ether_ genoemd om uitvoeringskosten te meten en binnen de perken te houden. Code uitvoeren op de Ethereum blockchain kost ether.

Het Ethereum platform stelt ontwikkelaars in staat om krachtige gedecentraliseerde toepassingen te bouwen met ingebouwde economische functies. Het platform voorziet in een hoge graad van beschikbaarheid, controleerbaarheid, transparantie, en neutraliteit. Het verkleint of elimineert de mogelijkheid tot censuur en verkleint het risico dat de tegenpartij van een transactie bepaalde verplichtingen niet zou naleven.

[[bitcoin_vergelijking]]
=== Vergeleken met Bitcoin

((("Bitcoin","Ethereum vergeleken met")))((("Ethereum (algemeen)","Bitcoin vergeleken met")))Veel mensen komen naar Ethereum met enige voorafgaande ervaring met cryptocurrencies, in het bijzonder Bitcoin. Ethereum deelt veel elementen met andere open blockchains: een peer-to-peer netwerk dat deelnemers verbindt, een Byzantijns fouttolerantie&#x2013;tolerant consensus-algoritme om toestand updates (een proof-of-work blockchain), het gebruik van cryptografische primitieven zoals digitale handtekeningen en hashes, en een digitale valuta (ether).

Toch is Ethereum, in zowel zijn doel als opbouw, opvallend verschillend van andere open blockchains die hem voorafgingen, inclusief Bitcoin.

((("Ethereum (algemeen)","doel van")))De primaire doelstelling van Ethereum is niet om een digitale valuta betalingsnetwerk te zijn zoals Bitcoin. ((("utility currency, ether als")))Hoewel de digitale valuta ether integraal noodzakelijk is voor de werking van Ethereum, is ether bedoeld als een _utility currency_ om te betalen voor het gebruik van het Ethereum platform als wereldcomputer.

In tegenstelling tot Bitcoin, dat een zeer beperkte scripttaal heeft, is Ethereum ontworpen om een programmeerbare blockchain te zijn voor algemene doeleinden die draaien op een _virtual machine_ dewelke in staat is tot het uitvoeren van code van willekeurige en onbegrensde complexiteit. Daar waar Bitcoin, bewust een scripttaal is, beperkt tot eenvoudige true/false evaluaties van de bestedingsvoorwaarden, is Ethereum's taal _Turing complete_, wat betekent dat Ethereum kan functioneren als een computer voor algemeen gebruik.

[[blockchain_onderdelen]]
=== Onderdelen van een Blockchain

((("blockchain","onderdelen van")))((("Ethereum (algemeen)","blockchain onderdelen")))De onderdelen van een open, publieke blockchain zijn (gewoonlijk):

* Een peer-to-peer (P2P) netwerk dat deelnemers verbindt en transacties en blokken van geverifieerde transacties verspreidt, gebaseerd op een gestandaardiseerde "roddel" pass:[<span class="keep-together">protocol</span>]
* Berichten, in de vorm van transacties, die toestandsovergangen vertegenwoordigen
* Een reeks consensusregels die bepalen wat een transactie is en wat zorgt voor een geldige toestandsovergang
* Een toestandsmachine die transacties verwerkt volgens de consensusregels
* Een ketting van cryptografisch beveiligde blokken die fungeert als een dagboek van alle geverifieerde en geaccepteerde toestandsovergangen
* Een consensusalgoritme dat de controle over de blockchain decentraliseert, door deelnemers te dwingen mee te werken aan de handhaving van de consensusregels
* Een speltheoretisch verantwoorde stimuleringsregeling (bijv. Proof-of-work-kosten plus blokbeloningen) om de staatsmachine economisch veilig te stellen in een open pass:[<span class="keep-together">environment</span>]
* Een of meer open source software-implementaties van de bovenstaande ("cliënten")

Alle of de meeste van deze componenten worden meestal gecombineerd in één softwareclient. In ((("Bitcoin Core"))) ((("bitcoind client"))) Bitcoin wordt de referentie-implementatie bijvoorbeeld ontwikkeld door het open source-project _Bitcoin Core_ en geïmplementeerd als de _bitcoind_ client. In Ethereum is er in plaats van een referentie-implementatie een ((("referentiespecificatie"))) _reference specification_, een wiskundige beschrijving van het systeem in de Yellow Paper (see <1>). Er zijn een aantal clients die zijn gebouwd volgens de referentiespecificatie.

In het verleden gebruikten we de term "blockchain" om alle zojuist genoemde componenten weer te geven, als een korte verwijzing naar de combinatie van technologieën die alle beschreven kenmerken omvatten. Tegenwoordig is er echter een enorme verscheidenheid aan blockchains met verschillende eigenschappen. We hebben kwalificaties nodig om ons te helpen de kenmerken van de blockchain in kwestie te begrijpen, zoals _open, openbaar, wereldwijd, gedecentraliseerd, neutraal, _ en _censuurbestendig_, om de belangrijke opkomende kenmerken van een "blockchain" -systeem te identificeren die deze componenten mogelijk maken.

Niet alle blockchains zijn gelijk gemaakt. Als iemand je vertelt dat iets een blockchain is, heb je geen antwoord ontvangen; Je moet eerder veel vragen gaan stellen opdat het duidelijk wordt wat ze bedoelen als ze het woord "blockchain" gebruiken. Begin met het vragen om een beschrijving van de componenten in de voorgaande lijst, en vraag vervolgens of deze "blockchain" de kenmerken vertoont van _open, openbaar_, enz.

[[ethereum_geboorte]]
=== De Geboorte van Ethereum

((("Ethereum (algemeen)","geboorte van")))Alle geweldige innovaties lossen echte problemen op, en Ethereum is geen uitzondering. Ethereum werd bedacht in een tijd dat mensen de kracht van het Bitcoin-model erkenden en probeerden verder te gaan dan cryptocurrency-applicaties. Maar ontwikkelaars stonden voor een raadsel: ze moesten ofwel bovenop Bitcoin bouwen of een nieuwe blockchain starten.((("Bitcoin","beperkingen van")))Voortbouwen op Bitcoin betekende leven binnen de opzettelijke beperkingen van het netwerk en proberen om oplossingen te vinden. De beperkte set van transactietypen, gegevenstypen en grootten van gegevensopslag leek het soort applicaties dat rechtstreeks op Bitcoin kon draaien te beperken; voor al het andere waren extra off-chain-lagen nodig, en dat deed meteen veel van de voordelen van het gebruik van een openbare blockchain teniet. Voor projecten die meer vrijheid en flexibiliteit nodig hadden terwijl ze on-chain bleven, was een nieuwe blockchain de enige optie. Maar dat betekende veel werk: alle infrastructuurelementen opstarten, grondig testen, enz.

((("Buterin, Vitalik","en de geboorte van Ethereum")))Tegen het einde van 2013 begon Vitalik Buterin, een jonge programmeur en Bitcoin-liefhebber, na te denken over het verder uitbreiden van de mogelijkheden van Bitcoin en Mastercoin (een overlay-protocol dat Bitcoin uitbreidde om rudimentaire slimme contracten aan te bieden). In oktober van dat jaar stelde Vitalik een meer algemene benadering van het Mastercoin team voor, een die flexibele en scriptbare (maar niet Turing-complete) contracten mogelijk maakte om de gespecialiseerde contracttaal van Mastercoin te vervangen. Hoewel het Mastercoin team onder de indruk was, was dit voorstel een te radicale verandering om in hun ontwikkelingsplan te passen.

In december 2013 begon Vitalik een whitepaper te delen waarin het idee achter Ethereum werd geschetst: een Turing-complete blockchain voor algemeen gebruik. Enkele tientallen mensen zagen deze vroege versie en boden feedback, waardoor Vitalik het voorstel verder kon ontwikkelen.

Beide auteurs van dit boek ontvingen een vroege versie van de whitepaper en gaven er commentaar op. Andreas M.Antonopoulos was geïntrigeerd door het idee en stelde Vitalik veel vragen over het gebruik van een aparte blockchain om consensusregels af te dwingen over slimme contractuitvoering en de implicaties van een Turing-complete taal. Andreas bleef de voortgang van Ethereum met grote interesse volgen, maar bevond zich in de vroege stadia van het schrijven van zijn boek _Mastering Bitcoin_ en nam pas veel later rechtstreeks deel aan Ethereum. ((("Wood, Dr. Gavin", "en de geboorte van Ethereum")))Dr. Gavin Wood was echter een van de eersten die contact opnam met Vitalik en aanbood om te helpen met zijn C ++ programmeervaardigheden. Gavin werd de medeoprichter, codesigner en CTO van Ethereum.

Zoals Vitalik het zich herinnert in zijn http://bit.ly/2T2t6zs["Ethereum Voorgeschiedenis" post]: 

____
Dit was de tijd dat het Ethereum protocol volledig mijn eigen creatie was. Vanaf hier begonnen echter nieuwe deelnemers zich bij de kudde aan te sluiten. Veruit de meest prominente aan de protocolzijde was Gavin Wood...

Gavin kan ook grotendeels worden gecrediteerd voor de subtiele verandering in visie door Ethereum te zien als een platform voor het bouwen van programmeerbaar geld, met op blockchain gebaseerde contracten die digitale activa kunnen bevatten en deze volgens vooraf ingestelde regels kunnen overbrengen naar een algemeen computerplatform. Dit begon met subtiele veranderingen in nadruk en terminologie, en later werd deze invloed sterker met de toenemende nadruk op het "Web 3" ensemble, dat Ethereum zag als een onderdeel van een reeks gedecentraliseerde technologieën, de andere twee zijn Whisper en Swarm.
____

Vanaf december 2013 verfijnden en ontwikkelden Vitalik en Gavin het idee, waarbij ze samen de protocollaag bouwden die Ethereum werd.

De oprichters van Ethereum dachten aan een blockchain zonder een specifiek doel, die een breed scala aan applicaties zou kunnen ondersteunen door _geprogrammeerd_ te zijn. Het idee was dat een ontwikkelaar door een algemene blockchain zoals Ethereum te gebruiken, zijn specifieke applicatie kon programmeren zonder de onderliggende mechanismen van peer-to-peer-netwerken, blockchains, consensusalgoritmen, enz. te hoeven implementeren. Het Ethereum-platform is ontworpen om deze details te abstraheren en een deterministische en veilige programmeeromgeving te bieden voor gedecentraliseerde blockchain applicaties.

Net als Satoshi hebben Vitalik en Gavin niet alleen een nieuwe technologie uitgevonden; ze combineerden nieuwe uitvindingen op een nieuwe manier met bestaande technologieën en leverden de prototypecode op om hun ideeën aan de wereld te bewijzen.

De oprichters hebben jarenlang gewerkt aan het bouwen en verfijnen van de visie. Op 30 juli 2015 werd het eerste Ethereum-blok gemijnd. De computer van de wereld begon de wereld te dienen.

[NOTA]
====
Vitalik Buterins artikel "A Prehistory of Ethereum" werd gepubliceerd in september 2017 en levert een fascinerende eerste persoonsweergave op van de vroegste momenten van Ethereum.

Je kan het lezen op
https://vitalik.ca/general/2017/09/14/prehistory.html[].
====

[[ontwikkeling_stadia]]
=== Ethereum's vier ontwikkelingsstadia

((("Ethereum (algemeen)","vier stadia van ontwikkeling")))De ontwikkeling van Ethereum was gepland over vier verschillende fasen, met grote veranderingen in elke fase. ((("hard forks", zieook="DAO; andere specifieke hard forks, bijv: Spurious Dragon"))) Een fase kan subreleases bevatten, ook gekend als "hard forks", die de functionaliteit wijzigen op een manier die niet achterwaarts compatibel is.

The four main development stages are codenamed _Frontier_, _Homestead_, _Metropolis_, and _Serenity_. The intermediate hard forks that have occurred (or are planned) to date are codenamed _Ice Age_, _DAO_, _Tangerine Whistle_, _Spurious Dragon_, _Byzantium_, and _Constantinople_. Both the development stages and the intermediate hard forks are shown on the following timeline, which is "dated" by  block number:


Block #0:: ((("Frontier")))__Frontier__&#x2014;The initial stage of Ethereum, lasting from July 30, 2015, to March 2016.

Block #200,000:: ((("Ice Age")))__Ice Age__&#x2014;A hard fork to introduce an exponential difficulty increase, to motivate a transition to PoS when ready.

Block #1,150,000:: ((("Homestead")))__Homestead__&#x2014;The second stage of Ethereum, launched in March 2016.

Block #1,192,000:: ((("DAO (Decentralized Autonomous Organization)")))__DAO__&#x2014;A hard fork that reimbursed victims of the hacked DAO contract and caused Ethereum and Ethereum Classic to split into two competing systems.

Block #2,463,000:: ((("Tangerine Whistle")))__Tangerine Whistle__&#x2014;A hard fork to change the gas calculation for certain I/O-heavy operations and to clear the accumulated state from a denial-of-service (DoS) attack that exploited the low gas cost of those operations.

Block #2,675,000:: ((("Spurious Dragon")))__Spurious Dragon__&#x2014;A hard fork to address more DoS attack vectors, and another state clearing. Also, a replay attack protection mechanism.


Block #4,370,000:: ((("Metropolis")))((("Byzantium fork")))__Metropolis Byzantium__&#x2014;Metropolis is the third stage of Ethereum, current at the time of writing this book, launched in October 2017. Byzantium is the first of two hard forks planned for Metropolis.


After Byzantium, there is one more hard fork planned for Metropolis: ((("Constantinople fork")))((("Serenity")))Constantinople. Metropolis will be followed by the final stage of Ethereum's deployment, codenamed Serenity.


[[general_purpose_blockchain]]
=== Ethereum: A General-Purpose Blockchain

((("Bitcoin","Ethereum blockchain compared to Bitcoin blockchain")))((("Ethereum (generally)","as general-purpose blockchain")))The original blockchain, namely Bitcoin's blockchain, tracks the state of units of bitcoin and their ownership. ((("distributed state machine, Ethereum as")))You can think of Bitcoin as a distributed consensus _state machine_, where transactions cause a global _state transition_, altering the ownership of coins. The state transitions are constrained by the rules of consensus, allowing all participants to (eventually) converge on a common (consensus) state of the system, after several blocks are mined.

Ethereum is also a distributed state machine. But instead of tracking only the state of currency ownership, ((("key-value tuple")))Ethereum tracks the state transitions of a general-purpose data store, i.e., a store that can hold any data expressible as a _key–value tuple_. A key–value data store holds arbitrary values, each referenced by some key; for example, the value "Mastering Ethereum" referenced by the key "Book Title". In some ways, this serves the same purpose as the data storage model of _Random Access Memory_ (RAM) used by most general-purpose computers. Ethereum has memory that stores both code and data, and it uses the Ethereum blockchain to track how this memory changes over time. Like a general-purpose stored-program computer, Ethereum can load code into its state machine and _run_ that code, storing the resulting state changes in its blockchain. Two of the critical differences from most general-purpose computers are that Ethereum state changes are governed by the rules of consensus and the state is distributed globally. Ethereum answers the question: "What if we could track any arbitrary state and program the state machine to create a world-wide computer operating under consensus?"

[[ethereum_components]]
=== Ethereum's Components

((("blockchain","components of")))((("Ethereum (generally)","blockchain components")))In Ethereum, the components of a blockchain system described in <<blockchain_components>> are, more specifically:


P2P network:: Ethereum runs on the _Ethereum main network_, which is addressable on TCP port 30303, and runs a protocol called _ÐΞVp2p_.

Consensus rules:: Ethereum's consensus rules are defined in the reference specification, the Yellow Paper (see <<references>>).

Transactions:: Ethereum transactions are network messages that include (among other things) a sender, recipient, value, and data payload.

[role="pagebreak-before"]
State machine:: Ethereum state transitions are processed by the _Ethereum Virtual Machine_ (EVM), a stack-based virtual machine that executes _bytecode_ (machine-language instructions). EVM programs, called "smart contracts," are written in high-level languages (e.g., Solidity) and compiled to bytecode for execution on the EVM.

Data structures:: Ethereum's state is stored locally on each node as a _database_ (usually Google's LevelDB), which contains the transactions and system state in a serialized hashed data structure called a _Merkle Patricia Tree_.

Consensus algorithm:: Ethereum uses Bitcoin's consensus model, Nakamoto Consensus, which uses sequential single-signature blocks, weighted in importance by PoW to determine the longest chain and therefore the current state. However, there are plans to move to a PoS weighted voting system, codenamed _Casper_, in the near future.

Economische zekerheid:: Ethereum gebruikt nu Ethash, een Proof of Work algoritme, maar dat wordt uiteindelijk vervangen door Proof of Stake in de nabije toekomst

Clients:: Ethereum has several interoperable implementations of the client software, the most prominent of which are _Go-Ethereum_ (_Geth_) and _Parity_.

[[referenties]]
==== Verder Lezen

De volgende referenties geven aanvullende informatie over de genoemde technologieën

* De Ethereum Yellow Paper
https://ethereum.github.io/yellowpaper/paper.pdf

* The Beige Paper, a rewrite of the Yellow Paper for a broader audience in less formal language:
https://github.com/chronaeon/beigepaper

* ÐΞVp2p network protocol:
http://bit.ly/2quAlTE

* Ethereum Virtual Machine list of resources:
http://bit.ly/2PmtjiS

* LevelDB database (used most often to store the local copy of the blockchain):
https://github.com/google/leveldb

* Merkle Patricia trees:
https://github.com/ethereum/wiki/wiki/Patricia-Tree

* Ethash PoW algorithm:
https://github.com/ethereum/wiki/wiki/Ethash

* Casper PoS v1 Implementation Guide:
http://bit.ly/2DyPr3l

* Go-Ethereum (Geth) client:
https://geth.ethereum.org/

* Parity Ethereum client:
https://parity.io/

[[turing_completeness]]
=== Ethereum and Turing Completeness

((("Ethereum (generally)","Turing completeness and")))((("Turing completeness","Ethereum and")))As soon as you start reading about Ethereum, you will immediately encounter the term "Turing complete." Ethereum, they say, unlike Bitcoin, is Turing complete. What exactly does that mean?

((("Turing, Alan")))The term refers to English mathematician Alan Turing, who is considered the father of computer science. In 1936 he created a mathematical model of a computer consisting of a state machine that manipulates symbols by reading and writing them on sequential memory (resembling an infinite-length paper tape). With this construct, Turing went on to provide a mathematical foundation to answer (in the negative) questions about _universal computability_, meaning whether all problems are solvable. He proved that there are classes of problems that are uncomputable. ((("halting problem")))Specifically, he proved that the _halting problem_ (whether it is possible, given an arbitrary program and its input, to determine whether the program will eventually stop running) is not solvable.

((("Universal Turing machine (UTM)")))((("UTM (Universal Turing machine)")))Alan Turing further defined a system to be _Turing complete_ if it can be used to simulate any Turing machine. Such a system is called a _Universal Turing machine_ (UTM).

Ethereum's ability to execute a stored program, in a state machine called the Ethereum Virtual Machine, while reading and writing data to memory makes it a Turing-complete system and therefore a UTM. Ethereum can compute any algorithm that can be computed by any Turing machine, given the limitations of finite memory.

Ethereum's groundbreaking innovation is to combine the general-purpose computing architecture of a stored-program computer with a decentralized blockchain, thereby creating a distributed single-state (singleton) world computer. Ethereum programs run "everywhere," yet produce a common state that is secured by the rules of pass:[<span class="keep-together">consensus</span>].

[[turing_completeness_feature]]
==== Turing Completeness as a "Feature"

((("Turing completeness","as feature")))Hearing that Ethereum is Turing complete, you might arrive at the conclusion that this is a _feature_ that is somehow lacking in a system that is Turing incomplete. Rather, it is the opposite. Turing completeness is very easy to achieve; in fact, http://bit.ly/2ABft33[the simplest Turing-complete state machine known]  has 4 states and uses 6 symbols, with a state definition that is only 22 instructions long. Indeed, sometimes systems are found to be "accidentally Turing complete." A fun reference of such systems can be found at http://bit.ly/2Og1VgX[].

However, Turing completeness is very dangerous, particularly in open access systems like public blockchains, because of the halting problem we touched on earlier. For example, modern printers are Turing complete and can be given files to print that send them into a frozen state. The fact that Ethereum is Turing complete means that any program of any complexity can be computed by Ethereum. But that flexibility brings some thorny security and resource management problems. An unresponsive printer can be turned off and turned back on again. That is not possible with a public blockchain.

[[turing_completeness_implications]]
==== Implications of Turing Completeness

((("Turing completeness","implications of")))Turing proved that you cannot predict whether a program will terminate by simulating it on a computer. In simple terms, we cannot predict the path of a program without running it. ((("infinite loops")))Turing-complete systems can run in "infinite loops," a term used (in oversimplification) to describe a program that does not terminate. It is trivial to create a program that runs a loop that never ends. But unintended never-ending loops can arise without warning, due to complex interactions between the starting conditions and the code. In Ethereum, this poses a challenge: every participating node (client) must validate every transaction, running any smart contracts it calls. But as Turing proved, Ethereum can't predict if a smart contract will terminate, or how long it will run, without actually running it (possibly running forever). Whether by accident or on purpose, a smart contract can be created such that it runs forever when a node attempts to validate it. This is effectively a DoS attack. And of course, between a program that takes a millisecond to validate and one that runs forever are an infinite range of nasty, resource-hogging, memory-bloating, CPU-overheating programs that simply waste resources. In a world computer, a program that abuses resources gets to abuse the world's resources. How does Ethereum constrain the resources used by a smart contract if it cannot predict resource use in advance?

((("EVM (Ethereum Virtual Machine)","gas and")))((("gas","as counter to Turing completeness")))To answer this challenge, Ethereum introduces a metering mechanism called _gas_. As the EVM executes a smart contract, it carefully accounts for every instruction (computation, data access, etc.). Each instruction has a predetermined cost in units of gas. When a transaction triggers the execution of a smart contract, it must include an amount of gas that sets the upper limit of what can be consumed running the smart contract. The EVM will terminate execution if the amount of gas consumed by computation exceeds the gas available in the transaction. Gas is the mechanism Ethereum uses to allow Turing-complete computation while limiting the resources that any program can consume.

The next question is, 'how does one get gas to pay for computation on the Ethereum world computer?' You won't find gas on any exchanges. ((("ether (generally)","gas and")))It can only be purchased as part of a transaction, and can only be bought with ether. Ether needs to be sent along with a transaction and it needs to be explicitly earmarked for the purchase of gas, along with an acceptable gas price. Just like at the pump, the price of gas is not fixed. Gas is purchased for the transaction, the computation is executed, and any unused gas is refunded back to the sender of the transaction.

[[DApp]]
=== From General-Purpose Blockchains to Decentralized Applications (DApps)

((("DApps (decentralized applications)","Ethereum as platform for")))((("Ethereum (generally)","DApps and")))Ethereum started as a way to make a general-purpose blockchain that could be programmed for a variety of uses. But very quickly, Ethereum's vision expanded to become a platform for programming DApps. DApps represent a broader perspective than smart contracts. A DApp is, at the very least, a smart contract and a web user interface. More broadly, a DApp is a web application that is built on top of open, decentralized, peer-to-peer infrastructure services.

A DApp is composed of at least:

- Smart contracts on a blockchain
- A web frontend user interface

In addition, many DApps include other decentralized components, such as:

- A decentralized (P2P) storage protocol and platform
- A decentralized (P2P) messaging protocol and platform

[TIP]
====
You may see DApps spelled as _&#208;Apps_. The &#208; character is the Latin character called "ETH," alluding to Ethereum. To display this character, use the Unicode codepoint +0xD0+, or if necessary the HTML character entity +eth+ (or decimal entity +#208+).
====

[[evolving_WWW]]
=== The Third Age of the Internet

((("DApps (decentralized applications)","web3 and")))((("Ethereum (generally)","web3 and")))((("web3")))In 2004 the term "Web 2.0" came to prominence, describing an evolution of the web toward user-generated content, responsive interfaces, and interactivity. Web 2.0 is not a technical specification, but rather a term describing the new focus of web pass:[<span class="keep-together">applications</span>].

The concept of DApps is meant to take the World Wide Web to its next natural evolutionary stage, introducing decentralization with peer-to-peer protocols into every aspect of a web application. The term used to describe this evolution is _web3_, meaning the third "version" of the web. ((("Wood, Dr. Gavin","and web3")))First proposed by Dr. Gavin Wood, web3 represents a new vision and focus for web applications: from centrally owned and managed applications, to applications built on decentralized protocols.

In later chapters we'll explore the Ethereum web3.js JavaScript library, which bridges JavaScript applications that run in your browser with the Ethereum blockchain. The web3.js library also includes an interface to a P2P storage network called _Swarm_ and a P2P messaging service called _Whisper_. With these three components included in a JavaScript library running in your web browser, developers have a full application development suite that allows them to build web3 DApps.

[[development_culture]]
=== Ethereum's Development Culture

((("development culture, Ethereum")))((("Ethereum (generally)","development culture")))So far we've talked about how Ethereum's goals and technology differ from those of other blockchains that preceded it, like Bitcoin. Ethereum also has a very different development culture.

((("Bitcoin","development culture")))In Bitcoin, development is guided by conservative principles: all changes are carefully studied to ensure that none of the existing systems are disrupted. For the most part, changes are only implemented if they are backward compatible. Existing clients are allowed to opt-in, but will continue to operate if they decide not to upgrade.

((("backward compatibility, Ethereum vs. Bitcoin")))In Ethereum, by comparison, the community's development culture is focused on the future rather than the past. The (not entirely serious) mantra is "move fast and break things." If a change is needed, it is implemented, even if that means invalidating prior assumptions, breaking compatibility, or forcing clients to update. Ethereum's development culture is characterized by rapid innovation, rapid evolution, and a willingness to deploy forward-looking improvements, even if this is at the expense of some backward compatibility.

What this means to you as a developer is that you must remain flexible and be prepared to rebuild your infrastructure as some of the underlying assumptions change. One of the big challenges facing developers in Ethereum is the inherent contradiction between deploying code to an immutable system and a development platform that is still evolving. You can't simply "upgrade" your smart contracts. You must be prepared to deploy new ones, migrate users, apps, and funds, and start over.

Ironically, this also means that the goal of building systems with more autonomy and less centralized control is still not fully realized. Autonomy and decentralization require a bit more stability in the platform than you're likely to get in Ethereum in the next few years. In order to "evolve" the platform, you have to be ready to scrap and restart your smart contracts, which means you have to retain a certain degree of control over them.

But, on the positive side, Ethereum is moving forward very fast. There's little opportunity for "bike-shedding," an expression that means holding up development by arguing over minor details such as how to build the bicycle shed at the back of a nuclear power station. If you start bike-shedding, you might suddenly discover that while you were distracted the rest of the development team changed the plan and ditched bicycles in favor of autonomous hovercraft.

Eventually, the development of the Ethereum platform will slow down and its interfaces will become fixed. But in the meantime, innovation is the driving principle. You'd better keep up, because no one will slow down for you.

[[why_learn]]
=== Why Learn Ethereum?

((("blockchain","Ethereum as developer&#39;s blockchain")))((("Ethereum (generally)","reasons to learn")))Blockchains have a very steep learning curve, as they combine multiple disciplines into one domain: programming, information security, cryptography, economics, distributed systems, peer-to-peer networks, etc. Ethereum makes this learning curve a lot less steep, so you can get started quickly. But just below the surface of a deceptively simple environment lies a lot more. As you learn and start looking deeper, there's always another layer of complexity and wonder.

Ethereum is a great platform for learning about blockchains and it's building a massive community of developers, faster than any other blockchain platform. More than any other, Ethereum is a _developer's blockchain_, built by developers for developers. A developer familiar with JavaScript applications can drop into Ethereum and start producing working code very quickly. For the first few years of Ethereum's life, it was common to see T-shirts announcing that you can create a token in just five lines of code. Of course, this is a double-edged sword. It's easy to write code, but it's very hard to write _good_ and _secure_ code.

[[teaching_objectives]]
=== What This Book Will Teach You

This book dives into Ethereum and examines every component. You will start with a simple transaction, dissect how it works, build a simple contract, make it better, and follow its journey through the Ethereum system.

You will learn not only how to use Ethereum&#x2014;how it works&#x2014;but also why it is designed the way it is. You will be able to understand how each of the pieces works, and how they fit together and why.(((range="endofrange", startref="ix_01what-is-asciidoc0")))((("account","contract", see="smart contracts")))((("assymetric cryptography", see="public key cryptography")))((("BIPs", see="Bitcoin improvement proposals")))((("burn", see="ether burn")))((("cryptography","asymmetric", see="public key cryptography")))((("decentralized applications", see="DApps")))((("Decentralized Autonomous Organization", see="DAO")))((("default function", see="fallback function")))((("deterministic (seeded) wallets","hierarchical", see="hierarchical deterministic wallets")))((("DoS attacks", see="denial of service attacks")))((("ECDSA", see="Elliptic Curve Digital Signature Algorithm")))((("ETC", see="Ethereum Classic")))((("Ethereum (generally)","clients", see="clients, Ethereum")))((("Ethereum Improvement Proposals", see="EIP entries")))((("Ethereum Name Service", see="ENS")))((("Ethereum Virtual Machine", see="EVM")))((("Externally Owned Account", see="EOA")))((("fees", see="gas")))((("ICOs", see="Initial Coin Offerings")))((("Mastering Ethereum Token", see="METoken")))((("MEW", see="MyEtherWallet")))((("names/naming", see="ENS (Ethereum Name Service)")))((("NFTs", see="nonfungible tokens")))((("PoS", see="proof of stake")))((("PoW", see="proof of work")))((("PoWHC", see="Proof of Weak Hands Coin")))((("Remote Procedure Call (RPC) commands", see="JSON-RPC API")))((("RPC (Remote Procedure Call) commands", see="JSON-RPC API")))((("Secure Hash Algorithm", see="SHA entries")))((("seeded wallets", see="deterministic wallets")))((("smart contracts","Vyper and", see="Vyper")))((("smartphones", see="mobile (smartphone) wallets")))((("storage", see="data storage")))((("SUICIDE", see="SELFDESTRUCT opcode")))((("synchronization", see="fast synchronization")))((("synchronization", see="first synchronization")))((("transaction fees", see="gas")))((("wallets","HD", see="hierarchical deterministic wallets")))((("wallets","MetaMask", see="MetaMask")))