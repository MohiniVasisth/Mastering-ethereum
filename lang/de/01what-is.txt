[role="pagenumrestart"]
[[wasist_kapitel]]
== Was ist Ethereum?

Ethereum wird von Vielen als "der Weltcomputer" beschrieben, doch was bedeutet das eigentlich? Beginnen wir mit einer wissenschaftlichen Eingrenzung und versuchen danach Ethereums Eigenschaften und Fähigkeiten mit einer praxisnahen Analyse aufzuschlüsseln. Dabei werden wir es gleichzeitig mit Bitcoin und anderen dezentralisierten Plattformen zum Informationsaustausch (oder einfach kurz "Blockchains") vergleichen.

Aus der Sicht der Informatik ist Ethereum eine deterministische, aber praktisch unbegrenzte Zustandsmaschine, die aus einem global zugänglichen Singleton-Zustand und einer virtuellen Maschine besteht, die Änderungen an diesem Zustand anbringt.

Aus praktischer Sicht ist Ethereum eine globale dezentrale quelloffene Infrastruktur, die Programme namens "Smart Contracts" ausführt. Es verwendet eine Blockchain zum Synchronisieren und Speichern von Statusänderungen des Systems, sowie eine Kryptowährung namens "Ether", um die Kosten für Ressourcen, die Code ausführen können zu beziffern und einzugrenzen.

Die Ethereum Plattform ermöglicht es Entwicklern, mächtige dezentralisierte Anwendungen mit eingebauten ökonomischen Funktionen zu erschaffen. Während sie hohe Verfügbarkeit, Überprüfbarkeit, Transparenz und Neutralität bietet, reduziert oder eliminiert sie die Möglichkeit zur Zensur und reduziert gewisse Kontrahentenrisiken.

[[bitcoin_vergleich]]
=== Vergleich mit Bitcoin

Viele Menschen werden mit Vorkenntnissen, insbesondere im Bezug auf Bitcoin, zu Ethereum kommen. Ethereum hat viele Gemeinsamkeiten mit anderen offenen Blockchains: es ist ein Peer-to-Peer-Netzwerk, das Teilnehmer verbindet, hat einen Konsensalgorithmus der gegenüber byzantinischen Fehlern tolerant ist und zur Synchronisierung von Statusaktualisierungen verwendet wird (eine proof-of-work Blockchain), es nutzt kryptografische Grundelemente wie digitale Signaturen und Hashes sowie eine digitale Währung (Ether).

Und doch unterscheiden sich sowohl der Zweck als auch die Konstruktion von Ethereum deutlich von den anderen offenen Blockchains, die Ethereum vorangegangen sind, einschließlich Bitcoin.

Ethereum hat nicht in erster Linie den Zweck, ein digitales Zahlungsnetzwerk zu sein. Während die Kryptowährung Ether sowohl integraler Bestandteil als auch für den Betrieb von Ethereum notwendig ist, ist Ether als Hilfswährung gedacht, um für die Nutzung der Ethereum-Plattform als Weltcomputer zu bezahlen.

Im Gegensatz zu Bitcoin, das eine sehr eingeschränkte Skriptsprache hat, ist Ethereum als programmierbare Allzweck-Blockchain konzipiert, auf der eine virtuelle Maschine ausgeführt wird, die Code beliebiger und unbegrenzter Komplexität ausführen kann. Während die Skriptsprache von Bitcoin absichtlich auf einfache True/False-Bewertungen der Bedingungen beim Ausgeben von Bitcoin beschränkt ist, ist die Sprache von Ethereum Turing-vollständig. Dies bedeutet, dass Ethereum auf direkte Weise als Allzweckcomputer fungieren kann.

[[blockchain_komponenten]]
Komponenten einer Blockchain

Die Komponenten einer freien, öffentlichen Blockchain sind (normalerweise):

* Ein Peer-to-Peer-Netzwerk (P2P), das Teilnehmer direkt verbindet und Transaktionen und Blöcke verifizierter Transaktionen verbreitet, basierend auf einer standardisierten "Gossip"-Übergabe: [ <span class="keep-together">Protokoll</span> ]
* Nachrichten in Form von Transaktionen, die Zustandsübergänge darstellen
* Eine Reihe von Konsensregeln, die bestimmen, was eine Transaktion ausmacht und was einen gültigen Zustandsübergang bewirkt
* Eine Zustandsmaschine, die Transaktionen gemäß den Konsensregeln verarbeitet
* Eine Kette kryptografisch gesicherter Blöcke, die als Protokoll aller verifizierten und akzeptierten Zustandsübergänge dient
* Ein Konsensalgorithmus, der die Kontrolle über die Blockchain dezentralisiert, indem die Teilnehmer gezwungen werden, bei der Durchsetzung der Konsensregeln zusammenzuarbeiten
* Ein spieltheoretisch fundiertes Anreizsystem (z. B. proof-of-work-Kosten plus Blockbelohnungen), um die Zustandsmaschine in einer offenen pass:[ <span class="keep-together">Umgebung</span> ] auf wirtschaftliche Weise zu sichern.
* Eine oder mehrere Open-Source-Software-Implementierungen der oben genannten Punkte - so genannte "Clients"

Alle oder die meisten Komponenten werden normalerweise in einem Softwarepaket zusammengefasst. Zum Beispiel wird beim  ((("Bitcoin Core")))((("bitcoind client")))Bitcoin die Referenzimplementierung vom Open-Source Projekt _Bitcoin Core_ entwickelt und als Client _bitcoind_ implementiert.  In Ethereum gibt es statt einer Referenzimplementierung eine  ((("Referenzspezifikation")))_Referenzspezifikation_, eine mathematische Beschreibung des Systems in dem Yellow Paper (siehe <<references>>). Es gibt eine Anzahl von Clients, welche der Referenzspezifikation entsprechend implementiert worden sind. 

In der Vergangenheit haben wir den Begriff " Blockchain" stellvertretend für alle gerade aufgelisteten Komponenten verwendet, als Kurzformel für die Kombination von Technologien, die alle beschriebenen Merkmale umfassen. Heute gibt es jedoch eine riesige Vielfalt von Blockchains mit unterschiedlichen Eigenschaften. Wir brauchen Unterscheidungsmerkmale, die uns helfen, die charakteristischen Eigenschaften der jeweiligen Blockchain zu verstehen, wie zum Beispiel _offen, öffentlich, global, dezentralisiert, neutral,_ und _zensur-resistent_, um die wichtigen hervortretenden Merkmale eines "Blockchain"-Systems zu identifizieren, die diese Komponenten ermöglichen.

Nicht alle Blockchains sind sich ebenbürtig. Wenn Ihnen jemand sagt, dass etwas eine Blockchain ist, haben Sie keine Antwort erhalten; vielmehr müssen Sie anfangen, eine Menge Fragen zu stellen, um zu klären, was gemeint wird, wenn das Wort "Blockchain" verwendet wurde. Beginnen Sie damit, nach einer Beschreibung der Komponenten in der vorhergehenden Liste zu fragen, und fragen Sie dann, welche Eigenschaften diese "Blockchain" aufweist. Zum Beispiel, ist sie _offen, öffentlich_ usw.

[[ethereum_geburt]]
=== Die Geburt von Ethereum

(((&quot;Ethereum (allgemein)&quot;, &quot;Geburt von&quot;))) Alle großen Innovationen lösen echte Probleme, und Ethereum ist keine Ausnahme. Ethereum wurde zu einer Zeit konzipiert, als die Menschen die Leistungsfähigkeit des Bitcoin-Modells erkannten und versuchten, über Kryptowährungsanwendungen hinauszugehen. Die Entwickler standen jedoch vor einem Dilemma: Sie mussten entweder auf Bitcoin aufbauen oder eine neue Blockchain starten. (((&quot;Bitcoin&quot;, &quot;Einschränkungen von&quot;))) Auf Bitcoin aufzubauen bedeutete, innerhalb der absichtlichen Einschränkungen des Netzwerks zu leben und zu versuchen, Behelfslösungen zu finden. Die begrenzte Anzahl von Transaktionstypen, Datentypen und Größen des Datenspeichers schien die Art der Anwendungen einzuschränken, die direkt auf Bitcoin ausgeführt werden konnten. Alles andere erforderte zusätzliche Schichten außerhalb der Kette, und dies machte viele der Vorteile der Verwendung einer öffentlichen Blockchain sofort zunichte. Für Projekte, die mehr Freiheit und Flexibilität benötigten, während sie in der Kette blieben, war eine neue Blockchain die einzige Option. Das bedeutete jedoch viel Arbeit: Bootstrapping aller Infrastrukturelemente, umfassende Tests usw.

(((&quot;Buterin, Vitalik&quot;, &quot;und Geburt von Ethereum&quot;))) Gegen Ende 2013 begann Vitalik Buterin, ein junger Programmierer und Bitcoin-Enthusiast, über eine weitere Erweiterung der Funktionen von Bitcoin und Mastercoin nachzudenken (ein Overlay-Protokoll, das Bitcoin erweiterte, um rudimentäre intelligente Verträge zu ermöglichen). Im Oktober dieses Jahres schlug Vitalik dem Mastercoin-Team einen allgemeineren Ansatz vor, der es flexiblen und skriptfähigen (aber nicht Turing-vollständigen) Verträgen ermöglichte, die spezialisierte Vertragssprache von Mastercoin zu ersetzen. Obwohl das Mastercoin-Team beeindruckt war, war dieser Vorschlag eine zu radikale Änderung, um in seine Entwicklungs-Roadmap zu passen.

Im Dezember 2013 veröffentlichte Vitalik ein Whitepaper, in dem die Idee hinter Ethereum beschrieben wurde: eine Turing-vollständige, universelle Blockchain. Ein paar Dutzend Menschen sahen diesen frühen Entwurf und halfen Vitalik durch ihr Feedback den Vorschlag weiterzuentwickeln.

Beide Autoren dieses Buches erhielten einen frühen Entwurf des Whitepapers und kommentierten es. Andreas M. Antonopoulos war von der Idee fasziniert und stellte Vitalik viele Fragen zur Verwendung einer separaten Blockchain, um Konsensregeln für die intelligente Vertragsausführung und die Auswirkungen einer Turing-vollständigen Sprache durchzusetzen. Andreas verfolgte die Fortschritte von Ethereum weiterhin mit großem Interesse, befand sich jedoch in einem frühen Stadium des Schreibens seines Buches &quot;Mastering Bitcoin&quot; und nahm erst viel später direkt an Ethereum teil. (((&quot;Wood, Dr. Gavin&quot;, &quot;und Geburt von Ethereum&quot;))) Dr. Gavin Wood war dagegen einer der ersten, der sich an Vitalik wandte und anbot, mit seinen C ++ - Programmierkenntnissen zu helfen. Gavin wurde Mitbegründer, Codesigner und CTO von Ethereum.

So erzählt es Vitalik in seinem Internet-Post http://bit.ly/2T2t6zs["Ethereum Prehistory"]: 

____
Dies war die Zeit, als das Ethereum-Protokoll vollständig meine eigene Schöpfung war. Von jetzt an begannen jedoch neue Teilnehmer, sich der Gemeinschaft anzuschließen. Der bei weitem prominenteste auf der Protokollseite war Gavin Wood...

Gavin ist es auch zu verdanken, dass sich die Vision von der Betrachtung von Ethereum als Plattform für den Aufbau von programmierbarem Geld mit blockchain-basierten Verträgen, die digitales Vermögen halten und sie nach vorgegebenen Regeln übertragen können, mit Feingefühl zu einer universellen Computerplattform verändert hat. Dies begann mit feinen Änderungen in der Betonung und Terminologie, und später wurde dieser Einfluss mit der zunehmenden Betonung des "Web 3"-Ensembles stärker, das Ethereum als ein Teil einer Reihe dezentralisierter Technologien ansah, wobei die zwei anderen Teile Whisper und Swarm waren.
____

Beginnend im Dezember 2013 verfeinerten und verbesserten Vitalik und Gavin die Idee und bauten gemeinsam die Protokollschicht auf, die zu Ethereum wurde.

Die Gründer von Ethereum dachten über eine unspezifische Blockchain ohne bestimmten Zweck nach, die eine Vielzahl von Anwendungen unterstützen kann, indem sie _programmiert_ wird. Die Idee war, dass durch die Verwendung einer Allzweck-Blockchain wie Ethereum ein Entwickler seine spezifische Anwendung programmieren kann, ohne die zugrunde liegenden Mechanismen von Peer-to-Peer-Netzwerken, Blockchains, Konsens-Algorithmen usw. implementieren zu müssen. Die Ethereum-Plattform wurde entwickelt, um diese Details zu abstrahieren und eine deterministische und sichere Programmierumgebung für dezentralisierte Blockchain-Anwendungen anzubieten.

Wie auch Satoshi haben Vitalik und Gavin nicht nur eine neue Technologie erfunden; sie kombinierten neue Erfindungen mit bestehenden Technologien auf neuartige Weise und lieferten den entsprechenden Prototyp-Code, um die Welt von ihrer Idee zu überzeugen.

Die Gründer haben jahrelang daran gearbeitet, die Vision zu realisieren und zu verfeinern. Am 30. Juli 2015 wurde der erste Ethereum-Block erzeugt. Der Computer der Welt begann der Welt zu dienen.

[NOTE]
====
Vitalik Buterins Artikel "A Prehistory of Ethereum" ("Eine Vorgeschichte des Ethereum") wurde im September 2017 veröffentlicht und bietet eine faszinierende Einsicht in die frühesten Momente von Ethereum aus seiner persönlichen Perspektive.

Sie können ihn lesen, unter 
https://vitalik.ca/general/2017/09/14/prehistory.html[].
====

[[entwicklungsetappen]]
=== Ethereums Vier Entwicklungsetappen

((("Ethereum (allgemein)","vier Entwicklungsetappen")))Die Entwicklung von Ethereum wurde in vier verschiedenen Etappen geplant, mit wesentlichen Änderungen in jeder Etappe. ((("Hard-Forks", seealso="DAO; andere Hard-Forks, z. B. Spurious Dragon")))Eine Etappe kann Softwareversionen enthalten, die als "Hard-Forks" bezeichnet werden und welche die Funktionalität auf eine Weise ändern, die nicht abwärtskompatibel ist .

The four main development stages are codenamed _Frontier_, _Homestead_, _Metropolis_, and _Serenity_. The intermediate hard forks that have occurred (or are planned) to date are codenamed _Ice Age_, _DAO_, _Tangerine Whistle_, _Spurious Dragon_, _Byzantium_, and _Constantinople_. Both the development stages and the intermediate hard forks are shown on the following timeline, which is "dated" by  block number:


Block #0:: ((("Frontier")))__Frontier__&#x2014;The initial stage of Ethereum, lasting from July 30, 2015, to March 2016.

Block #200,000:: ((("Ice Age")))__Ice Age__&#x2014;A hard fork to introduce an exponential difficulty increase, to motivate a transition to PoS when ready.

Block #1,150,000:: ((("Homestead")))__Homestead__&#x2014;The second stage of Ethereum, launched in March 2016.

Block #1,192,000:: ((("DAO (Decentralized Autonomous Organization)")))__DAO__&#x2014;A hard fork that reimbursed victims of the hacked DAO contract and caused Ethereum and Ethereum Classic to split into two competing systems.

Block #2,463,000:: ((("Tangerine Whistle")))__Tangerine Whistle__&#x2014;A hard fork to change the gas calculation for certain I/O-heavy operations and to clear the accumulated state from a denial-of-service (DoS) attack that exploited the low gas cost of those operations.

Block #2,675,000:: ((("Spurious Dragon")))__Spurious Dragon__&#x2014;A hard fork to address more DoS attack vectors, and another state clearing. Also, a replay attack protection mechanism.


Block #4,370,000:: ((("Metropolis")))((("Byzantium fork")))__Metropolis Byzantium__&#x2014;Metropolis is the third stage of Ethereum, current at the time of writing this book, launched in October 2017. Byzantium is the first of two hard forks planned for Metropolis.


After Byzantium, there is one more hard fork planned for Metropolis: ((("Constantinople fork")))((("Serenity")))Constantinople. Metropolis will be followed by the final stage of Ethereum's deployment, codenamed Serenity.


[[allzweck_blockchain]]
=== Ethereum: Eine Allzweck-Blockchain

((("Bitcoin","Ethereum blockchain compared to Bitcoin blockchain")))((("Ethereum (generally)","as general-purpose blockchain")))The original blockchain, namely Bitcoin's blockchain, tracks the state of units of bitcoin and their ownership. ((("distributed state machine, Ethereum as")))You can think of Bitcoin as a distributed consensus _state machine_, where transactions cause a global _state transition_, altering the ownership of coins. The state transitions are constrained by the rules of consensus, allowing all participants to (eventually) converge on a common (consensus) state of the system, after several blocks are mined.

Ethereum is also a distributed state machine. But instead of tracking only the state of currency ownership, ((("key-value tuple")))Ethereum tracks the state transitions of a general-purpose data store, i.e., a store that can hold any data expressible as a _key–value tuple_. A key–value data store holds arbitrary values, each referenced by some key; for example, the value "Mastering Ethereum" referenced by the key "Book Title". In some ways, this serves the same purpose as the data storage model of _Random Access Memory_ (RAM) used by most general-purpose computers. Ethereum has memory that stores both code and data, and it uses the Ethereum blockchain to track how this memory changes over time. Like a general-purpose stored-program computer, Ethereum can load code into its state machine and _run_ that code, storing the resulting state changes in its blockchain. Two of the critical differences from most general-purpose computers are that Ethereum state changes are governed by the rules of consensus and the state is distributed globally. Ethereum answers the question: "What if we could track any arbitrary state and program the state machine to create a world-wide computer operating under consensus?"

[[ethereum_komponenten]]
=== Ethereums Komponenten

((("blockchain","components of")))((("Ethereum (generally)","blockchain components")))In Ethereum, the components of a blockchain system described in <<blockchain_components>> are, more specifically:


P2P network:: Ethereum runs on the _Ethereum main network_, which is addressable on TCP port 30303, and runs a protocol called _ÐΞVp2p_.

Consensus rules:: Ethereum's consensus rules are defined in the reference specification, the Yellow Paper (see <<references>>).

Transactions:: Ethereum transactions are network messages that include (among other things) a sender, recipient, value, and data payload.

[role="pagebreak-before"]
State machine:: Ethereum state transitions are processed by the _Ethereum Virtual Machine_ (EVM), a stack-based virtual machine that executes _bytecode_ (machine-language instructions). EVM programs, called "smart contracts," are written in high-level languages (e.g., Solidity) and compiled to bytecode for execution on the EVM.

Data structures:: Ethereum's state is stored locally on each node as a _database_ (usually Google's LevelDB), which contains the transactions and system state in a serialized hashed data structure called a _Merkle Patricia Tree_.

Consensus algorithm:: Ethereum uses Bitcoin's consensus model, Nakamoto Consensus, which uses sequential single-signature blocks, weighted in importance by PoW to determine the longest chain and therefore the current state. However, there are plans to move to a PoS weighted voting system, codenamed _Casper_, in the near future.

Economic security:: Ethereum currently uses a PoW algorithm called _Ethash_, but this will eventually be dropped with the move to PoS at some point in the future.

Clients:: Ethereum has several interoperable implementations of the client software, the most prominent of which are _Go-Ethereum_ (_Geth_) and _Parity_.

[[literaturhinweise]]
==== Weiteres Lesematerial

Die folgenden Angaben bleten zusätzliche Informationen zu den hier erwähnten Techniken

* Die Gelben Seiten zu Ethereum (Ethereum Yellow Paper)
https://ethereum.github.io/yellowpaper/paper.pdf

* Die Beigen Seiten zu Ethereum (Ethereum Beige Paper), eine Überarbeitung des "Ethereum Yellow Papers" für ein breiteres Publikum mit weniger Formalismus: 
https://github.com/chronaeon/beigepaper

* ÐΞVp2p Netzwerkprotokoll:
http://bit.ly/2quAlTE

* Ressourcenliste der Ethereum Virtual Machine:
http://bit.ly/2PmtjiS

* LevelDB-Datenbank (wird am häufigsten zum Speichern der lokalen Kopie der Blockchain verwendet):
https://github.com/google/leveldb

* Merkle Patricia Hash Bäume:
https://github.com/ethereum/wiki/wiki/Patricia-Tree

* Ethash PoW Algorithmus:
https://github.com/ethereum/wiki/wiki/Ethash

* Casper PoS v1 Implementierungshandbuch:
http://bit.ly/2DyPr3l

* Go-Ethereum (Geth) Client:
https://geth.ethereum.org/

* Parity Ethereum Client:
https://parity.io/

[[turing_vollständigkeit]]
=== Ethereum und Turing-Vollständigkeit

((("Ethereum (generally)","Turing completeness and")))((("Turing completeness","Ethereum and")))As soon as you start reading about Ethereum, you will immediately encounter the term "Turing complete." Ethereum, they say, unlike Bitcoin, is Turing complete. What exactly does that mean?

((("Turing, Alan")))The term refers to English mathematician Alan Turing, who is considered the father of computer science. In 1936 he created a mathematical model of a computer consisting of a state machine that manipulates symbols by reading and writing them on sequential memory (resembling an infinite-length paper tape). With this construct, Turing went on to provide a mathematical foundation to answer (in the negative) questions about _universal computability_, meaning whether all problems are solvable. He proved that there are classes of problems that are uncomputable. ((("halting problem")))Specifically, he proved that the _halting problem_ (whether it is possible, given an arbitrary program and its input, to determine whether the program will eventually stop running) is not solvable.

((("Universal Turing machine (UTM)")))((("UTM (Universal Turing machine)")))Alan Turing further defined a system to be _Turing complete_ if it can be used to simulate any Turing machine. Such a system is called a _Universal Turing machine_ (UTM).

Ethereum's ability to execute a stored program, in a state machine called the Ethereum Virtual Machine, while reading and writing data to memory makes it a Turing-complete system and therefore a UTM. Ethereum can compute any algorithm that can be computed by any Turing machine, given the limitations of finite memory.

Ethereum's groundbreaking innovation is to combine the general-purpose computing architecture of a stored-program computer with a decentralized blockchain, thereby creating a distributed single-state (singleton) world computer. Ethereum programs run "everywhere," yet produce a common state that is secured by the rules of pass:[<span class="keep-together">consensus</span>].

[[turing_vollständigkeit_merkmal]]
==== Turing-Vollständigkeit als "Merkmal"

("Turing-Vollständigkeit als Eigenschaft") Wenn man hört, dass Ethereum Turing-Vollständig ist, könnte man meinen, dass es sich hier um ein _Merkmal_ handelt, das in Turing-Unvollständigen-Systemen nicht vorkommt. Dabei funktioniert es gerade umgekehrt. Turing-Vollständigkeit isf auf einfache Art und Weise realisierbar. Tatsächlich hat die einfachste bekannte Turingmaschine (http://bit.ly/2ABft33) lediglich vier Zustände und kommt mit sechs Symbolen aus, wobei die Definition eines einzelnen Zustands nur 22 Instuktionen beeinhaltet. In der Tat stellt sich die Turing-Vollständigkeit von einem System bisweilen erst zufällig heraus. Einige lustige Beispiele solcher Art können hier nachgelesen werden: http://bit.ly/2Og1VgX[] .

However, Turing completeness is very dangerous, particularly in open access systems like public blockchains, because of the halting problem we touched on earlier. For example, modern printers are Turing complete and can be given files to print that send them into a frozen state. The fact that Ethereum is Turing complete means that any program of any complexity can be computed by Ethereum. But that flexibility brings some thorny security and resource management problems. An unresponsive printer can be turned off and turned back on again. That is not possible with a public blockchain.

[[turing_vollständigkeit_auswirkungen]]
==== Auswirkungen der Turing-Vollständigkeit

((("Turing completeness","implications of")))Turing proved that you cannot predict whether a program will terminate by simulating it on a computer. In simple terms, we cannot predict the path of a program without running it. ((("infinite loops")))Turing-complete systems can run in "infinite loops," a term used (in oversimplification) to describe a program that does not terminate. It is trivial to create a program that runs a loop that never ends. But unintended never-ending loops can arise without warning, due to complex interactions between the starting conditions and the code. In Ethereum, this poses a challenge: every participating node (client) must validate every transaction, running any smart contracts it calls. But as Turing proved, Ethereum can't predict if a smart contract will terminate, or how long it will run, without actually running it (possibly running forever). Whether by accident or on purpose, a smart contract can be created such that it runs forever when a node attempts to validate it. This is effectively a DoS attack. And of course, between a program that takes a millisecond to validate and one that runs forever are an infinite range of nasty, resource-hogging, memory-bloating, CPU-overheating programs that simply waste resources. In a world computer, a program that abuses resources gets to abuse the world's resources. How does Ethereum constrain the resources used by a smart contract if it cannot predict resource use in advance?

((("EVM (Ethereum Virtual Machine)","gas and")))((("gas","as counter to Turing completeness")))To answer this challenge, Ethereum introduces a metering mechanism called _gas_. As the EVM executes a smart contract, it carefully accounts for every instruction (computation, data access, etc.). Each instruction has a predetermined cost in units of gas. When a transaction triggers the execution of a smart contract, it must include an amount of gas that sets the upper limit of what can be consumed running the smart contract. The EVM will terminate execution if the amount of gas consumed by computation exceeds the gas available in the transaction. Gas is the mechanism Ethereum uses to allow Turing-complete computation while limiting the resources that any program can consume.

The next question is, 'how does one get gas to pay for computation on the Ethereum world computer?' You won't find gas on any exchanges. ((("ether (generally)","gas and")))It can only be purchased as part of a transaction, and can only be bought with ether. Ether needs to be sent along with a transaction and it needs to be explicitly earmarked for the purchase of gas, along with an acceptable gas price. Just like at the pump, the price of gas is not fixed. Gas is purchased for the transaction, the computation is executed, and any unused gas is refunded back to the sender of the transaction.

[[DApp]]
=== Von Allzweck-Blockchains zu Dezentralisierten Anwendungen (DApps)

((("DApps (decentralized applications)","Ethereum as platform for")))((("Ethereum (generally)","DApps and")))Ethereum started as a way to make a general-purpose blockchain that could be programmed for a variety of uses. But very quickly, Ethereum's vision expanded to become a platform for programming DApps. DApps represent a broader perspective than smart contracts. A DApp is, at the very least, a smart contract and a web user interface. More broadly, a DApp is a web application that is built on top of open, decentralized, peer-to-peer infrastructure services.

Eine DApp besteht zumindest aus:

- Smart Contracts auf einer Blockchain
- Eine Web-basierte Benutzerschnittstelle (User Interface)

Darüber hinaus enthalten viele DApps andere dezentrale Komponenten, wie z.B.:

- Ein dezentrales (P2P) Speicherprotokoll und mit entsprechender Speicherplattform
- Ein dezentrales (P2P) Messaging-Protokoll mit entsprechender Kommunikationsplattform

[TIP]
====
Der Begriff DApps kann auch als _&#208;Apps_ geschrieben werden. Das Zeichen &#208; ist der Lateinische Buchstabe genannt "ETH," also eine Anspielung an Ethereum. Um diesen Buchstaben zu schreiben, verwenden Sie den Unicode Codepoint +0xD0+, oder falls notwendig den HTML Buchstaben +eth+ (oder +#208+ in dezimaler Darstellung).
====

[[WWW_weiterentwicklung]]
=== Das dritte Zeitalter des Internets

((("DApps (decentralized applications)","web3 and")))((("Ethereum (generally)","web3 and")))((("web3")))In 2004 the term "Web 2.0" came to prominence, describing an evolution of the web toward user-generated content, responsive interfaces, and interactivity. Web 2.0 is not a technical specification, but rather a term describing the new focus of web pass:[<span class="keep-together">applications</span>].

The concept of DApps is meant to take the World Wide Web to its next natural evolutionary stage, introducing decentralization with peer-to-peer protocols into every aspect of a web application. The term used to describe this evolution is _web3_, meaning the third "version" of the web. ((("Wood, Dr. Gavin","and web3")))First proposed by Dr. Gavin Wood, web3 represents a new vision and focus for web applications: from centrally owned and managed applications, to applications built on decentralized protocols.

In later chapters we'll explore the Ethereum web3.js JavaScript library, which bridges JavaScript applications that run in your browser with the Ethereum blockchain. The web3.js library also includes an interface to a P2P storage network called _Swarm_ and a P2P messaging service called _Whisper_. With these three components included in a JavaScript library running in your web browser, developers have a full application development suite that allows them to build web3 DApps.

[[entwicklungskultur]]
=== Ethereums Entwicklungskultur

((("development culture, Ethereum")))((("Ethereum (generally)","development culture")))So far we've talked about how Ethereum's goals and technology differ from those of other blockchains that preceded it, like Bitcoin. Ethereum also has a very different development culture.

((("Bitcoin","development culture")))In Bitcoin, development is guided by conservative principles: all changes are carefully studied to ensure that none of the existing systems are disrupted. For the most part, changes are only implemented if they are backward compatible. Existing clients are allowed to opt-in, but will continue to operate if they decide not to upgrade.

((("backward compatibility, Ethereum vs. Bitcoin")))In Ethereum, by comparison, the community's development culture is focused on the future rather than the past. The (not entirely serious) mantra is "move fast and break things." If a change is needed, it is implemented, even if that means invalidating prior assumptions, breaking compatibility, or forcing clients to update. Ethereum's development culture is characterized by rapid innovation, rapid evolution, and a willingness to deploy forward-looking improvements, even if this is at the expense of some backward compatibility.

What this means to you as a developer is that you must remain flexible and be prepared to rebuild your infrastructure as some of the underlying assumptions change. One of the big challenges facing developers in Ethereum is the inherent contradiction between deploying code to an immutable system and a development platform that is still evolving. You can't simply "upgrade" your smart contracts. You must be prepared to deploy new ones, migrate users, apps, and funds, and start over.

Ironically, this also means that the goal of building systems with more autonomy and less centralized control is still not fully realized. Autonomy and decentralization require a bit more stability in the platform than you're likely to get in Ethereum in the next few years. In order to "evolve" the platform, you have to be ready to scrap and restart your smart contracts, which means you have to retain a certain degree of control over them.

But, on the positive side, Ethereum is moving forward very fast. There's little opportunity for "bike-shedding," an expression that means holding up development by arguing over minor details such as how to build the bicycle shed at the back of a nuclear power station. If you start bike-shedding, you might suddenly discover that while you were distracted the rest of the development team changed the plan and ditched bicycles in favor of autonomous hovercraft.

Eventually, the development of the Ethereum platform will slow down and its interfaces will become fixed. But in the meantime, innovation is the driving principle. You'd better keep up, because no one will slow down for you.

[[warum_lernen]]
=== Warum Ethereum lernen?

((("blockchain","Ethereum as developer&#39;s blockchain")))((("Ethereum (generally)","reasons to learn")))Blockchains have a very steep learning curve, as they combine multiple disciplines into one domain: programming, information security, cryptography, economics, distributed systems, peer-to-peer networks, etc. Ethereum makes this learning curve a lot less steep, so you can get started quickly. But just below the surface of a deceptively simple environment lies a lot more. As you learn and start looking deeper, there's always another layer of complexity and wonder.

Ethereum is a great platform for learning about blockchains and it's building a massive community of developers, faster than any other blockchain platform. More than any other, Ethereum is a _developer's blockchain_, built by developers for developers. A developer familiar with JavaScript applications can drop into Ethereum and start producing working code very quickly. For the first few years of Ethereum's life, it was common to see T-shirts announcing that you can create a token in just five lines of code. Of course, this is a double-edged sword. It's easy to write code, but it's very hard to write _good_ and _secure_ code.

[[lehrziele]]
=== Was dieses Buch Ihnen beibringen wird

Dieses Buch beschäftigt sich mit Ethereum und untersucht jede Komponente. Sie beginnen mit einer einfachen Transaktion, analysieren die Funktionsweise, erstellen einen einfachen Smart Contract, verbessern diesen Vertrag und folgen seiner Reise durch das Ethereum-System.

You will learn not only how to use Ethereum&#x2014;how it works&#x2014;but also why it is designed the way it is. You will be able to understand how each of the pieces works, and how they fit together and why.(((range="endofrange", startref="ix_01what-is-asciidoc0")))((("account","contract", see="smart contracts")))((("assymetric cryptography", see="public key cryptography")))((("BIPs", see="Bitcoin improvement proposals")))((("burn", see="ether burn")))((("cryptography","asymmetric", see="public key cryptography")))((("decentralized applications", see="DApps")))((("Decentralized Autonomous Organization", see="DAO")))((("default function", see="fallback function")))((("deterministic (seeded) wallets","hierarchical", see="hierarchical deterministic wallets")))((("DoS attacks", see="denial of service attacks")))((("ECDSA", see="Elliptic Curve Digital Signature Algorithm")))((("ETC", see="Ethereum Classic")))((("Ethereum (generally)","clients", see="clients, Ethereum")))((("Ethereum Improvement Proposals", see="EIP entries")))((("Ethereum Name Service", see="ENS")))((("Ethereum Virtual Machine", see="EVM")))((("Externally Owned Account", see="EOA")))((("fees", see="gas")))((("ICOs", see="Initial Coin Offerings")))((("Mastering Ethereum Token", see="METoken")))((("MEW", see="MyEtherWallet")))((("names/naming", see="ENS (Ethereum Name Service)")))((("NFTs", see="nonfungible tokens")))((("PoS", see="proof of stake")))((("PoW", see="proof of work")))((("PoWHC", see="Proof of Weak Hands Coin")))((("Remote Procedure Call (RPC) commands", see="JSON-RPC API")))((("RPC (Remote Procedure Call) commands", see="JSON-RPC API")))((("Secure Hash Algorithm", see="SHA entries")))((("seeded wallets", see="deterministic wallets")))((("smart contracts","Vyper and", see="Vyper")))((("smartphones", see="mobile (smartphone) wallets")))((("storage", see="data storage")))((("SUICIDE", see="SELFDESTRUCT opcode")))((("synchronization", see="fast synchronization")))((("synchronization", see="first synchronization")))((("transaction fees", see="gas")))((("wallets","HD", see="hierarchical deterministic wallets")))((("wallets","MetaMask", see="MetaMask")))