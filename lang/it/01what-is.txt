[role="pagenumrestart"]
[[whatis_chapter]]
== Cos'è Ethereum?

((("Ethereum (generally)","about", id="ix_01what-is-asciidoc0", range="startofrange")))Ethereum ((("world computer, Ethereum as"))) è spesso descritto come "il computer globale.&#x201d; Ma cosa significa? Iniziamo con una descrizione di tipo informatico, e poi cerchiamo di decifrarla con un'analisi più pratica delle capacità e caratteristiche di Ethereum, confrontandolo con Bitcoin ed altre piattaforme decentralizzate di scambio di informazioni (o "blockchain" in breve). 

Da un punto di vista informatico, Ethereum è una macchina a stati deterministica ma praticamente illimitata, costituita da un stato singolo accessibile globalmente e da una macchina virtuale che applica le modifiche allo stato.

Da una prospettiva piu pratica, Etherum è un'infrastruttura informatica open source, decentralizzata a livello globale che esegue programmi chiamati _smart contracts_.  Utilizza una blockchain per sincronizzare e memorizzare modifiche allo stato di sistema, insieme ad una criptovaluta chiamata _ether_ per misurare e ridurre i costi delle risorse di esecuzione.

La piattaforma Ethereum consente agli sviluppatori di programmare potenti applicazioni decentralizzate con funzioni economiche integrate. Nel fornire alta disponibilità, verificabilità, trasparenza, e neutralità, riduce o elimina inoltre la censura e riduce alcuni rischi di controparte.

[[bitcoin_comparison]]
=== Rispetto a Bitcoin

((("Bitcoin","Ethereum rispetto a")))((("Ethereum (generalmente)","Bitcoin rispetto a")))Molte persone arriveranno ad Ethereum con qualche esperienza precedente di criptovalute, specialmente Bitcoin. Ethereum condivide molti elementi comuni con altre blockchain aperte: una rete peer-to-peer che connette i partecipanti, un algoritmo di consenso Byzantine fault&#x2013;tolerant per la sincronizzazione degli aggiornamenti di stato (una blockchain proof-of-work), l'uso di primitive crittografiche come firme digitali e hash, ed una valuta digitale (ether).

Eppure, in molti modi, sia lo scopo che la costruzione di Ethereum sono sorprendentemente diversi da quelli delle blockchain aperte che l'hanno preceduta, inclusa Bitcoin.

((("Ethereum (generalmente)","scopo di")))Lo scopo principale di Ethereum non è di essere una rete di pagamento di valuta digitale. ((("utility currency, ether as")))Mentre la valuta digitale ether è sia parte integrante che necessaria per il funzionamento di Ethereum, ether e' intesa come una _utility currency_ da pagare per l'uso della piattaforma Ethereum come computer globale.

A differenza di Bitcoin, che ha un linguaggio di scripting molto limitato, Ethereum è progettato per essere una blockchain programmabile general-purpose che esegue una _macchina virtuale_ capace di eseguire codice di complessita arbitraria e illmitata. Mentre Il linguaggio di scripting di Bitcoin è, intenzionalmente, limitato alla semplice valutazione vero/falso di condizioni di spesa, Il linguaggio di Ethereum è _Turing completo_, intendendo che Ethereum può funzionare semplicemente come un computer general-purpose.

[[componenti_blockchain]]
=== Componenti di una Blockchain

((("blockchain", componenti di")))((("Ethereum (generalmente)","componenti blockchain")))I componenti di una blockchain aperta, pubblica sono (generalmente):

Una rete peer-to-peer (P2P) che connette i partecipanti e propaga le transazioni ed i blocchi di transazioni verificate, basandosi su un protocollo standardizzato di "gossip".
* Messaggi, nella forma di transazioni, che rappresentano transizioni di stato
* Un insieme di regole di consenso, che governano cosa costituisce una transazione e cosa rende valida una transizione di stato
* Una macchina a stati che processa le transazioni secondo le regole di consenso.
* Una catena di blocchi crittograficamente sicuri che agisce come registro di tutte le transizioni di stato verificate e accettate.
* Un algoritmo di consenso che decentralizza il controllo sulla blockchain, forzando i partecipanti a cooperare nell'applicazione delle regole di consenso
Uno schema di incentivazione basato sulla teoria dei giochi (es. i costi del proof-of-work sommati alla ricompensa per blocco) per proteggere economicamente la macchina a stati in un ambiente aperto.
Una o piu implementazioni dei suddetti ("client")

Tutti o la maggior parte di questi componenti sono solitamente combinate in un unico client software. Ad esempio, in ((("Bitcoin Core")))((("bitcoinid client")))Bitcoin, l'implementazione di riferimento è sviluppata dal progetto open source _Bitcoin Core_ ed implementata come client _bitcoind_. In Ethereum, piuttosto che un'implementazione c'e' una ((("specifica di riferimento")))_specifica di riferimento_, una descrizione matematica del sistema nello Yellow Paper (see<<references>>). Ci sono diversi client, che sono sviluppati seguendo la specifica di riferimento.

In passato, il termine "blockchain" veniva usato per indicare l'insieme di tutti i componenti appena elencati, ovvero per fare riferimento a qualsiasi combinazione di tecnologie e componenti che esibisse tutte le caratteristiche sopra descritte. Al giorno d'oggi, tuttavia, esiste tutta una varità di "blockchain" con proprietà alquanto diverse tra loro. Ora dobbiamo usare aggettivi per aiutarci ad identificare le caratteristiche più importanti che emergono nel sistema di "blockchain" in questione, come, ad esempio,  _aperta, pubblica, globale, decentralizzata, neutrale,_ e _resistente alla censura_.

Non tutti i sistemi di "blockchain" sono uguali tra loro. Quando qualcuno afferma che qualcosa è una "blockchain", afferma poco o nulla; per fare chiarezza su ciò che l'interlocutore intende quando usa quella parola è necessario porre diverse domande. Come prima cosa occorre farsi descrivere da quali componenti essa è composta, successivamente, occorre identificare le caratteristiche che il sistema esibisce (essere _aperto, pubblico_, etc.).     

[[ethereum_nascita]]
=== La Nascita di Ethereum 

((("Ethereum (generalmente)","nascita di")))Tutte le grandi innovazioni risolvono problemi reali, ed Ethereum non fa eccezione. Ethereum è stato concepito in un momento in cui le persone hanno riconosciuto il potere del modello Bitcoin, e stavano cercando di andare oltre le applicazioni della criptovaluta. Ma gli sviluppatori hanno dovuto affrontrare un problema: sviluppare qualcosa basato su Bitcoin o sviluppare una nuova blockchain. ((("Bitcoin","limitations of")))Basarsi su Bitcoin significava convivere con i limiti intenzionali della rete e cercare di aggirare il problema con soluzioni alternative. Il set ridotto di tipi di transazioni, tipi di dati, e la dimensione dell'archivio dati sembravano limitare il tipo di applicazioni che possono essere eseguite direttamente su Bitcoin; qualsiasi altra cosa avrebbe richiesto dei livelli aggiuntivi off-chain, e questo avrebbe immediatamente negato molti dei vantaggi derivanti dall'utilizzo di una blockchain pubblica. Per progetti che richiedevano più libertà e flessibilità rimanendo on-chain, una nuova blockchain era l'unica opzione possibile. Ma questo ha richiesto un sacco di lavoro: avvio di tutti gli elementi dell'infrastruttura, test dettagliati, ecc.

((("Buterin, Vitalik","e nascita di Ethereum"))) Verso la fine del 2013, Vitalik Buterin, un giovane programmatore ed appassionato di Bitcoin, ha iniziato a pensare di estendere ulteriormente le capacità di Bitcoin e Mastercoin (un protocollo sovrapposto che estendeva Bitcoin offrendo smart contract rudimentali). Nell'ottobre dello stesso anno, Vitalik propose un approccio più generalizzato al team di Mastercoin, che consentiva a contratti flessibili e programmabili (ma non Turing completi) di sostituire il linguaggio specializzato dei "contratti" di Mastercoin. Nonostante il team di Mastercoin sia rimasto colpito, questa proposta era un cambiamento troppo radicale per adattarsi alla loro roadmap di sviluppo.

Nel dicembre 2013, Vitalik condivise per la prima volta un whitepaper che delineava l'idea alla base di Ethereum: una blockchain Turing completa per applicazioni generiche. Poche decine di persone hanno visto questa prima bozza e hanno offerto un feedback, aiutando Vitalik a far evolvere la proposta.

Entrambi gli autori di questo libro hanno ricevuto una prima bozza del whitepaper e lo hanno commentato. Andreas M. Antonopoulos è stato incuriosito dall'idea e ha posto a Vitalik molte domande sull'uso di una blockchain separata per imporre regole di consenso sull'esecuzione di smart contract e sulle implicazioni di un linguaggio Turing completo. Andreas ha continuato a seguire i progressi di Ethereum con grande interesse, ma era nelle prime fasi di scrittura del suo libro _Mastering Bitcoin_, e non ha partecipato direttamente a Ethereum fino a molto tempo dopo. ((("Wood, Dr. Gavin", "e nascita di Ethereum"))) Dr. Gavin Wood, invece, è stata una delle prime persone a contattare Vitalik e ad offrirsi di aiutarlo con le sue capacità di programmazione in C++. Gavin divenne cofondatore, coprogettista e CTO di Ethereum.

Come racconta Vitalik nel suo http://bit.ly/2T2t6zs["Ethereum Prehistory" post]: 

____
Questo era il momento in cui il protocollo Ethereum era interamente una mia creazione. Da qui in poi, invece, nuovi partecipanti hanno iniziato ad unirsi all'ovile. Di gran lunga il più importante dal punto di vista del protocollo era Gavin Wood...

Gavin può anche essere in gran parte accreditato per il sottile cambiamento nella visione di Ethereum da una piattaforma per la costruzione di denaro programmabile, con contratti basati su blockchain che possono contenere risorse digitali e trasferirle secondo regole prestabilite, a una piattaforma informatica per scopi generici. Ciò è iniziato con impercettibili cambiamenti nell'enfasi e nella terminologia, e in seguito questa influenza è diventata più forte con la crescente enfasi sull'ensemble "Web 3", che ha visto Ethereum come un pezzo di una suite di tecnologie decentralizzate, le altre due sono Whisper e Swarm.
____

A partire da dicembre 2013, Vitalik e Gavin hanno perfezionato ed evoluto l'idea, costruendo insieme il protocollo che è diventato Ethereum.

I fondatori di Ethereum stavano pensando ad una blockchain senza uno scopo specifico, che potesse supportare un'ampia varietà di applicazioni _programmate_. L'idea era che usando una blockchain general-purpose come Ethereum, uno sviluppatore potesse programmare la sua particolare applicazione senza dover implementare i sottostanti meccanismi di reti peer-to-peer, blockchain, algoritmi di consenso, ecc. La piattaforma Ethereum è stata progettata per astrarre questi dettagli e fornire un ambiente di sviluppo deterministico e sicuro per applicazioni blockchain decentralizzate.  

Proprio come Satoshi, Vitalik e Gavin non si limitarono a inventare una nuova tecnologia; hanno combinato le nuove invenzioni con le tecnologie esistenti in un modo nuovo e hanno sviluppato il codice prototipale per dimostrare le loro idee al mondo.

I fondatori hanno lavorato per anni, costruendo e perfezionando la visione. E il 30 luglio 2015 è stato estratto il primo blocco di Ethereum. Il computer mondiale ha iniziato a servire il mondo.

[NOTE]
====
L'articolo "A Prehistory of Ethereum" di Vitalik Buterin è stato pubblicato a settembre 2017 e offre un'affascinante visione in prima persona dei primi momenti di Ethereum.

Puoi leggerlo al
https://vitalik.ca/general/2017/09/14/prehistory.html[].
====

[[development_stages]]
Le quattro fasi di sviluppo di Ethereum

((("Ethereum (generalmente), "quattro fasi di sviluppo))) Lo sviluppo di Ethereum è stato pianificato su quattro fasi distinte, con importanti cambiamenti che si verificano in ciascuna fase. ((("hard forks", seealso = "DAO; altri specifici hard fork, ad esempio: Spurious Dragon"))) Una fase può includere sotto-versioni, note come "hard forks", che cambiano funzionalità in modo da non essere compatibili con le versioni precedenti .

Le quattro fasi di sviluppo principali sono denominate in codice _Frontier_, _Homestead_, _Metropolis_ e _Serenity_. Gli hard fork intermedi che si sono verificati (o sono pianificati) fino ad oggi sono denominati in codice _Ice Age_, _DAO_, _Tangerine Whistle_, _Spurious Dragon_, _Byzantium_ e _Constantinople_. Sia le fasi di sviluppo che gli hard fork intermedi sono mostrate nella seguente sequenza temporale, che è "datata" dal numero di blocco:


Block #0:: ((("Frontier"))) __ Frontier __— La fase iniziale di Ethereum, durata dal 30 luglio 2015 a marzo 2016.

Blocco #200.000:: ((("Ice Age"))) __ Ice Age __— Un hard fork per introdurre un aumento esponenziale della difficoltà, per motivare una transizione al PoS quando sarà pronto.

Block #1.150.000:: ((("Homestead"))) __ Homestead __— La seconda fase di Ethereum, lanciata a marzo 2016.

Blocco #1.192.000:: ((("DAO (Decentralized Autonomous Organization)"))) __ DAO __— Un hard fork che ha rimborsato le vittime del contratto DAO violato e ha causato la divisione di Ethereum ed Ethereum Classic in due sistemi concorrenti.

Blocco #2.463.000:: (((("Tangerine Whistle"))) __ Tangerine Whistle __— Un hard fork per cambiare il calcolo del gas per alcune operazioni I/O pesanti e per cancellare lo stato accumulato da un attacco denial-of-service (DoS) che ha sfruttato il basso costo del gas di tali operazioni.

Blocco #2.675.000:: ((("Spurious Dragon"))) __Spurious Dragon__— Un hard fork per risolvere più vettori di attacchi DoS e un'altra bonifica dello stato. Inoltre, un meccanismo di protezione dai replay-attack.


Blocco #4.370.000:: ((("Metropolis")))((("Byzantium fork"))) __ Metropolis Byzantium __— Metropolis è la terza fase di Ethereum, in vigore al momento della stesura di questo libro, lanciata a ottobre 2017. Bisanzio è il primo di due hard fork progettati per Metropolis.


Dopo Byzantium, è prevista un altro hard fork per Metropolis: ((("Costantinople fork))) ((("Serenity"))) Costantinople. A Metropolis seguirà la fase finale del deploy di Ethereum, nome in codice Serenity.


[[blockchain_generica]]
=== Ethereum: una Blockchain generica

((("Bitcoin", "Blockchain di Ethereum rispetto alla Blockchain di Bitcoin")))(((("Ethereum (generalmente)", "come blockchain generica))) La blockchain originale, ovvero la blockchain di Bitcoin, tiene traccia dello stato di unità di bitcoin e del loro possesso. ((("macchina a stati distribuita, Ethereum come"))) Puoi pensare a Bitcoin come a una _macchina a stati_ a consenso distribuito, in cui le transazioni causano una _transizione di stato_ globale, cambiando i proprietari delle monete. Le transizioni di stato sono vincolate dalle regole del consenso, permettendo a tutti i partecipanti di convergere (alla fine) su uno stato comune (di consenso) del sistema, dopo che sono stati estratti diversi blocchi.

Ethereum è anche una macchina a stati distribuita. Ma invece di tenere traccia solo dello stato della proprietá della valuta, ((("chiave-valore- tupla")))Ethereum traccia le transazioni di stato di un data store general-purpose, cioè uno store che può memorizzare qualsiasi dato esprimibile come _chiave-valore tupla_. Un chiave-valore data store memorizza valori arbitrari, ciascuno referenziato da qualche chiave.

[[ethereum_components]]
=== Ethereum's Components

((("blockchain","components of")))((("Ethereum (generally)","blockchain components")))In Ethereum, i componenti di un sistema di blockchain descritti in <<blockchain_components>> sono, nello specifico:


Rete P2P:: Ethereum gira sulla _Ethereum main network_, che può essere raggiunta alla porta TCP 30303, ed esegue il protocollo _ÐΞVp2p_.

Regole di consenso:: le regole di consenso di Ethereum sono definite nella specifica di riferimento, Yellow Paper (vedi <<references>>).

Transazioni:: le transazioni in Ethereum consistono in messaggi di rete che includono (tra le altre cose) un mittente, un destinatario, un valore e un payload di dati.

[role="pagebreak-before"]
Macchina a stati:: le transizioni di stato in Ethereum vengono processate dalla _Ethereum Virtual Machine_ (EVM), una macchina virtuale basata su stack che esegue _bytecode_ (istruzioni in linguaggio macchina). I programmi EVM, chiamati "smart contracts" (contratti intelligenti), sono scritti in linguaggi di alto livello (ad esempio, Solidity) e compilati in bytecode per l'esecuzione sulla EVM.

Strutture dati:: lo stato in Ethereum è memorizzato localmente su ciascun nodo sotto forma di _database_ (di solito LevelDB di Google), che contiene le transazioni e lo stato del sistema in una struttura dati costituita da hash serializzati chiamata _Merkle Patricia Tree_.

Algoritmo di consenso:: Ethereum usa lo stesso modello di consenso adottato da Bitcoin, il Nakamoto Consensus, che utilizza blocchi sequenziali a firma singola, ponderati in ordine di importanza da PoW per determinare la catena più lunga e quindi lo stato corrente. Tuttavia, ci sono piani per passare a un sistema di voto ponderato di tipo PoS, nome in codice _Casper_, nel prossimo futuro.

Sicurezza economica: Ethereum attualmente utilizza un algoritmo PoW chiamato _Ethash_, ma questo verrà abbandonato in futuro con il passaggio a PoS.

Client:: Ethereum ha diverse implementazioni interoperabili del software client, le più importanti delle quali sono _Go-Ethereum_ (_Geth_) e _Parity_.

[[references]]
==== Further Reading

I seguenti riferimenti forniscono ulteriori informazioni sulle tecnologie qui menzionate:

* The Ethereum Yellow Paper:
https://ethereum.github.io/yellowpaper/paper.pdf

* Il Beige Paper, una riscrittura dello Yellow Paper per un pubblico più ampio in un linguaggio meno formale:
https://github.com/chronaeon/beigepaper

* ÐΞVp2p protocollo di rete:
http://bit.ly/2quAlTE

* Elenco risorse per la Ethereum Virtual Machine:
http://bit.ly/2PmtjiS

* LevelDB (database spesso usato per archiviare una copia locale della blockchain):
https://github.com/google/leveldb

* Merkle Patricia trees:
https://github.com/ethereum/wiki/wiki/Patricia-Tree

* Ethash PoW algorithm:
https://github.com/ethereum/wiki/wiki/Ethash

* Casper PoS v1 Implementation Guide:
http://bit.ly/2DyPr3l

* Go-Ethereum (Geth) client:
https://geth.ethereum.org/

* Parity Ethereum client:
https://parity.io/

[[turing_completeness]]
=== Ethereum e Turing Equivalenza

((("Ethereum (generally)","Turing completeness and")))((("Turing completeness","Ethereum and")))As soon as you start reading about Ethereum, you will immediately encounter the term "Turing complete." Ethereum, they say, unlike Bitcoin, is Turing complete. What exactly does that mean?

((("Turing, Alan")))The term refers to English mathematician Alan Turing, who is considered the father of computer science. In 1936 he created a mathematical model of a computer consisting of a state machine that manipulates symbols by reading and writing them on sequential memory (resembling an infinite-length paper tape). With this construct, Turing went on to provide a mathematical foundation to answer (in the negative) questions about _universal computability_, meaning whether all problems are solvable. He proved that there are classes of problems that are uncomputable. ((("halting problem")))Specifically, he proved that the _halting problem_ (whether it is possible, given an arbitrary program and its input, to determine whether the program will eventually stop running) is not solvable.

((("Universal Turing machine (UTM)")))((("UTM (Universal Turing machine)")))Alan Turing further defined a system to be _Turing complete_ if it can be used to simulate any Turing machine. Such a system is called a _Universal Turing machine_ (UTM).

Ethereum's ability to execute a stored program, in a state machine called the Ethereum Virtual Machine, while reading and writing data to memory makes it a Turing-complete system and therefore a UTM. Ethereum can compute any algorithm that can be computed by any Turing machine, given the limitations of finite memory.

Ethereum's groundbreaking innovation is to combine the general-purpose computing architecture of a stored-program computer with a decentralized blockchain, thereby creating a distributed single-state (singleton) world computer. Ethereum programs run "everywhere," yet produce a common state that is secured by the rules of pass:[<span class="keep-together">consensus</span>].

[[turing_completeness_feature]]
==== Turing Completeness as a "Feature"

((("Turing completeness","as feature")))Hearing that Ethereum is Turing complete, you might arrive at the conclusion that this is a _feature_ that is somehow lacking in a system that is Turing incomplete. Rather, it is the opposite. Turing completeness is very easy to achieve; in fact, http://bit.ly/2ABft33[the simplest Turing-complete state machine known]  has 4 states and uses 6 symbols, with a state definition that is only 22 instructions long. Indeed, sometimes systems are found to be "accidentally Turing complete." A fun reference of such systems can be found at http://bit.ly/2Og1VgX[].

However, Turing completeness is very dangerous, particularly in open access systems like public blockchains, because of the halting problem we touched on earlier. For example, modern printers are Turing complete and can be given files to print that send them into a frozen state. The fact that Ethereum is Turing complete means that any program of any complexity can be computed by Ethereum. But that flexibility brings some thorny security and resource management problems. An unresponsive printer can be turned off and turned back on again. That is not possible with a public blockchain.

[[turing_completeness_implications]]
==== Implications of Turing Completeness

((("Turing completeness","implications of")))Turing proved that you cannot predict whether a program will terminate by simulating it on a computer. In simple terms, we cannot predict the path of a program without running it. ((("infinite loops")))Turing-complete systems can run in "infinite loops," a term used (in oversimplification) to describe a program that does not terminate. It is trivial to create a program that runs a loop that never ends. But unintended never-ending loops can arise without warning, due to complex interactions between the starting conditions and the code. In Ethereum, this poses a challenge: every participating node (client) must validate every transaction, running any smart contracts it calls. But as Turing proved, Ethereum can't predict if a smart contract will terminate, or how long it will run, without actually running it (possibly running forever). Whether by accident or on purpose, a smart contract can be created such that it runs forever when a node attempts to validate it. This is effectively a DoS attack. And of course, between a program that takes a millisecond to validate and one that runs forever are an infinite range of nasty, resource-hogging, memory-bloating, CPU-overheating programs that simply waste resources. In a world computer, a program that abuses resources gets to abuse the world's resources. How does Ethereum constrain the resources used by a smart contract if it cannot predict resource use in advance?

((("EVM (Ethereum Virtual Machine)","gas and")))((("gas","as counter to Turing completeness")))To answer this challenge, Ethereum introduces a metering mechanism called _gas_. As the EVM executes a smart contract, it carefully accounts for every instruction (computation, data access, etc.). Each instruction has a predetermined cost in units of gas. When a transaction triggers the execution of a smart contract, it must include an amount of gas that sets the upper limit of what can be consumed running the smart contract. The EVM will terminate execution if the amount of gas consumed by computation exceeds the gas available in the transaction. Gas is the mechanism Ethereum uses to allow Turing-complete computation while limiting the resources that any program can consume.

The next question is, 'how does one get gas to pay for computation on the Ethereum world computer?' You won't find gas on any exchanges. ((("ether (generally)","gas and")))It can only be purchased as part of a transaction, and can only be bought with ether. Ether needs to be sent along with a transaction and it needs to be explicitly earmarked for the purchase of gas, along with an acceptable gas price. Just like at the pump, the price of gas is not fixed. Gas is purchased for the transaction, the computation is executed, and any unused gas is refunded back to the sender of the transaction.

[[DApp]]
=== From General-Purpose Blockchains to Decentralized Applications (DApps)

((("DApps (applicazioni decentralizzate)","Ethereum come piattaforma per")))((("Ethereum (generalmente)","DApps e")))Ethereum inizio come un modo per creare una blockchain general-purpose che potesse essere programmata per una varieta di usi. Ma molto rapidamente, la visione di Ethereum si espanse, divenendo una piattaforma per programmare DApp. Le DApp rappresentano una prospettiva piu ampia dei smart contract. Piu in generale, una DApp e' un'applicazione web che e' costruita al di sopra di servizi di infrastruttura peer-to-peer, decentralizzati e aperti.

Una DApp e' composta da almeno:

Smart contract su una blockchain
Un' interfaccia utente di frontend web

In aggiunta, molte DApp includono altri componenti decentralizzati, ad esempio:

- A decentralized (P2P) storage protocol and platform
- A decentralized (P2P) messaging protocol and platform

[TIP]
====
You may see DApps spelled as _&#208;Apps_. The &#208; character is the Latin character called "ETH," alluding to Ethereum. To display this character, use the Unicode codepoint +0xD0+, or if necessary the HTML character entity +eth+ (or decimal entity +#208+).
====

[[evolving_WWW]]
=== La terza età di internet

((("DApps (decentralized applications)","web3 and")))((("Ethereum (generally)","web3 and")))((("web3")))In 2004 the term "Web 2.0" came to prominence, describing an evolution of the web toward user-generated content, responsive interfaces, and interactivity. Web 2.0 is not a technical specification, but rather a term describing the new focus of web pass:[<span class="keep-together">applications</span>].

The concept of DApps is meant to take the World Wide Web to its next natural evolutionary stage, introducing decentralization with peer-to-peer protocols into every aspect of a web application. The term used to describe this evolution is _web3_, meaning the third "version" of the web. ((("Wood, Dr. Gavin","and web3")))First proposed by Dr. Gavin Wood, web3 represents a new vision and focus for web applications: from centrally owned and managed applications, to applications built on decentralized protocols.

In later chapters we'll explore the Ethereum web3.js JavaScript library, which bridges JavaScript applications that run in your browser with the Ethereum blockchain. The web3.js library also includes an interface to a P2P storage network called _Swarm_ and a P2P messaging service called _Whisper_. With these three components included in a JavaScript library running in your web browser, developers have a full application development suite that allows them to build web3 DApps.

[[development_culture]]
=== Ethereum's Development Culture

((("development culture, Ethereum")))((("Ethereum (generally)","development culture")))So far we've talked about how Ethereum's goals and technology differ from those of other blockchains that preceded it, like Bitcoin. Ethereum also has a very different development culture.

((("Bitcoin","development culture")))In Bitcoin, development is guided by conservative principles: all changes are carefully studied to ensure that none of the existing systems are disrupted. For the most part, changes are only implemented if they are backward compatible. Existing clients are allowed to opt-in, but will continue to operate if they decide not to upgrade.

((("backward compatibility, Ethereum vs. Bitcoin")))In Ethereum, by comparison, the community's development culture is focused on the future rather than the past. The (not entirely serious) mantra is "move fast and break things." If a change is needed, it is implemented, even if that means invalidating prior assumptions, breaking compatibility, or forcing clients to update. Ethereum's development culture is characterized by rapid innovation, rapid evolution, and a willingness to deploy forward-looking improvements, even if this is at the expense of some backward compatibility.

What this means to you as a developer is that you must remain flexible and be prepared to rebuild your infrastructure as some of the underlying assumptions change. One of the big challenges facing developers in Ethereum is the inherent contradiction between deploying code to an immutable system and a development platform that is still evolving. You can't simply "upgrade" your smart contracts. You must be prepared to deploy new ones, migrate users, apps, and funds, and start over.

Ironically, this also means that the goal of building systems with more autonomy and less centralized control is still not fully realized. Autonomy and decentralization require a bit more stability in the platform than you're likely to get in Ethereum in the next few years. In order to "evolve" the platform, you have to be ready to scrap and restart your smart contracts, which means you have to retain a certain degree of control over them.

But, on the positive side, Ethereum is moving forward very fast. There's little opportunity for "bike-shedding," an expression that means holding up development by arguing over minor details such as how to build the bicycle shed at the back of a nuclear power station. If you start bike-shedding, you might suddenly discover that while you were distracted the rest of the development team changed the plan and ditched bicycles in favor of autonomous hovercraft.

Eventually, the development of the Ethereum platform will slow down and its interfaces will become fixed. But in the meantime, innovation is the driving principle. You'd better keep up, because no one will slow down for you.

[[why_learn]]
Perchè imparare Ethereum?

((("blockchain","Ethereum as developer&#39;s blockchain")))((("Ethereum (generally)","reasons to learn")))Blockchains have a very steep learning curve, as they combine multiple disciplines into one domain: programming, information security, cryptography, economics, distributed systems, peer-to-peer networks, etc. Ethereum makes this learning curve a lot less steep, so you can get started quickly. But just below the surface of a deceptively simple environment lies a lot more. As you learn and start looking deeper, there's always another layer of complexity and wonder.

Ethereum is a great platform for learning about blockchains and it's building a massive community of developers, faster than any other blockchain platform. More than any other, Ethereum is a _developer's blockchain_, built by developers for developers. A developer familiar with JavaScript applications can drop into Ethereum and start producing working code very quickly. For the first few years of Ethereum's life, it was common to see T-shirts announcing that you can create a token in just five lines of code. Of course, this is a double-edged sword. It's easy to write code, but it's very hard to write _good_ and _secure_ code.

[[teaching_objectives]]
=== What This Book Will Teach You

This book dives into Ethereum and examines every component. You will start with a simple transaction, dissect how it works, build a simple contract, make it better, and follow its journey through the Ethereum system.

You will learn not only how to use Ethereum&#x2014;how it works&#x2014;but also why it is designed the way it is. You will be able to understand how each of the pieces works, and how they fit together and why.(((range="endofrange", startref="ix_01what-is-asciidoc0")))((("account","contract", see="smart contracts")))((("assymetric cryptography", see="public key cryptography")))((("BIPs", see="Bitcoin improvement proposals")))((("burn", see="ether burn")))((("cryptography","asymmetric", see="public key cryptography")))((("decentralized applications", see="DApps")))((("Decentralized Autonomous Organization", see="DAO")))((("default function", see="fallback function")))((("deterministic (seeded) wallets","hierarchical", see="hierarchical deterministic wallets")))((("DoS attacks", see="denial of service attacks")))((("ECDSA", see="Elliptic Curve Digital Signature Algorithm")))((("ETC", see="Ethereum Classic")))((("Ethereum (generally)","clients", see="clients, Ethereum")))((("Ethereum Improvement Proposals", see="EIP entries")))((("Ethereum Name Service", see="ENS")))((("Ethereum Virtual Machine", see="EVM")))((("Externally Owned Account", see="EOA")))((("fees", see="gas")))((("ICOs", see="Initial Coin Offerings")))((("Mastering Ethereum Token", see="METoken")))((("MEW", see="MyEtherWallet")))((("names/naming", see="ENS (Ethereum Name Service)")))((("NFTs", see="nonfungible tokens")))((("PoS", see="proof of stake")))((("PoW", see="proof of work")))((("PoWHC", see="Proof of Weak Hands Coin")))((("Remote Procedure Call (RPC) commands", see="JSON-RPC API")))((("RPC (Remote Procedure Call) commands", see="JSON-RPC API")))((("Secure Hash Algorithm", see="SHA entries")))((("seeded wallets", see="deterministic wallets")))((("smart contracts","Vyper and", see="Vyper")))((("smartphones", see="mobile (smartphone) wallets")))((("storage", see="data storage")))((("SUICIDE", see="SELFDESTRUCT opcode")))((("synchronization", see="fast synchronization")))((("synchronization", see="first synchronization")))((("transaction fees", see="gas")))((("wallets","HD", see="hierarchical deterministic wallets")))((("wallets","MetaMask", see="MetaMask")))