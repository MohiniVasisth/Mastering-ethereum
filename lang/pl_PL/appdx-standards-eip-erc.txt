[appendix]
[[ethereum_standards]]
== Standardy Ethereum

[[eips]]
=== Propozycje ulepszeń Ethereum (EIP)

((("EIPs (Propozycje Ulepszeń Ethereum)")))((("Ethereum (generalnie)","EIPs")))((("Ethereum (generalnie)","standardy")))Repozytorium propozycji ulepszeń Ethereum znajduje się na stronie https://github.com/ethereum/EIPs/ []. (((„EIP (Propozycje ulepszeń Ethereum)”, „przepływ pracy”))) Przepływ pracy jest zilustrowany w <<eip_workflow>>.

From https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1.md[EIP-1]:

____
EIP oznacza propozycję ulepszenia Ethereum. EIP to dokument projektowy dostarczający informacji społeczności Ethereum lub opisujący nową funkcję Ethereum, jego procesów lub środowiska. EIP powinien dostarczyć zwięzłą specyfikację techniczną cechy i uzasadnienie tej cechy. Autor EIP jest odpowiedzialny za budowanie konsensusu w społeczności i dokumentowanie odmiennych opinii.
____

[[eip_workflow]]
.Przebieg pracy nad ulepszeniem Ethereum
image :: images / eip_workflow.png [„Przebieg pracy nad ulepszeniem Ethereum”]

[[eip_table]]
=== Tabela najważniejszych EIP i ERC

.Important EIPs and ERCs
[options="header"]
|===
| EIP/ERC # | Title/Description | Author | Layer | Status | Created
| http://bit.ly/2OVq6qa[EIP-1] | EIP Purpose and Guidelines | Martin Becze, Hudson Jameson | Meta | Final |
| http://bit.ly/2yJtTNa[EIP-2] | Homestead Hard-fork Changes | Vitalik Buterin | Core | Final |

| http://bit.ly/2Jrx93V[EIP-5] | Gas Usage for `RETURN` and `CALL*`  | Vitalik Buterin | Core | Final |
| http://bit.ly/2OYbc2t[EIP-6] | Renaming +SUICIDE+ Opcode | Hudson Jameson | Interface | Final |
| http://bit.ly/2JxdBeN[EIP-7] | `DELEGATECALL` | Vitalik Buterin | Core | Final |
| http://bit.ly/2Q6Oly6[EIP-8] | devp2p Forward Compatibility Requirements for Homestead | Felix Lange | Networking | Final |
 | http://bit.ly/2CUf7WG[EIP-20] | ERC-20 Token Standard. Opisuje standardowe funkcje, które może wdrożyć umowa na tokeny, umożliwiając DApps i portfelom obsługę Tokenów na wielu interfejsach/DApps. Metody zawierają:  `totalSupply`, +balanceOf(address)+, `transfer`, `transferFrom`, `approve`, `allowance`. Zdarzenia zawierają: Transfer` (uruchamiany przy przesyłaniu tokenów), pass:[<span class="keep-together"><code>Approval</code></span>] (uruchamiany , gdy wywoływane jest 'approve') | Fabian Vogelsteller, Vitalik Buterin | ERC | Final | Frontier
| http://bit.ly/2Q6R4YB[EIP-55] | Mixed-case checksum address encoding | Vitalik Buterin | ERC | Final |
| http://bit.ly/2OgE5la[EIP-86] | Abstrakcja pochodzenia podpisu i transakcji. Ustanawia etap "bezpieczeństwa" konta i umożliwia użytkownikom tworzenie "umów kont," przechodząc w kierunku modelu, w którym w perspektywie długoterminowej wszystkie konta są umowami, w których można płacić za gaz, a użytkownicy mogą definiować własne modele zabezpieczeń, które wykonają dowolną weryfikację podpisu  i  sprawdzenie nonce ( zamiast używanie protokołu wewnątrz mechanizmu, gdzie ECDSA i domyślny schemat nonce są jedynym "standardowym" sposobem zabezpieczenia konta, który jest obecnie zakodowany na stałe w przetwarzaniu transakcji. | Vitalik Buterin | Core | Deferred (to be replaced) | Constantinople
| http://bit.ly/2QedSFC[EIP-96] | Zmiany w blokowaniu i rootowaniu stanu. Przechowuje  stan blokowania w stanie, aby zredukować złożoności protokołu i potrzebę kompleksowej implementacji klienta do przetworzenia kodu operacji 'BLOCKHASH'. Rozszerza zakres, jak daleko sprawdzanie blokowania wstecznego może zajść, z efektem ubocznym tworzenia bezpośrednich połączeń pomiędzy blokami o bardzo odległych numerach bloków, aby ułatwić znacznie bardziej wydajną synchronizację początkowego klienta light. | Vitalik Buterin | Core | Deferred | Constantinople
| http://bit.ly/2AC05DM[EIP-100] | Zmień dostosowanie trudności do docelowego średniego czasu bloku i włącz wujków.  | Vitalik Buterin | Core | Final | Metropolis Byzantinium
| http://bit.ly/2Jr1zDv[EIP-101] | Serenity Currency and Crypto Abstraction. Podnosi poziom eteru i umożliwia podobne traktowanie eteru i subtokenów w umowach, redukuje poziom pośrednictwa wymagany dla kont niestandardowych zasad, takich jak multisigs,i oczyszcza podstawowy protokół Ethereum, zmniejszając minimalną złożoność implementacji konsensusu. | Vitalik Buterin | Active | Serenity feature | Serenity Casper
| http://bit.ly/2Q5sdEv[EIP-105] | Odłamki binarne plus semantyka wywoływania kontraktów. EIP „Sharding scaffolding”, aby umożliwić równoległe transakcje w Ethereum za pomocą mechanizmu dzielenia drzewa binarnego i przygotować scenę dla późniejszego schematu dzielenia. Badania w toku; patrz https://github.com/ethereum/sharding []. | Vitalik Buterin | Active | Serenity feature | Serenity Casper
| http://bit.ly/2yG2Dzi[EIP-137] | Ethereum Domain Name Service - Specification | Nick Johnson | ERC | Final |
| http://bit.ly/2yJtWZm[EIP-140] | Nowy kod operacyjny: + REVERT +. Dodaje instrukcję opcode `REVERT`, która zatrzymuje wykonywanie i cofa zmiany stanu wykonania EVM bez zużywania całego dostarczonego gazu (zamiast tego umowa musi płacić tylko za pamięć) lub utraty logów, i zwraca wywołującemu wskaźnik do lokalizacji pamięci za pomocą kod błędu lub komunikat.| Alex Beregszaszi, Nikolai Mushegian | Core | Final | Metropolis Byzantinium
| http://bit.ly/2CQMXfe[EIP-141] | Wyznaczona nieprawidłowa instrukcja EVM |  | Alex Beregszaszi | Core | Final |
| http://bit.ly/2qhKz9Y[EIP-145] | Instrukcje zmiany bitowej w EVM |  | Alex Beregszaszi, Paweł Bylica | Core | Deferred |
| http://bit.ly/2qhxflQ[EIP-150] | Zmiany kosztów gazu dla operacji ciężkich IO |  | Vitalik Buterin | Core | Final |
| http://bit.ly/2CQUgne[EIP-155] | Prosta ochrona przed atakiem powtórkowym. Replay Attack pozwala na podpisanie dowolnej transakcji za pomocą węzła lub klienta Ethereum sprzed EIP-155, więc jest on ważny i wykonywany zarówno w łańcuchach Ethereum, jak i Ethereum Classic. | Vitalik Buterin | Core | Final | Homestead
| http://bit.ly/2JryBmT[EIP-158] | Rozliczanie stanu | Vitalik Buterin | Core | Superseded |
| http://bit.ly/2CR6VGY[EIP-160] | Zwiększenie kosztu EXP | Vitalik Buterin | Core | Final |
| http://bit.ly/2OfU96M[EIP-161] | State trie clearing (invariant-preserving alternative) | Gavin Wood | Core | Final |
| http://bit.ly/2JxdKil[EIP-162] | Initial ENS Hash Registrar | Maurelian, Nick Johnson, Alex Van de Sande | ERC | Final |

| http://bit.ly/2OgsOkO[EIP-165] | ERC-165 Standard Interface Detection | Christian Reitwiessner et al. | Interface | Draft |
| http://bit.ly/2OgCWu1[EIP-170] | Contract code size limit | Vitalik Buterin | Core | Final |
| http://bit.ly/2ERNv7g[EIP-181] | ENS support for reverse resolution of Ethereum addresses | Nick Johnson | ERC | Final |
| http://bit.ly/2P0wPz5[EIP-190] | Ethereum Smart Contract Packaging Standard | Piper Merriam et al. | ERC | Final |
| http://bit.ly/2SwNQiz[EIP-196] | Wstępnie skompilowane kontrakty na dodawanie i mnożenie skalarne na krzywej eliptycznej +alt_bn128+. Wymagane do przeprowadzenia weryfikacji zkSNARK w ramach limitu gazu blokowego.
| Christian Reitwiessner | Core | Final | Metropolis Byzantinium
| http://bit.ly/2ETDC9a[EIP-197] | Wstępnie skompilowane kontrakty dla optymalnego sprawdzania parowania na krzywej eliptycznej + alt_bn128 +. W połączeniu z EIP-196.
| Vitalik Buterin, Christian Reitwiessner | Core | Final | Metropolis Byzantinium
| http://bit.ly/2DdTCRN[EIP-198] | Wielkoformatowe potęgowanie modułowe. Prekompilacja umożliwiająca weryfikację podpisu RSA i innych aplikacji kryptograficznych.
| Vitalik Buterin | Core | Final | Metropolis Byzantinium
| http://bit.ly/2qjYJr3[EIP-211] | Nowe kody: `RETURNDATASIZE` i` RETURNDATACOPY`. Dodaje obsługę zwracania wartości zmiennej długości wewnątrz EVM z prostym ładowaniem gazu i minimalną zmianą wywoływania kodów za pomocą nowych kodów `RETURNDATASIZE` i` RETURNDATACOPY`. Obsługuje podobne do istniejących `calldata`, w których po wywołaniu dane zwrotne są przechowywane w wirtualnym buforze, z którego osoba dzwoniąca może skopiować je (lub jego części) do pamięci, a przy następnym wywołaniu bufor jest zastępowany.
| Christian Reitwiessner | Core | Final | Metropolis Byzantinium
| http://bit.ly/2OgV0Eb[EIP-214] | Nowy kod operacji: `STATICCALL`. Zezwala na niezmienione przez stan połączenia do siebie lub innych umów, a jednocześnie nie zezwala na jakiekolwiek modyfikacje stanu podczas połączenia (i jego wezwań, jeśli są obecne) w celu zwiększenia bezpieczeństwa inteligentnych umów i zapewnienia deweloperom, że błędy wywołania ponownego wejścia nie mogą wynikać z połączenia. Wywołuje dziecko z flagą „STATIC” ustawioną na „true” w celu wykonania dziecka, powodując wyjątek rzucany przy każdej próbie wykonania operacji zmieniających stan w instancji wykonania, w której „STATIC” ma wartość „true”, i resetuje flagę po wywołaniu zwroty. | Vitalik Buterin, Christian Reitwiessner | Core | Final | Metropolis Byzantinium
| http://bit.ly/2JssHlJ[EIP-225] | Testink Rinkeby przy użyciu dowodu uprawnień, w którym bloki są wydobywane tylko przez zaufanych sygnatariuszy. | authority where blocks are only mined by trusted signers. | Péter Szilágyi | | | Homestead
| http://bit.ly/2yPBavd[EIP-234] | Dodaj `blockHash` do opcji filtru JSON-RPC | Micah Zoltu | Interface | Draft |

| http://bit.ly/2yKrBNM[EIP-615] | Podprogramy i skoki statyczne dla EVM | Greg Colvin, Paweł Bylica, Christian Reitwiessner | Core | Draft |

| http://bit.ly/2AzGX99[EIP-616] | Operacje SIMD dla EVM | Greg Colvin | Core | Draft |

| http://bit.ly/2qjYX1n[EIP-681] | Format adresu URL dla żądań transakcji | Daniel A. Nagy | Interface | Draft |

| http://bit.ly/2OYgE5n[EIP-649] |Opóźnienie Bomb Trudności Metropolis i redukcja nagród za blok. Opóźnił epokę lodowcową (inaczej Bombę Trudności) o 1 rok i zmniejszył nagrodę za blok z 5 do 3 eteru | Afri Schoedon, Vitalik Buterin | Core | Final | Metropolis Byzantinium
| http://bit.ly/2RoGCvH[EIP-658] | Osadzanie kodu statusu transakcji na paragonach. Pobiera i osadza pole statusu wskazujące na powodzenie lub niepowodzenie potwierdzeń transakcji dla rządających, ponieważ nie można już zakładać, że transakcja zakończyła się niepowodzeniem tylko wtedy, gdy zużyła cały gaz po wprowadzeniu kodu operacyjnego `REVERT` w EIP-140.
| Nick Johnson | Core | Final | Metropolis Byzantinium
| Christian Reitwiessner | Core | Final | Metropolis Byzantinium
| http://bit.ly/2AAkCIP[EIP-721] | ERC-721 Non Fungible Token Standard. Standardowy interfejs API, który pozwala inteligentnym kontraktom działać jako unikalne zbywalne tokeny nie wymienne (NFT), które można śledzić w standardowych portfelach i handlować na giełdach jako aktywa o wartości, podobne do ERC20. CryptoKitties było pierwszą popularnie przyjętą implementacją cyfrowego NFT w ekosystemie Ethereum | William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs | Standard | Draft |
| http://bit.ly/2qmuDmJ[EIP-758] | Subskrypcje i filtry dla zakończonych transakcji | Jack Peterson | Interface | Draft |
| http://bit.ly/2RnqlHy[EIP-801] | ERC-801 Canary Standard | | ligi | Interface | Draft |
| http://bit.ly/2DdTKkf[EIP-827] | ERC827 Standardowy Token. Rozszerzenie standardowego interfejsu ERC20 dla tokenów o metody pozwalające na wykonywanie połączeń wewnątrz +transfer+ i zatwierdzanie. Ten standard zapewnia podstawową funkcjonalność przesyłania tokenów, a także pozwala na zatwierdzanie tokenów, aby mogły zostać wydane przez inną zewnętrzną sieć. Pozwala także programistom na wykonywanie połączeń dotyczących przelewów i zatwierdzeń | Augusto Lemble | ERC | Draft |
| http://bit.ly/2Jq2hAM[EIP-930] | ERC930 Eternal Storage. Umowa ES (Eternal Storage) jest własnością adresu, który ma uprawnienia do zapisu. Pamięć jest publiczna, co oznacza, że ​​każdy ma uprawnienia do odczytu. Przechowuje dane w mapowaniach, używając jednego mapowania dla każdego typu zmiennej. Korzystanie z tej umowy umożliwia deweloperowi łatwą migrację pamięci do innej umowy, jeśli to konieczne.  | Augusto Lemble | ERC | Draft |
|===