[preface]
== Szybki słownik

Ten szybki słownik zawiera wiele terminów używanych w odniesieniu do Ethereum. Terminy te są używane w całej książce, więc dodaj to do zakładek w celu szybkiego odniesienia.

Konto::
(((„konto”, „zdefiniowane”))) Obiekt zawierający adres, saldo, wartość jednorazową oraz opcjonalne miejsce do przechowywania i kod. Konto może być kontem kontraktowym lub kontem zewnętrznym (EOA).

Adres::
(((„adresy”, „zdefiniowane”))) Ogólnie rzecz biorąc, reprezentuje EOA lub umowę, która może odbierać (adres docelowy) lub wysyłać (adres źródłowy) transakcje w łańcuchu bloków. Mówiąc dokładniej, jest to najbardziej prawe 160 bitów algorytmu Keccak klucza publicznego ECDSA.

Predykat::
(((„funkcja potwierdzenia”, „zdefiniowane”))) W Solidity +assert (false)+ kompiluje się do +0xfe+, niepoprawnego kodu operacyjnego, który zużywa cały pozostały gaz i przywraca wszystkie zmiany. Kiedy nie powiedzie się instrukcja +assert()+, dzieje się coś bardzo złego i nieoczekiwanego i  będziesz musiał naprawić swój kod. Należy użyć +assert()+, aby uniknąć warunków, które nigdy nie powinny się nigdy zdarzyć.

Big-endian::
(((„big-endian, zdefiniowane”))) Reprezentacja liczby pozycyjnej, w której pierwsza cyfra jest najważniejsza. Przeciwieństwo little-endian, gdzie najmniej znacząca cyfra jest pierwsza.

BIPs::
BIP (((„Bitcoin improvement proposals(BIP)”))) Propozycje ulepszeń Bitcoin. Zestaw propozycji złożonych przez członków społeczności Bitcoin w celu ulepszenia Bitcoin. Na przykład BIP-21 jest propozycją ulepszenia schematu jednolitego identyfikatora zasobów Bitcoin (URI).

Blok::
(((„blok, zdefiniowane”))) Zbiór wymaganych informacji (nagłówek bloku) na temat zawartych transakcji oraz zestaw innych nagłówków bloku zwanych ommers. Bloki są dodawane do sieci Ethereum przez górników.

Blockchain::
(((„blockchain”,„zdefiniowane”))) W Ethereum: sekwencja bloków zweryfikowana przez system proof-of-work, z których każdy łączy się ze swoim poprzednikiem aż do bloku genesis. Różni się to od protokołu Bitcoin tym, że nie ma limitu rozmiaru bloku; zamiast tego używa różnych limitów gazu.

Kod bajtowy::
(((„bytecode”, patrz także = „EVT bytecode”))) Abstrakcyjny zestaw instrukcji zaprojektowany do wydajnego wykonywania przez interpretera oprogramowania lub maszynę wirtualną. W przeciwieństwie do kodu źródłowego czytelnego dla człowieka, kod bajtowy jest wyrażony w formacie numerycznym.

Widelec Bizancjum::
(((„Widelec Bizancjum"))) Pierwszy z dwóch twardych widelców na etapie rozwoju Metropolis. Obejmował on EIP-649: Opóźnienie bomb metropolitalnych i redukcję nagród za blok, gdzie epoka lodowcowa (patrz poniżej) została opóźniona o 1 rok, a nagroda za blok została zmniejszona z 5 do 3 eteru.

Kompilacja::
(((„kompilacja”, „zdefiniowane”))) Konwersja kodu napisanego w języku programowania wysokiego poziomu (np. Solidity) na język niższego poziomu (np. kod bajtowy EVM).

Konsensus::
(((„konsensus”, „zdefiniowane”))) Gdy liczne węzły, &#x2014;zwykle większość węzłów w sieci&#x2014; ma wszystkie te same bloki w swoim lokalnie zatwierdzonym najlepszym łańcuchu bloków. Nie należy mylić ich z zasadami konsensusu.

Zasady konsensusu:
(((„reguły konsensusu”))) Reguły sprawdzania poprawności bloku, których przestrzegają pełne węzły, by pozostać w konsensusie z innymi węzłami. Nie mylić z konsensusem.

Widelec Konstantynopol::
(((„Konstantynopolski widelec”))) Druga część etapu Metropolis, pierwotnie planowana na połowę -2018 roku. Oczekuje się, że obejmie między innymi zmianę na hybrydowy algorytm konsensusu proof-of-work / proof-of-stake.

Konto umowy:
(((„rachunki kontraktowe”, „zdefiniowane”))) (((„inteligentne kontrakty”, „zdefiniowane”))) Konto zawierające kod, który jest wykonywany za każdym razem, gdy otrzymuje transakcję z innego konta (EOA lub kontraktu).

Transakcja tworzenia kontraktu:
(((„transakcja tworzenia kontraktu”))) Specjalna transakcja z „adresem zerowym” jako odbiorcą, używana do rejestrowania umowy i rejestrowania jej w łańcuchu bloków Ethereum (patrz „adres zerowy”).

DAO::
(((„DAO (zdecentralizowana organizacja autonomiczna)”, „zdefiniowane”))) Zdecentralizowana organizacja autonomiczna. Firma lub inna organizacja działająca bez zarządzania hierarchicznego. Może również odnosić się do kontraktu o nazwie „DAO”, zapoczątkowanego 30 kwietnia 2016 r., Który następnie został zhakowany w czerwcu 2016 r .; to ostatecznie zmotywowało twardego widelca (o nazwie kodowej DAO) na bloku nr 1 192 000, co odwróciło zhakowany kontrakt DAO i spowodowało podział Ethereum i Ethereum Classic na dwa konkurujące ze sobą systemy.

DApp ::
(((„DApps (aplikacje zdecentralizowane)”, „zdefiniowane”))) Aplikacja zdecentralizowana. Jest to co najmniej inteligentna umowa i internetowy interfejs użytkownika. Mówiąc szerzej, DApp to aplikacja internetowa zbudowana na bazie otwartych, zdecentralizowanych usług infrastruktury peer-to-peer. Ponadto wiele DApps obejmuje zdecentralizowaną pamięć masową i / lub protokół komunikatów i platformę.

Deed::
(((„czyn”, „zdefiniowane”))) Standard tokenu nie wymiennego (NFT) wprowadzony we wniosku ERC721. W przeciwieństwie do tokenów ERC20 czyny potwierdzają własność i nie są zamienne, chociaż nie są uznawane za dokumenty prawne w żadnej jurysdykcji - przynajmniej nie obecnie (patrz także „NFT”).

Trudność::
(((„ustawienie trudności”))) Ustawienie w całej sieci, które kontroluje, ile obliczeń jest wymaganych do uzyskania dowodu pracy.

Podpis cyfrowy::
(((„podpisy cyfrowe”, „zdefiniowane”))) Krótki ciąg danych, które użytkownik tworzy dla dokumentu przy użyciu klucza prywatnego, tak aby każdy posiadający odpowiedni klucz publiczny, podpis i dokument mógł to zweryfikować (1) dokument został „podpisany” przez właściciela tego konkretnego klucza prywatnego i (2) dokument nie został zmieniony po podpisaniu.

ECDSA::
(((„Algorytm podpisu cyfrowego z krzywą eliptyczną (ECDSA)”, „zdefiniowane”))) Algorytm podpisu cyfrowego z krzywą eliptyczną. Algorytm kryptograficzny używany przez Ethereum w celu zapewnienia, że ​​fundusze mogą być wydawane tylko przez ich właścicieli.

EIP::
(((„EIP (Propozycje ulepszeń Ethereum)”, „zdefiniowane”))) Propozycja ulepszeń Ethereum. Dokument projektowy dostarczający informacji społeczności Ethereum, opisujący proponowaną nową funkcję lub jej procesy lub środowisko. Aby uzyskać więcej informacji, zobacz https://github.com/ethereum/EIPs (patrz także „ERC”).

ENS::
(((„ENS (usługa nazw Ethereum)”))) Usługa nazw Ethereum. Aby uzyskać więcej informacji, zobacz https://github.com/ethereum/ens/.

Entropia::
(((„entropia”, „zdefiniowane”))) W kontekście kryptografii, brak przewidywalności lub poziom losowości. Podczas generowania tajnych informacji, takich jak klucze prywatne, algorytmy zwykle polegają na źródle wysokiej entropii, aby zapewnić, że dane wyjściowe są nieprzewidywalne.

EOA::
(((„EOA (konto zewnętrzne)”, „zdefiniowane”))) konto zewnętrzne. Konto utworzone przez lub dla ludzkich użytkowników sieci Ethereum.

ERC ::
(((„ERC (prośba o komentarze Ethereum)”, patrz także = EIP (propozycje ulepszeń Ethereum) ”))) Prośba o komentarze Ethereum. Etykieta nadana niektórym EIP, które próbują zdefiniować określony standard użytkowania Ethereum.

Ethash::
(((„Ethash”))) Algorytm proof-of-work dla Ethereum 1.0. Aby uzyskać więcej informacji, zobacz https://github.com/ethereum/wiki/wiki/Ethash.

Ether::
(((„Ether (kryptowaluta)”))) Natywna kryptowaluta używana przez ekosystem Ethereum, która pokrywa koszty gazu przy realizacji inteligentnych kontraktów. Jego symbolem jest Ξ, grecka wielka litera Xi.

Zdarzenie::
(((„zdarzenia”, „zdefiniowane”))) Umożliwia korzystanie z funkcji rejestrowania EVM. DApps może nasłuchiwać zdarzeń i używać ich do wywoływania wywołań JavaScript w interfejsie użytkownika. Aby uzyskać więcej informacji, zobacz http://solidity.readthedocs.io/en/develop/contracts.html#events.

EVM ::
(((„EVM (maszyna wirtualna Ethereum)”, „zdefiniowane”))) Maszyna wirtualna Ethereum. Maszyna wirtualna oparta na stosie, która wykonuje kod bajtowy. W Ethereum model wykonania określa, jak zmienia się stan systemu, biorąc pod uwagę szereg instrukcji kodu bajtowego i niewielką krotkę danych środowiskowych. Jest to określone przez formalny model wirtualnej maszyny stanów.

Język asemblera EVM ::
(((„Język asemblera EVM”))) Czytelna dla ludzi postać kodu bajtowego EVM.

Funkcja rezerwowa ::
(((„funkcja rezerwowa”))) Domyślna funkcja wywoływana przy braku danych lub zadeklarowanej nazwie funkcji.

Kran::
(((„kran, zdefiniowany”))) Usługa, która wydaje fundusze w postaci darmowego eteru testowego, z którego można korzystać w sieci testowej.

Finney ::
(((„finney”))) Nazwa eteru. 1 finney = 10^15^ wei, 10^3^ finney = 1 eter.

Widelec::
(((„forks”))) Zmiana protokołu powodująca utworzenie alternatywnego łańcucha lub czasowa rozbieżność w dwóch potencjalnych ścieżkach blokowych podczas wydobywania.


Frontier::
(((„Frontier”))) Wstępny etap rozwoju testów Ethereum, który trwał od lipca 2015 r. Do marca 2016 r.

Ganache::
(((„Ganache”, „zdefiniowany”))) Osobisty łańcuch bloków Ethereum, którego można używać do uruchamiania testów, wykonywania poleceń i sprawdzania stanu podczas kontrolowania działania łańcucha.

Gaz::
(((„gaz”, „zdefiniowany”))) Wirtualne paliwo wykorzystywane w Ethereum do realizacji inteligentnych umów. EVM wykorzystuje mechanizm księgowy do pomiaru zużycia gazu i ograniczenia zużycia zasobów obliczeniowych (patrz „Turing zakończony”).

Limit gazu ::
(((„limit gazu”))) Maksymalna ilość gazu, jaką może zużyć transakcja lub blok.

Gavin Wood::
(((„Wood, Dr. Gavin”))) Brytyjski programista, który jest współzałożycielem i byłym dyrektorem technicznym Ethereum. W sierpniu 2014 r. Zaproponował Solidity, zorientowany na umowy język programowania do pisania inteligentnych umów.

Blok Genesis:
(((„genesis block”))) Pierwszy blok w blockchainie, używany do inicjalizacji konkretnej sieci i jej kryptowaluty.

Geth::
(((„Geth (Go-Ethereum)”, „zdefiniowane”))) Go Ethereum. Jedna z najważniejszych realizacji protokołu Ethereum, napisanego w języku Go.

Hard fork::
(((„hard fork”))) Stała rozbieżność w blockchain; znany również jako trudna zmiana. Często zdarza się, gdy niezaktualizowane węzły nie mogą sprawdzić poprawności bloków utworzonych przez zaktualizowane węzły zgodne z nowszymi regułami konsensusu. Nie mylić z fork, soft fork, software fork lub Git fork.

Hash::
(((„hash, zdefiniowane”))) Odcisk palca o zmiennej długości danych wejściowych o zmiennej wielkości, wytwarzany przez funkcję skrótu.

Portfel HD ::
(((„hierarchiczne deterministyczne portfele (BIP-32 / BIP-44)”, „zdefiniowane”))) Portfel wykorzystujący hierarchiczny deterministyczny (HD) klucz tworzenia i przesyłania protokołu (BIP-32).

HD wallet seed ::
(((„Seed wallet HD”))) (((„seeds”, seealso = „root seeds”))) Wartość używana do generowania głównego klucza prywatnego i głównego łańcucha łańcucha dla portfela HD. Ziarno portfela może być reprezentowane przez słowa mnemoniczne, co ułatwia ludziom kopiowanie, tworzenie kopii zapasowych i przywracanie kluczy prywatnych.

Homestead::
(((„Homestead”)))) Drugi etap rozwoju Ethereum, uruchomiony w marcu 2016 r. Na bloku #1,150,000.

ICAP::
((((„ICAP (Inter-exchange Client Address Protocol)”))) (((„Inter-exchange Client Address Protocol (ICAP) ”)))) Inter-exchange Client Address Protocol. Kodowanie adresu Ethereum, które jest częściowo zgodne z kodowaniem IBAN (International Bank Account Number), oferując wszechstronne, sumowane i interoperacyjne kodowanie adresów Ethereum. Adresy ICAP używają nowego kodu pseudo-krajowego IBAN: XE, oznaczającego „eXtended Ethereum”, używanego w walutach innych niż jurysdykcyjne (np. XBT, XRP, XCP).LJK

Epoka lodowcowa::
(((„Epoka lodowcowa”))) Hard fork Ethereum w bloku #200,000 w celu wprowadzenia wykładniczego wzrostu trudności (inaczej Bomba Trudności), motywując do przejścia na dowód stawki.

IDE::
(((„IDE (zintegrowane środowisko programistyczne)”))) (((„Zintegrowane środowisko programistyczne (IDE)”))) Zintegrowane środowisko programistyczne. Interfejs użytkownika, który zazwyczaj łączy edytor kodu, kompilator, środowisko wykonawcze i debugger.

Problem niezmiennego kodu wdrożonego: 
(((„problem niezmiennego kodu wdrożonego”))) Po wdrożeniu kodu kontraktu (lub biblioteki) staje się niezmienny. Standardowe praktyki opracowywania oprogramowania polegają na tym, że są w stanie naprawiać ewentualne błędy i dodawać nowe funkcje, co stanowi wyzwanie dla inteligentnego tworzenia umów.

Transakcja wewnętrzna (także „wiadomość”) ::
(((„transakcja wewnętrzna (komunikat)”))) Transakcja wysłana z konta umowy na inne konto umowy lub EOA.

IPFS::
(((„IPFS (międzyplanetarny system plików)”))) Międzyplanetarny system plików. Protokół, sieć i projekt open source zaprojektowany w celu stworzenia adresowalnej treściowo,metody peer-to-peer przechowywania i udostępniania hipermediów w rozproszonym systemie plików.

KDF ::
(((„Funkcja wyprowadzania klucza (KDF)”))) Funkcja wyprowadzania klucza. Znany również jako „algorytm rozciągania hasła”, jest używany przez formaty magazynu kluczy do ochrony przed atakami siłowymi, słownikowymi i atakami z użyciem tabeli tęczowej na szyfrowanie hasła, poprzez wielokrotne mieszanie hasła.

Keccak-256::
(((„Funkcja skrótu Keccak-256”))) Kryptograficzna funkcja skrótu używana w Ethereum. Keccak-256 został znormalizowany jako SHA-3.

Plik kluczy ::
(((„plik kluczy”))) Plik zakodowany w JSON, który zawiera pojedynczy (losowo generowany) klucz prywatny, zaszyfrowany hasłem dla dodatkowego bezpieczeństwa.

LevelDB::
(((„LevelDB”))) Magazyn kluczy na dysku typu open source&#2013; zaimplementowany jako lekka, jednozadaniowa biblioteka z powiązaniami z wieloma platformami.

Biblioteka::
(((„umowa biblioteczna”))) Specjalny rodzaj umowy, która nie ma żadnych funkcji płatnych, nie ma funkcji awaryjnej i nie ma przechowywania danych. Dlatego nie może odbierać ani przechowywać eteru ani przechowywać danych. Biblioteka służy jako wcześniej wdrożony kod, który inne umowy mogą wzywać do obliczeń tylko do odczytu.

Lightweight client::
((("light/lightweight client")))Klient Ethereum, który nie przechowuje lokalnej kopii łańcucha bloków ani nie sprawdza poprawności bloków i transakcji. Oferuje funkcje portfela i może tworzyć i nadawać transakcje.

Merkle Patricia Tree::
(((„Merkle Patricia Tree”))) Struktura danych wykorzystywana w Ethereum do efektywnego przechowywania kluczowych&#x2013; par wartości.

Message::
((("message, defined")))Transakcja wewnętrzna, która nigdy nie jest serializowana i wysyłana tylko w ramach EVM.

Message call::
((("message call")))jAkt przekazania jednego konta na drugie. Jeśli konto docelowe jest powiązane z kodem EVM, maszyna wirtualna zostanie uruchomiona ze stanem tego obiektu i komunikat zostanie wykonany
poniważ.

METoken::
("METoken (Mastering Ethereum Token)","defined")) Mastering Ethereum Token. Token ERC20 użyty do demonstracji w tej książce.

Metropolis::
(((„Metropolis”))) Trzeci etap rozwoju Ethereum, uruchomiony w październiku 2017 r.


Górnik::
(((„górnicy”)))) Węzeł sieciowy, który znajduje prawidłowy dowód pracy dla nowych bloków, poprzez powtarzane przejście: [</span>hashowanie</span>].

Mist::
(((„Mist (portfel oparty na przeglądarce)”))) (((„portfele”, „Mist”)))) Pierwsza przeglądarka z obsługą Ethereum, zbudowana przez Fundację Ethereum. Zawiera portfel oparty na przeglądarce, który był pierwszą implementacją standardu tokenów ERC20 (Fabian Vogelsteller, autor ERC20, był także głównym twórcą Mist). Mist był także pierwszym portfelem, który wprowadził sumę kontrolną camelCase (EIP-55; patrz <<EIP55>>). Mist obsługuje pełny węzeł i oferuje pełną przeglądarkę DApp z obsługą pamięci masowej i adresów ENS.

Network::
((((„sieci (Ethereum)”, „zdefiniowane”))) ((((„sieci (Ethereum)”, „MetaMask i”))) Nawiązując do sieci Ethereum, sieci peer-to-peer, która propaguje transakcje i bloki do każdego węzła Ethereum (uczestnik sieci).

NFT::
(((„niefunkcyjne tokeny (NFT)”, „zdefiniowane”))) Nie-zamienny token (znany również jako „czyn”). Jest to standard tokena wprowadzony przez propozycję ERC721. NFT można śledzić i handlować, ale każdy token jest unikalny i odrębny; nie są one wymienne jak tokeny ERC20. NFT mogą reprezentować własność zasobów cyfrowych lub fizycznych.

Node::
((("node","defined")))Klient oprogramowania, który uczestniczy w sieci.

Nonce::
(((„nonces”, „zdefiniowany”))) W kryptografii wartość, której można użyć tylko raz. Istnieją dwa rodzaje nonce stosowane w Ethereum: nonce konta to licznik transakcji na każdym koncie, który służy do zapobiegania atakom z powtórkami; nonce proof-of-work to losowa wartość w bloku, które została użyta do wypełnienia dowodu pracy.

Ommer::
(((„ommer, zdefiniowany”))) Blok potomny przodka, który sam nie jest przodkiem. Gdy górnik znajdzie prawidłowy blok, inny górnik może opublikować konkurencyjny blok, który jest dodawany na końcu łańcucha bloków. W przeciwieństwie do bitcoinów, osierocone bloki w Ethereum mogą zostać uwzględnione przez nowsze bloki jako ommers i otrzymać częściową nagrodę za blok. Termin „ommer” jest preferowanym terminem neutralnym dla płci bloku rodzicielskiego, ale czasami jest również określany jako „wujek”.

Parity::
((("Parity","defined")))Jedna z najważniejszych interoperacyjnych implementacji oprogramowania klienckiego Ethereum.

Prywatny klucz::
Zobacz &#x201c;tajny klucz.&#x201d;

Dowód stawki (PoS) ::
(((„dowód stawki (PoS)”, „zdefiniowany”))) Metoda, za pomocą której protokół kryptowaluty blockchain dąży do osiągnięcia rozproszonego konsensusu. PoS prosi użytkowników o potwierdzenie posiadania pewnej ilości kryptowaluty (ich „udziału” w sieci), aby móc uczestniczyć w sprawdzaniu poprawności transakcji.

Dowód pracy (PoW) ::
(((„dowód pracy (PoW)”, „zdefiniowany”))) Fragment danych (dowód), który wymaga znacznych obliczeń. W Ethereum górnicy muszą znaleźć numeryczne rozwiązanie algorytmu Ethash, który spełnia docelowy poziom trudności dla całej sieci.

Klucz publiczny::
(((„klucze publiczne”, „zdefiniowane”))) Liczba wyprowadzona za pomocą funkcji jednokierunkowej z klucza prywatnego, którą można udostępniać publicznie i używać przez każdego do weryfikacji podpisu cyfrowego wykonanego za pomocą odpowiedniego klucza prywatnego.

Paragon::
(((„odbiór, zdefiniowano”))) Dane zwracane przez klienta Ethereum w celu przedstawienia wyniku konkretnej transakcji, w tym skrót transakcji, jej numer bloku, ilość zużytego gazu oraz, w przypadku wdrożenia inteligentna umowa, adres umowy.

Ponowny atak:
(((„ataki ponownego ataku”, „zdefiniowane”))) Atak polegający na tym, że kontrakt osoby atakującej wywołuje funkcję umowy ofiary w taki sposób, że podczas wykonywania ofiara ponownie wywołuje kontrakt osoby atakującej rekurencyjnie. Może to na przykład skutkować kradzieżą środków poprzez pominięcie części umowy ofiary, która aktualizuje saldo lub zlicza kwoty wypłaty.

Nagroda::
(((„nagroda, zdefiniowane”))) Ilość eteru zawarta w każdym nowym bloku jako nagroda sieci dla górnika, który znalazł rozwiązanie proof-of-work .

RLP::
((((„Prefiks długości rekurencyjnej (RLP)”))) (((„RLP (Prefiks długości rekurencyjnej)”))) Prefiks długości rekurencyjnej. Standard kodowania zaprojektowany przez programistów Ethereum do kodowania i serializacji obiektów (struktur danych) o dowolnej złożoności i długości.

Satoshi Nakamoto ::
(((„Satoshi Nakamoto”))) Nazwa używana przez osobę lub osoby, które zaprojektowały Bitcoin, stworzyły oryginalną implementację referencyjną i jako pierwsze rozwiązały problem podwójnego wydawania waluty cyfrowej. Ich prawdziwa tożsamość pozostaje nieznana.

Secret key (lub private key)::
(((„klucze prywatne”, „zdefiniowane”))) (((„klucze tajne”, seealso= „klucze prywatne”))) Tajny numer, który pozwala użytkownikom Ethereum udowodnić własność nad kontem lub umowom, poprzez wygenerowanie podpisu cyfrowego (patrz &#x201c;klucz publiczny,&#x201d; &#x201c;adres,&#x201d; &#x201c;ECDSA&#x201d;).

Serenity::
(((„Serenity”))) Czwarty i ostatni etap rozwoju Ethereum. Serenity nie ma jeszcze planowanej daty premiery.

Serpent::
(((„Serpent”))) Proceduralny (imperatywny) inteligentny język programowania kontraktów o składni podobnej do Pythona.

SHA::
(((„SHA (Bezpieczny algorytm skrótu)”))) Bezpieczny algorytm skrótu. Rodzina kryptograficznych funkcji skrótu opublikowanych przez National Institute of Standards and Technology (NIST).

Singleton::
(((„singleton”))) Termin programowania komputerowego opisujący obiekt, którego istnieć może tylko jedna instancja.

Inteligentna umowa :
(((„inteligentne kontrakty”, „zdefiniowane”))) Program, który działa na infrastrukturze obliczeniowej Ethereum.

Solidity::
((("Solidity","defined")))A procedural (imperative) programming language with syntax that is similar to JavaScript, C++, or Java. The most popular and most frequently used language for Ethereum smart contracts. Created by Dr. Gavin Wood (coauthor of this book).

Solidity inline assembly::
((("inline assembly","defined")))((("Solidity inline assembly")))EVM assembly language in a Solidity program. Solidity's support for inline assembly makes it easier to write certain operations.

Spurious Dragon::
((("Spurious Dragon")))A hard fork of the Ethereum blockchain, which occurred at block #2,675,000 to address more denial-of-service attack vectors and clear state (see also "Tangerine Whistle"). Also, a replay attack protection mechanism.

Swarm::
((("Swarm","defined")))A decentralized (P2P) storage network, used along with Web3 and Whisper to build DApps.

Szabo::
((("szabo, defined")))A denomination of ether. 1 szabo = 10^12^ wei, 10^6^ szabo = 1 ether.

Tangerine Whistle::
((("Tangerine Whistle")))A hard fork of the Ethereum blockchain, which occurred at block #2,463,000 to change the gas calculation for certain I/O-intensive operations and to clear the accumulated state from a denial-of-service attack, which exploited the low gas cost of those operations.

Testnet::
((("testnet","defined")))Short for "test network," a network used to simulate the behavior of the main Ethereum network.

Transaction::
((("transactions","defined")))Data committed to the Ethereum Blockchain signed by an originating account, targeting a specific address. The transaction contains metadata such as the gas limit for that transaction.

Truffle::
((("Truffle","defined")))One of the most commonly used Ethereum development frameworks.

Turing complete::
((("Turing completeness","defined")))A concept named after English mathematician and computer scientist Alan Turing: a system of data-manipulation rules (such as a computer's instruction set, a programming language, or a cellular automaton) is said to be "Turing complete" or "computationally universal" if it can be used to simulate any Turing machine.

Vitalik Buterin::
((("Buterin, Vitalik")))A Russian–Canadian programmer and writer primarily known as the cofounder of Ethereum and of _Bitcoin Magazine_.

Vyper::
((("Vyper","defined")))A high-level programming language, similar to Serpent, with Python-like syntax. Intended to get closer to a pure functional language. Created by Vitalik Buterin.

Wallet::
((("wallets","defined")))Software that holds secret keys. Used to access and control Ethereum accounts and interact with smart contracts. Keys need not be stored in a wallet, and can instead be retrieved from offline storage (e.g., a memory card or paper) for improved security. Despite the name, wallets never store the actual coins or tokens.

Web3::
((("web3", seealso="DApps")))The third version of the web. First proposed by Dr. Gavin Wood, Web3 represents a new vision and focus for web applications: from centrally owned and managed applications, to applications built on decentralized protocols.

Wei::
((("wei, defined")))The smallest denomination of ether. 10^18^ wei = 1 ether.

Whisper::
((("Whisper")))A decentralized (P2P) messaging service. It is used along with Web3 and Swarm to build DApps.

Zero address::
((("zero address","defined")))A special Ethereum address, composed entirely of zeros, that is specified as the destination address of a contract creation transaction.