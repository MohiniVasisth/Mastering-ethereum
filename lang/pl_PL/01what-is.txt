[role="pagenumrestart"]
[[whatis_chapter]]
Co to jest Ethereum?

Ethereum ((("komputer świata, Ethereum jako")))jest często opisywane jako "komputer świata". Co to jednak oznacza? Zacznijmy od opisu skoncentrowanego na informatyce, a następnie spróbujmy go rozszyfrować za pomocą bardziej praktycznej analizy możliwości i cech Ethereum, porównując go do Bitcoin i innych zdecentralizowanych platformy wymiany informacji (w skrócie „łańcuchy bloków”).

Z punktu widzenia informatyki Ethereum jest deterministyczną, ale praktycznie nieograniczoną maszyną stanów, składającą się z ogólnodostępnego stanu singletonu i maszyny wirtualnej, która wprowadza zmiany w tym stanie.

Z bardziej praktycznego punktu widzenia Ethereum jest globalnie zdecentralizowaną infrastrukturą obliczeniową o otwartym kodzie źródłowym, która wykonuje programy o nazwie „inteligentne kontrakty”. Wykorzystuje blockchain do synchronizacji i przechowywania zmian stanu systemu, wraz z kryptowalutą o nazwie _ether_ w celu pomiaru i ograniczenia kosztów zasobów wykonawczych.

Platforma Ethereum umożliwia programistom tworzenie potężnych zdecentralizowanych aplikacji z wbudowanymi funkcjami ekonomicznymi. Zapewniając wysoką dostępność, kontrolę, przejrzystość i neutralność, zmniejsza również lub eliminuje cenzurę i zmniejsza pewne ryzyko kontrahenta.

[[bitcoin_comparison]]
Porównanie do Bitcoin

(((„Bitcoin”, „Ethereum w porównaniu do”))) (((„Ethereum (ogólnie)”, „Bitcoin w porównaniu do”))) Wiele osób przyjedzie do Ethereum z pewnym wcześniejszym doświadczeniem w zakresie kryptowalut, w szczególności Bitcoin. Ethereum ma wiele wspólnych elementów z innymi otwartymi łańcuchami bloków: sieć peer-to-peer łącząca uczestników, bizantyjski algorytm konsensusu odporny na awarie do synchronizacji aktualizacji stanu (blockchain proof-of-work), stosowanie prymitywów kryptograficznych, takich jak cyfrowy podpisy i skróty oraz cyfrowa waluta (eter).

Jednak pod wieloma względami zarówno cel, jak i konstrukcja Ethereum są uderzająco różne od tych z otwartych łańcuchów bloków, które go poprzedzały, w tym Bitcoin.

(((„Ethereum (ogólnie)”,"cel”))) Celem Ethereum nie jest przede wszystkim sieć płatności w walucie cyfrowej. ((("waluta użytkowa, eter jako”))) Podczas gdy eter cyfrowej waluty jest zarówno integralny, jak i niezbędny do działania Ethereum, eter ma służyć jako "waluta użyteczności” do płacenia za korzystanie z platformy Ethereum jako komputera światowego.

W przeciwieństwie do Bitcoin, który ma bardzo ograniczony język skryptowy, Ethereum został zaprojektowany jako programowalny blockchain ogólnego zastosowania, który uruchamia maszynę wirtualną zdolną do wykonywania kodu o dowolnej i nieograniczonej złożoności. Tam, gdzie język skryptowy Bitcoina jest, celowo, ograniczony do prostej prawdziwej / fałszywej oceny warunków wydatkowania, język Ethereum jest „w trakcie kompletny”, co oznacza, że ​​Ethereum może bezpośrednio funkcjonować jako komputer ogólnego przeznaczenia.

[[blockchain_components]]
=== Składniki Blockchain

(((„blockchain”, „składniki”))) (((„Ethereum (ogólnie)”, „składniki blockchain”))) Składniki otwartego, publicznego blockchain to (zwykle):

* Sieć peer-to-peer (P2P) łącząca uczestników i propagująca transakcje oraz bloki zweryfikowanych transakcji, w oparciu o znormalizowane hasło „plotek”:[ <span class="keep-together">protokół</span>]
* Wiadomości w formie transakcji reprezentujących przejścia między stanami
* Zestaw zasad konsensusu, określających, co stanowi transakcję, a co powoduje prawidłową zmianę stanu
* Maszyna stanowa, która przetwarza transakcje zgodnie z zasadami konsensusu
* Łańcuch kryptograficznie chronionych bloków, grający rolę pamiętnika, dla wszystkich zweryfikowanych i zaakceptowanych transakcji (zmian stanu). 
* Łańcuch bloków zabezpieczonych kryptograficznie, który działa jako dziennik wszystkich zweryfikowanych i zaakceptowanych przejść stanu
* Zgodny z teorią gier wzorzec motywacyjny (połączony z "nagrodą za blok" dowód pracy), by dać impuls użytkownikom do czynnego udziału w ochronie i prawidłowym funkcjonowaniu, działającej w środowisku nieograniczonego dostępu do publicznego łańcucha bloków, maszyny stanu  [<span class="keep-together">środowisko</span>].
* Przynajmniej jeden przykład oprogramowania klienckiego umożliwiającego praktyczne wykorzystanie łańcucha.

Często wszystkie lub większość ww. komponentów tworzą jeden, niezależny od innych bibliotek, program kliencki. Na przykład rozwijany przez otwarte środowisko klient sieci Bitcoin: Bitcoin Core. W Ethereum inaczej, zamiast proponować stanowiącą punkt odniesienia fizyczną implementację klienta, proponuje się, stanowiącą punkt odniesienia dla developerów, specyfikację. Jej ścisły matematyczny opis znajdziemy w Yellow Paper sieci Ethereum.  Internecie znajdziemy także mnogość aplikacji w zgodzie z tą specyfikacją zbudowanych. 

W przeszłości określenia "łańcuch bloków" używaliśmy, do nazywania wszystkich wymienionych wyżej komponentów, wymuszających opisane cechy i zachowania, jako niepoprawny semantycznie skrót myślowy. Jednakże dzisiaj, mając już do czynienia z potężną różnorodnością łańcuchów reprezentujących inne cechy charakterystyczne, aby w pełni rozumieć cechy, które niosą za sobą różne łańcuchy, potrzebujemy profesjonalnego nazewnictwa. Takimi określeniami, bardziej szczegółowo opisującymi cechy poszczególnych łańcuchów, mogą być: publiczny, globalny, zdecentralizowany, otwarty/zamknięty, "odporny na cenzurę"?. 

Nie wszystkie łańcuchy bloków są sobie równe. Kiedy ktoś mówi ci, że coś jest łańcuchem bloków, nie otrzymałeś odpowiedzi; raczej musisz zacząć zadawać wiele pytań, aby wyjaśnić, co one oznaczają, gdy używają słowa „blockchain”. Zacznij od pytania o opis składników na poprzedniej liście, a następnie zapytaj, czy ten „blockchain” wykazuje cechy bycia _otwartym, publicznym_, itd.

[[ethereum_birth]]
Narodziny Ethereum

Wszystkie największe wynalazki człowieka, rozwiązują rzeczywiste problemy, a Ethereum na tym polu, nie jest wyjątkiem. Projekt zapoczątkowany w okresie, gdy ludzie próbowali rozpoznać moc drzemiącą w zaprezentowanym przez Satoshi'ego Nakamoto modelu Bitcoin, próbował popchnąć pojęcie krypto waluty dużo głębiej/dalej. Developerzy stanęli przed dylematem: Czy budować, bardziej zaawansowaną, zdecentralizowaną sieć, jako kolejną warstwę na najpopularnijeszym protokole i łańcuchu Bitcoin czy tworzyć zupełnie nowy wewnętrzny blockchain. Wybór protokołu Bitcoin wiązał się z akceptacją wszystkich ograniczeń nałożonych na wbudowany w ten protokół język Skrypt i szukanie wielu rozwiązań te ograniczenia zdejmujących. Ograniczony zestaw instrukcji/transakcji, typów i rozmiarów danych w wykorzystywanym przez Bitcoin Scrypt'cie ogranicza również wyobraźnie developera oraz ilość potencjalnych aplikacji wirtualnej maszyny EVM - powodując jednocześnie konieczność zaprojektowania i użycia  wspomagających jej pracę dodatkowych rozwiązań off-chain (jak np.: sidechain - łańcuch boczny). To z kolei, umniejszając argumentom mówiącym o tym, że EVM powinna wykorzystywać jeden z popularnych publicznych blockchain (w końcu mówimy o tworzeniu kolejnego jako dodatek) spowodowało, że własny blockchain stał się jedynym wyjściem - to z kolei oznaczało większe nakłady na ogrom prac programistycznych. 

Zmierzając ku końcówce roku 2013, Vitalik Buterin, młody programista i entuzjasta Bitcoin z Rosji, zaczął myśleć o rozszerzeniu możliwości oferowanych przez sieć Bitcoin i zbudowanego na niej protokołu Mastercoin (protokół warstwy drugiej zbudowany na łańcuchu bloków Bitcoin, rozszerzający jego możliwości o implementację prymitywnych smart contract'ów).  W październiku tegoż roku przedstawił swoje, bardziej uogólnione podejście drużynie Mastercoin. Podejście to reprezentowało bardziej elastyczny i precyzyjny opisu smart contractu (mimo wszystko jeszcze nie kompletny w teorii Turinga) niż rozwiązania oferowane przez Mastrercoin. Mimo wielkiej fascynacji propozycją Buterina, team Mastercoin uznał zmiany za zbyt głębokie i rewolucyjne, odrzucając propozycję współpracy Buterina. 

W grudniu 2013 roku Vitalik Buterin udostępnia, opisujący ideę stojące za ezoteryczną nazwą Ethereum, "whitepaper": kompletny w rozumieniu Turinga blockchain ogólnego zastosowania. Tuziny ludzi czytających i zapoznających się ze wstępną propozycją, pomogły Vitalikowi rozwinąć i udoskonalić teoretyczną pomysł.  

Obaj autorzy książki, którą teraz czytasz, także otrzymali wczesny "draft" stworzonego przez Buterina dokumentu i zgodnie z panującym w świecie kryptowalut duchem, nie omieszkali zadawać dociekliwych pytań czy udzielać swoich szczerych rad, sugestii i komentarzy. Zaintrygowany ideą Andreas M. Antonopoulos zadawał ich mnóstwo - w szczególności dotyczących kompletnego w sensie Turinga języka programowania przetwarzanego przez rozproszoną w końcu sieć niezleżnych węzłów - nie jak dotychczas - być może wielordzeniowy lub nawet wieloukładowy, ale pojedynczy komputer/maszynę. Niestety autor czytanego przez Ciebie właśnie `Mastering Ethereum`, mimo wielkich chęci, zainteresowania i najszczerszych intencji nie mógł bardziej zaangażować się w projekt Vitalika ze względu na pisaną w tamtym okresie książkę "Mastering Bitcoin" - polecaną przez autora tłumaczenia siostrę i poprzedniczkę wydawnictwa trzymanego właśnie przez Ciebie. Doktor Gavin Wood, przeciwnie, oferując swoje doświadczenie i umiejętności w programowaniu w języku C++ oraz doświadczenie wyniesione z Bitcoin, szybko nawiązał bezpośredni kontakt z Buterin'em. Tym samym Gavin wraz z Vitalikiem stali się współzałożycielami i współtwórcami, projektantami a Wood, jednoosobowo także technologicznym (CTO) szefem, projektu Ethereum.

O tym okresie w historii drugiej największej pod względem kapitalizacji (w momencie pisania) krypto-waluty najlepiej opowiada sam pomysłodawca Ethereum, Vitaliik Buterin, w swoim wpisie na blogu http://bit.ly/2T2t6zs[&quot;Ethereum Prehistory „post]: 

____
"To był okres, w którym Ethereum było całkowicie moim dzieckiem. Ale bardzo szybko kolejni developerzy zaczęli dołączać do projektu. Wśród nich najbardziej prominentnym i znanym już w świecie krypto-walut był Gavin Wood..."

Także Doktorowi Gavinowi przed innymi przypisuje się lekką jednak znaczącą zmianę wizji, osobowości spostrzegania projektu Ethereum. Z będącego jakiegoś rodzaju platformą do programowania pieniędzy, na platformę opartych na łańcuchu bloków kontraktów, które mogą utrzymywać i modyfikować cyfrowe aktywa (digital asset) zgodnie z wcześniej predefiniowanym (zaprogramowanym) zestawem zasad  i transferować te aktywa to innych systemów ogólnego przeznaczenia. Rozpoczęło się to od subtelnej zmiany w terminologii oraz stosowania nacisku. Wraz z upływającym czasem oraz pojawieniem się biblioteki "Web 3", która Ethereum postrzega jako pakiet związanych z decentralizacją usług/technologii, odbieranie Ethereum jako platformy smart contract'ów się zwiększało.
____

Rozpoczynając prace nad implementacją w grudniu 2013, Vitalik oraz Gavin oczyścili i przemyśleli ideę przedstawioną w whitepaper a potem zbudowali razem najniższą warstwę protokołu, która jest rdzeniem Ethereum. 

Twórcy Ethereum nie myśleli o blockchain jako platformie do specyficznych zastosowań. To pozwoliło rozwinąć platformę, która może wspierać szeroki zakres i różnorodność tworzonych aplikacji. Idea zabrzmiała: Programista używający Ethereum, jako platformy dla swoich aplikacji dostanie w postaci out-of -the-box? mechanizmy takie jak sieć peer-to-peer, łańcuchy bloków, algorytm konsensusu, itp. Celem Ethereum było dostarczenie programistom tych mechanizmów w postaci programistycznych abstrakcji oraz dostarczyć bezpieczne i deterministyczne środowisko dla zdecentralizowanych aplikacji (DApps). 

W większości, podobnie jak Satoshi Nakamoto, Vitalik i Gavin nie wynaleźli nowych technologii lecz połączyli nowe pomysły z istniejącymi technologiami w nowatorski sposób i dostarczyli kawałki kodu źródłowego udowadniając tym samym, że ich pomysł działa (POC). 

Pomysłodawcy projektu pracowali latami tworząc i odświeżając wizję tak, aż 30 lipca 2015 roku pierwszy blok w łańcuchu bloków Ethereum został wykopany (tłumaczymy gdzieś takie pojęcia? wykopany? ;) ) a "światowy komputer", sieć Ethereum rozpoczął serwowanie swoich usług. 

[NOTE]
====
We wrześniu 2017 roku światło dziennie ujrzał artykuł autorstwa jednego z projektantów, głównego pomysłodawcy Vitalika Buterina "Prehistoria Ethereum" dostarczając nam wspaniały opis najwcześniejszych momentów Ethereum z punktu widzenia samego autora?  

Artykuł możesz przeczytać pod adresem: 
https://vitalik.ca/general/2017/09/14/prehistory.html[].
====

[[development_stages]]
=== 4 etapy rozwoju Ethereum

Rozwój Ethereum podzielony został na cztery odrębne etapy, z (jeszcze mocniejsze słowo) dużymi zmianami zachodzącymi na każdym z nich.. (((patrz także = „DAO; inne definicje np .: Spurious Dragon”))) Każdy etap mógł obejmować dodatkowe duże wydarzenia  jak "hard fork" - "rozwidlenie?" - zmiana funkcjonalna (w funkcjonowaniu) całej sieci niekompatybilna wstecznie, węzły, uczestnicy sieci, którzy nie uprade'dują oprogramowania tworzą drugi łańcuch, transakcje w obu łańcuchach są niekompatybilne. 

Nazwy kodowy czterech etapów rozwoju brzmią kolejno:  Frontier, Homestead, Metropolis  and Serenity. Mające mieć miejsce w trakcie rozwoju hardforki nazwano kolejno: Ice Age, DAO, Tangerine Whistle, Spurious Dragon, Byzantium and Constantinopole. Zarówno fazy rozwoju jak i hard-forki zaprezentowano na poniższej osi czasu, która datowana jest numerami bloków: 


Blok # 0 :: „Frontier” - Początkowy etap Ethereum, trwający od 30 lipca 2015 r. Do marca 2016 r.

Blok # 200 000 :: („Epoka lodowcowa”) Ice Age - Hardfork potrzebny do wprowadzenia wykładniczego wzrostu trudności, aby zmotywować przejście do PoS, gdy będzie na to czas. 

Blok # 1 150 000 :: (((„Homestead”)))) __ Homestead __— Drugi etap Ethereum, uruchomiony w marcu 2016 r.

Blok # 1 192 000 :: (((„DAO (Decentralized Autonomous Organisation)”)))) __ DAO __— Hardfork, który refundował środki ofiarom zhakowanego kontraktu DAO i spowodował podział Ethereum i Ethereum Classic na dwa konkurujące ze sobą systemy.

Blok # 2 463 000 ::"Tangerine Whistle" [Gwizdek mandarynki] hard fork konieczny do zmiany obliczeń gazu dla niektórych operacji wymagających dużej ilości operacji wejścia-wyjścia i usunięcia stanu nagromadzonego z odmowy usługi (DoS) - atak wykorzystujący niski koszt gazu tych operacji.

Blok # 2 675 000 :: (((„Spurious Dragon”)))) _ Spurious Dragon __— Twardy widelec, aby zająć się większą liczbą wektorów ataku DoS, i kolejną wyczyszczenie stanu. Ponadto mechanizm ochrony przed atakiem powtórkowym.


Blok # 4 370 000 :: (((„Metropolis”)))) (((„Byzantium fork”)))) __ Metropolis Byzantium __— Metropolis to trzeci etap Ethereum, obecny w chwili pisania tej książki, uruchomiony w październiku 2017 r. Bizancjum to pierwszy z dwóch twardych widelców planowanych dla Metropolis.


Po Byzantium zaplanowano jeszcze jeden hard fork dla Metropolis: (((„Konstantynopol”)))) (((„Serenity”))) Konstantynopol. Po Metropolis nastąpi ostatni etap rozmieszczenia Ethereum o kryptonimie Serenity. 


[[general_purpose_blockchain]]
=== Ethereum: Blockchain ogólnego przeznaczenia

(((„Bitcoin”, „Blockchain Ethereum w porównaniu do blockchain Bitcoin”))) (((„Ethereum (ogólnie)”, „jako blockchain ogólnego przeznaczenia”))) Oryginalny blockchain, a mianowicie blockchain Bitcoin, śledzi stan jednostki bitcoin i ich własność. (((„rozproszony automat stanowy, Ethereum jako”))) Możesz myśleć o Bitcoinach jako rozproszonym konsensusie _state machine_, gdzie transakcje powodują globalne przejście stanu, zmieniając własność monet. Przejścia między stanami są ograniczone zasadami konsensusu, pozwalając wszystkim uczestnikom (ostatecznie) zbliżyć się do wspólnego (konsensusowego) stanu systemu po wydobyciu kilku bloków.

Ethereum jest także rozproszoną maszyną stanową. Ale zamiast śledzić tylko stan posiadania waluty (((„krotka-klucz-wartość”))) Ethereum śledzi zmiany stanu magazynu danych ogólnego przeznaczenia, tj. Magazynu, który może przechowywać dowolne dane wyrażone jako _key– wartość krotka_. Magazyn danych klucz-wartość przechowuje dowolne wartości, do których odwołuje się jakiś klucz; na przykład wartość „Mastering Ethereum”, do której odwołuje się klucz „Tytuł książki”. W pewnym sensie służy to temu samemu celowi, co model przechowywania danych _Random Access Memory_ (RAM) używany przez większość komputerów ogólnego przeznaczenia. Ethereum ma pamięć, która przechowuje zarówno kod, jak i dane, i wykorzystuje blockchain Ethereum do śledzenia zmian tej pamięci w czasie. Podobnie jak komputer z programami uniwersalnymi, Ethereum może załadować kod do swojego automatu stanów i _run_ ten kod, przechowując wynikowe zmiany stanu w swoim łańcuchu bloków. Dwie zasadnicze różnice w porównaniu z większością komputerów ogólnego przeznaczenia polegają na tym, że zmiany stanu Ethereum podlegają regułom konsensusu, a państwo jest dystrybuowane na całym świecie. Ethereum odpowiada na pytanie: „A gdybyśmy mogli wyśledzić dowolny stan i zaprogramować maszynę stanową do stworzenia ogólnoświatowego komputera działającego na zasadzie konsensusu?”

[[ethereum_components]]
=== Komponenty Ethereum

((((„blockchain”, „składniki”))) (((„„ Ethereum (ogólnie) ”,„ składniki blockchain ”))) W Ethereum: elementy łańcucha bloków opisane są w &lt; <blockchain_components> &gt; w szczególności: 


Sieć P2P :: Ethereum działa na głównej sieci "Ethereum main network", która jest adresowalna na porcie TCP 30303, i obsługuje protokół o nazwie _ÐΞVp2p_.

Zasady konsensusu: "Ethereum's consensus rules" są zdefiniowane w specyfikacji odniesienia, w Yellow Paper (patrz &lt; <references> &gt;).

Transakcje :: Transakcje Ethereum to wiadomości sieciowe, które obejmują (między innymi) nadawcę, odbiorcę, wartość i ładunek danych.

[role="pagebreak-before"]
Maszyna Stanów Ethereum :: Przejścia stanu Ethereum są przetwarzane przez Ethereum Virtual Machine (EVM), maszynę wirtualną opartą na stosie, która wykonuje _bytecode_ (instrukcje języka maszynowego). Programy wykonywane przez EVM, nazywamy „inteligentnymi umowami” (smart contract),  są pisane w językach wysokiego poziomu (np. Solidity) i kompilowane do kodu bajtowego celem wykonania na EVM. 

Struktury danych :: Stan Ethereum (Ethereum's state) jest przechowywany lokalnie w każdym węźle jako baza danych (zwykle Google LevelDB), która zawiera transakcje i stan systemu w szeregowej zahashowanej (zaszyfrtowanej funkcją jednokierunkjową) strukturze danych zwanej _Merkle Patricia Tree_. (moze polski odpwoiednik)

Algorytm konsensusu :: Ethereum wykorzystuje model konsensusu zaproponowany w Bitcoin, Konsensus Nakamoto, który wykorzystuje sekwencyjne bloki pojedynczej sygnatury, ważone w ważności przez zastosowanie PoW w celu ustalenia najdłuższego łańcucha, a tym samym bieżącego stanu. Istnieją jednak plany przejścia na system głosowania wykorzstujący algorytm PoS o nazwie kodowej „Casper” w najbliższej przyszłości. - trzeba doczytać

Bezpieczeństwo ekonomiczne :: Ethereum obecnie używa algorytmu PoW o nazwie _Ethash_, ale zostanie on porzucony wraz z przejściem na PoS. 

Klient (oprogramowanie klienckie) :: Ethereum ma kilka zgodnych ze specyfikacją oraz we wzajemenej współpracy implementacji oprogramowania klienckiego, z których najbardziej znaczące to _Go-Ethereum_ (_Geth_) i _Parity_.

[[references]]
==== Bibliografia

Wymienione poniżej źródła zawierają dodatkowe informacje na temat wymienionych tutaj technologii: 

* The Ethereum Yellow Paper:
https://ethereum.github.io/yellowpaper/paper.pdf

* The Beige Paper, mniej formalnym językiem spisany Yellow Paper umożliwiający promocję i edukację w szerszych kręgach społeczeństwa. 
https://github.com/chronaeon/beigepaper

* Protokół sieciowy ÐΞVp2p 
http://bit.ly/2quAlTE

* Lista zasobów Wirtualnej maszyny Ethereum: 
http://bit.ly/2PmtjiS

* LevelDB database (używana najczęściej do przechowywania lokalnej kopii łańcucha bloków):
https://github.com/google/leveldb

* Drzewa Merkle Patricia:
https://github.com/ethereum/wiki/wiki/Patricia-Tree

* algorytm Ethash PoW: 
https://github.com/ethereum/wiki/wiki/Ethash

* Przewodnik Implementacji Casper PoS v1 :
http://bit.ly/2DyPr3l

* klient Go-Ethereum (Geth):
https://geth.ethereum.org/

* Parytet klienta Ethereum:
https://parity.io/

[[kompletność_turinga]]
=== Ethereum i Kompletność Turinga

((("Ethereum (generalnie)",""Komplentość Turinga i")))((("Kompletność Turinga","Ethereum i")))Jak tylko zaczniesz czytać o Ethereum, natychmiast napotkasz termin "Kompletność Turinga". Mówi się, że Ethereum, w przeciwieństwie do Bitcoina, jest Turinga-zupełny. Co to dokładnie oznacza? 

(((„Turing, Alan”))) Termin ten odnosi się do angielskiego matematyka Alana Turinga, który jest uważany za ojca informatyki. W 1936 r. Stworzył model matematyczny komputera składającego się z automatu stanów, który manipuluje symbolami, odczytując je i zapisując w pamięci sekwencyjnej (przypominającej taśmę papierową o nieskończonej długości). Dzięki tej konstrukcji Turing zapewnił matematyczne podstawy do udzielenia odpowiedzi (negatywnej) na pytania dotyczące _uniwersalnej obliczalności_, co oznacza, czy wszystkie problemy można rozwiązać. Udowodnił, że istnieją klasy problemów, których nie można obliczyć. (((„problem stopu”))) W szczególności udowodnił, że problem z problemami (czy jest możliwe, biorąc pod uwagę dowolny program i jego dane wejściowe, aby ustalić, czy program w końcu przestanie działać) nie jest możliwy do rozwiązania.

(((„Uniwersalna maszyna Turinga (UTM)”))) (((„UTM (Uniwersalna maszyna Turinga)”))) Alan Turing dodatkowo zdefiniował system, który ma być „kompletny Turingowi”, jeśli można go użyć do symulacji dowolnej maszyny Turinga. Taki system nazywa się „Uniwersalną maszyną Turinga” (UTM).

Zdolność Ethereum do uruchamiania zapisanego programu w maszynie stanów zwanej Wirtualną Maszyną Ethereum, podczas odczytywania i zapisywania danych w pamięci sprawia, że ​​jest to kompletny system Turinga, a zatem UTM. Ethereum może obliczyć dowolny algorytm, który może być obliczony przez dowolną maszynę Turinga, biorąc pod uwagę ograniczenia skończonej pamięci.

Przełomową innowacją Ethereum jest połączenie architektury obliczeniowej ogólnego zastosowania komputera z programem z zdecentralizowanym łańcuchem bloków, tworząc w ten sposób rozproszony komputer z jednym stanem (singletonem). Programy Ethereum działają „wszędzie”, ale generują wspólny stan, który jest zabezpieczony przez reguły przejścia: [<span class="keep-together">konsensus</span>].

[[turing_completeness_feature]]
==== Kompletność Turinga jako „Funkcja”

(((„Turing-kompletność”, „jako cecha”))) Po usłyszeniu, że Ethereum jest Turinga kompletne, możesz dojść do wniosku, że jest to _cecha_, której w jakiś sposób brakuje systemu, który jest niepełny Turinga. Raczej, jest wręcz przeciwnie. Kompletność Turinga jest bardzo łatwa do osiągnięcia; w rzeczywistości http://bit.ly/2ABft33[ najprostszy znany automat stanów Turinga] ma 4 stany i używa 6 symboli, z definicją stanu, która ma tylko 22 instrukcje. Rzeczywiście, czasami systemy okazują się „przypadkowo Turingowi kompletne”. Zabawne odniesienia do takich systemów można znaleźć na stronie http://bit.ly/2Og1VgX [].

Jednak kompletność Turinga jest bardzo niebezpieczna, szczególnie w systemach otwartego dostępu, takich jak publiczne łańcuchy bloków, ze względu na problem zatrzymania, o którym wspominaliśmy wcześniej. Na przykład nowoczesne drukarki są kompletne i mogą otrzymać pliki do wydrukowania, które powodują ich zawieszenie. Fakt ukończenia Ethereum oznacza, że ​​Ethereum może obliczyć dowolny program o dowolnej złożoności. Ale ta elastyczność wiąże się z pewnymi problemami związanymi z bezpieczeństwem i zarządzaniem zasobami. Niereagującą drukarkę można wyłączyć i włączyć ponownie. Nie jest to możliwe przy publicznym blockchainie.

[[turing_completeness_implications]]
==== Implikacje kompletności Turinga

(((„Kompletność Turinga”, „implikacje”))) Turing udowodnił, że nie można przewidzieć, czy program się zakończy, symulując go na komputerze. Mówiąc prościej, nie możemy przewidzieć ścieżki programu bez jego uruchomienia. (((„nieskończone pętle”))) Systemy Turing-kompletne mogą działać w „nieskończonych pętlach”, termin używany (w nadmiernym uproszczeniu) do opisania programu, który się nie kończy. Utworzenie programu, który nigdy się nie kończy, jest proste. Ale niezamierzone, niekończące się pętle mogą powstać bez ostrzeżenia, ze względu na złożone interakcje między warunkami początkowymi a kodem. W Ethereum stanowi to wyzwanie: każdy uczestniczący węzeł (klient) musi zweryfikować każdą transakcję, realizując wszelkie inteligentne umowy, które wywołuje. Ale jak udowodnił Turing, Ethereum nie jest w stanie przewidzieć, czy inteligentny kontrakt zostanie rozwiązany, ani jak długo będzie obowiązywał, bez faktycznego prowadzenia go (być może na zawsze). Czy to przypadkowo, czy celowo, można utworzyć inteligentną umowę, która będzie działać wiecznie, gdy węzeł podejmie próbę jej sprawdzenia. Jest to skutecznie atak DoS. I oczywiście między programem, którego walidacja zajmuje milisekundę, a programem działającym wiecznie, jest nieskończony zakres nieprzyjemnych programów, zajmujących wiele zasobów, powodujących nadmierną pamięć i przegrzewających procesor, które po prostu marnują zasoby. Na komputerze światowym program, który wykorzystuje zasoby, może nadużywać zasobów świata. W jaki sposób Ethereum ogranicza zasoby wykorzystywane przez inteligentną umowę, jeśli nie jest w stanie przewidzieć zużycia zasobów z góry?

(((„EVM (maszyna wirtualna Ethereum)”, „gaz i”))) (((„gaz”, „jako sprzeczne z kompletnością Turinga”))) Aby odpowiedzieć na to wyzwanie, Ethereum wprowadza mechanizm pomiarowy o nazwie _gas_. Ponieważ EVM wykonuje inteligentną umowę, dokładnie uwzględnia każdą instrukcję (obliczenia, dostęp do danych itp.). Każda instrukcja ma z góry określony koszt w jednostkach gazu. Gdy transakcja uruchamia realizację inteligentnej umowy, musi ona zawierać ilość gazu, która określa górną granicę tego, co może zostać zużyte podczas inteligentnej umowy. EVM zakończy wykonywanie, jeśli ilość gazu zużywanego przez obliczenia przekroczy ilość gazu dostępnego w transakcji. Gaz jest mechanizmem używanym przez Ethereum, aby umożliwić obliczenia Turinga przy jednoczesnym ograniczeniu zasobów, które może zużywać każdy program.

Kolejne pytanie brzmi: „w jaki sposób można uzyskać dopłatę do obliczeń na komputerze świata Ethereum?”. Nie znajdziesz gazu na żadnej giełdzie. (((„eter (ogólnie)”, „gaz i”))) Można go kupić tylko w ramach transakcji i można go kupić tylko za pomocą eteru. Eter musi zostać wysłany wraz z transakcją i musi być wyraźnie przeznaczony na zakup gazu, wraz z dopuszczalną ceną gazu. Podobnie jak w przypadku pompy cena gazu nie jest stała. Gaz jest kupowany do transakcji, obliczenia są wykonywane, a niewykorzystany gaz jest zwracany nadawcy transakcji.

[[DApp]]
=== Od Łańcucha bloków Ogólnego Przeznaczenia do Aplikacji Zdecentralizowanych (DApps)

(((„DApps (aplikacje zdecentralizowane)”, „Ethereum jako platforma dla”))) (((„Ethereum (ogólnie)”, „DApps i”))) Ethereum zaczęło jako sposób na stworzenie łańcucha bloków ogólnego przeznaczenia, który może być zaprogramowany do różnych zastosowań. Ale bardzo szybko wizja Ethereum rozwinęła się i stała się platformą do programowania DApps. Dpps stanowią szerszą perspektywę niż inteligentne kontrakty. DApp to co najmniej inteligentna umowa i internetowy interfejs użytkownika. Mówiąc szerzej, DApp to aplikacja internetowa zbudowana na bazie otwartych, zdecentralizowanych usług infrastruktury peer-to-peer.

Zdencentralizwoana aplikacja składa się przynajmniej z:  

text:'Smart contract zapisany na blockchain'
Interefejs do komunikacj najczęśiej typowy web'owy front-end [React, Angular, pure JS] 

Dodatkowo wiele Dapp'ikacji zawiera komponenty trakie jak: 

zdecentralizowana (P2P) pamięć masowa
zdecentralizowana (P2P) platforma komunikacji i wymiany wiadomości 

[TIP]
====
Możesz zobaczyć DApps pisane jako _ &#208;Apps_. The &#208; jest łacińską postacią zwaną „ETH”, nawiązującą do Ethereum. Aby wyświetlić ten znak, użyj kodu Unicode +0xD0+ lub, jeśli to konieczne, encji znakowej HTML +eth+ (lub encji dziesiętnej +#208+).
====

[[rozwija_WWW]]
Web 3.0 - Trzecia Era Internetu

(((„DApps (aplikacje zdecentralizowane)”, „web3 i”))) (((„Ethereum (ogólnie)”, „web3 i”))) (((„web3”)))) W 2004 r. Termin „sieć 2.0 ”zyskał na znaczeniu, opisując ewolucję sieci w kierunku treści generowanych przez użytkowników, responsywnych interfejsów i interaktywności. Web 2.0 nie jest specyfikacją techniczną, ale raczej terminem opisującym nowy cel web pass: [<span class="keep-together">aplikacje</span>].

Koncepcja DApps ma na celu przeniesienie World Wide Web do następnego naturalnego etapu ewolucji, wprowadzając decentralizację za pomocą protokołów peer-to-peer w każdym aspekcie aplikacji internetowej. Termin używany do opisania tej ewolucji to _web3_, co oznacza trzecią „wersję” sieci. (((„Wood, Dr. Gavin”, „and web3”))) Po raz pierwszy zaproponowany przez dr. Gavina Wooda, web3 reprezentuje nową wizję i ukierunkowanie na aplikacje internetowe: od aplikacji centralnie zarządzanych i zarządzanych, po aplikacje zbudowane na zdecentralizowanych protokołach .

W kolejnych rozdziałach zajmiemy się biblioteką JavaScript web3.js Ethereum, która łączy aplikacje JavaScript działające w twojej przeglądarce z blockchainem Ethereum. Biblioteka web3.js zawiera również interfejs do sieci pamięci P2P o nazwie _Swarm_ oraz usługi przesyłania wiadomości P2P o nazwie _Whisper_. Dzięki tym trzem składnikom zawartym w bibliotece JavaScript działającej w przeglądarce, programiści mają pełny pakiet programistyczny do aplikacji, który pozwala im tworzyć DA3 web3.

[[development_culture]]
=== Kultura Rozwoju Ethereum 

(((„kultura rozwoju, Ethereum”))) (((„Ethereum (ogólnie)”, „kultura rozwoju”))) Do tej pory rozmawialiśmy o tym, czym różnią się cele i technologia Ethereum od innych łańcuchów bloków, które ją poprzedzały , jak Bitcoin. Ethereum ma również zupełnie inną kulturę rozwoju.

(((„Bitcoin”, „kultura programowania”))) W Bitcoin rozwój opiera się na konserwatywnych zasadach: wszystkie zmiany są dokładnie badane, aby zapewnić, że żaden z istniejących systemów nie zostanie zakłócony. W większości zmiany są wprowadzane tylko wtedy, gdy są kompatybilne wstecz. Istniejący klienci mogą wyrazić zgodę, ale będą nadal działać, jeśli zdecydują się nie aktualizować.

(((„wsteczna kompatybilność, Ethereum vs. Bitcoin”))) W Ethereum, dla porównania, kultura rozwoju społeczności koncentruje się na przyszłości, a nie przeszłości. (Nie do końca poważna) mantra to „poruszaj się szybko i niszcz rzeczy”. Jeśli zmiana jest potrzebna, jest ona wdrażana, nawet jeśli oznacza to unieważnienie wcześniejszych założeń, naruszenie zgodności lub zmuszenie klientów do aktualizacji. Kultura rozwoju Ethereum charakteryzuje się szybkimi innowacjami, szybką ewolucją i gotowością do wprowadzania przyszłościowych ulepszeń, nawet jeśli odbywa się to kosztem pewnej wstecznej kompatybilności.

Jako programista oznacza to, że musisz pozostać elastyczny i być przygotowany do przebudowy infrastruktury w miarę zmiany niektórych podstawowych założeń. Jednym z wielkich wyzwań, przed którymi stają deweloperzy w Ethereum, jest nieodłączna sprzeczność między wdrażaniem kodu w niezmiennym systemie a ciągle rozwijającą się platformą programistyczną. Nie możesz po prostu „uaktualnić” swoich inteligentnych umów. Musisz być przygotowany do wdrażania nowych, migrowania użytkowników, aplikacji i funduszy, i zacząć od nowa.

Jak na ironię oznacza to również, że cel polegający na budowaniu systemów o większej autonomii i mniej scentralizowanym sterowaniu nadal nie jest w pełni zrealizowany. Autonomia i decentralizacja wymagają nieco większej stabilności na platformie niż w Ethereum w ciągu najbliższych kilku lat. Aby „ewoluować” platforma, musisz być gotowy do wycofania i ponownego uruchomienia inteligentnych umów, co oznacza, że ​​musisz zachować nad nimi pewien stopień kontroli.

Ale z drugiej strony Ethereum idzie bardzo szybko do przodu. Niewiele jest możliwości „zrzucenia roweru”, co oznacza wstrzymanie rozwoju przez spieranie się o drobne szczegóły, takie jak budowanie szopy rowerowej z tyłu elektrowni jądrowej. Jeśli zaczniesz zrzucać rowery, możesz nagle odkryć, że podczas rozproszenia reszta zespołu programistów zmieniła plan i porzuciła rowery na rzecz poduszkowców autonomicznych.

W końcu rozwój platformy Ethereum spowolni, a interfejsy zostaną naprawione. Tymczasem innowacja jest zasadą napędzającą. Lepiej nadążaj, bo nikt nie zwolni.

[[why_learn]]
=== Dlaczego warto uczyć się Ethereum?

((((„blockchain”, „Ethereum jako blockchain programisty”)))) (((„„ Ethereum (ogólnie) ”,„ powody do nauki ”))) Łańcuchy bloków mają bardzo stromą krzywą uczenia się, ponieważ łączą wiele dyscypliny w jednej domenie: programowanie, bezpieczeństwo informacji, kryptografia, ekonomia, systemy rozproszone, sieci peer-to-peer itp. Ethereum sprawia, że ​​ta krzywa uczenia się jest o wiele mniej stroma, więc możesz szybko zacząć. Ale tuż pod powierzchnią zwodniczo prostego środowiska kryje się znacznie więcej. Gdy uczysz się i zaczynasz patrzeć głębiej, zawsze pojawia się kolejna warstwa złożoności i zdumienia.

Ethereum jest świetną platformą do nauki o blockchainach i buduje ogromną społeczność programistów, szybciej niż jakakolwiek inna platforma blockchain. Bardziej niż cokolwiek innego Ethereum to blockchain dla deweloperów, zbudowany przez programistów dla programistów. Deweloper zaznajomiony z aplikacjami JavaScript może wpaść do Ethereum i bardzo szybko rozpocząć tworzenie działającego kodu. Przez kilka pierwszych lat życia Ethereum często widywały się koszulki z informacją, że możesz utworzyć token w zaledwie pięciu liniach kodu. Oczywiście jest to obosieczny miecz. Łatwo jest pisać kod, ale bardzo trudno jest napisać kod „dobry” i „bezpieczny”.

[[teaching_objectives]]
=== Czego Cię Nauczy Ta Książka

Ta książka nurkuje w Ethereum i analizuje każdy element. Rozpoczniesz od prostej transakcji, przejrzysz, jak to działa, zbudujesz prostą umowę, ulepszysz ją i podążasz drogą przez system Ethereum.

Dowiesz się nie tylko, jak korzystać z Ethereum i jak to działa, ale także dlaczego jest tak zaprojektowany. Będziesz mógł zrozumieć, jak działa każdy z elementów, jak pasują do siebie i dlaczego. (((Range = "endofrange", startref = "ix_01what-is-asciidoc0"))) (((("konto", " umowa ”, patrz =„ inteligentne umowy ”)))) (((„ kryptografia asymetryczna ”, patrz =„ kryptografia klucza publicznego ”)))) (((„ BIP ”, patrz =„ Propozycje ulepszeń Bitcoin ”)))) ((( „burn”, patrz = „ether burn”)))) (((„kryptografia”, „asymetryczny”, patrz = „kryptografia klucza publicznego”)))) (((„zdecentralizowane aplikacje”, patrz = „DApps”))) (((„Zdecentralizowana organizacja autonomiczna”, patrz = „DAO”))) (((„funkcja domyślna”, patrz = „funkcja rezerwowa”)))) (((„deterministyczne (zaszczepione) portfele”, „hierarchiczne”, patrz = „hierarchiczne deterministyczne portfele”))) (((„Ataki DoS”, patrz = „ataki typu„ odmowa usługi ”)))) (((„ ECDSA ”, patrz =„ Algorytm podpisu cyfrowego krzywej eliptycznej ”)))) () ( „ETC”, patrz = „Ethereum Classic”))) (((„Ethereum (ogólnie)”, „klienci”, patrz = „klienci, Ethereum”)))) (((„„ Propozycje ulepszeń Ethereum ”), patrz =„ EIP wpisy "))) (((„ Usługa nazw Ethereum ”, patrz =„ ENS ”)))) (((„ „Maszyna wirtualna Ethereum”, patrz = „EVM”))) (((„Rachunek zewnętrzny”, patrz = „EOA”))) (((„„ opłaty ”, patrz =„ gaz ”)))) (((„ ICO ”, patrz =„ Moneta początkowa ” Oferty ”))) (((„ Mastering Ethereum Token ”, patrz =„ METoken ”))) (((„ MEW ”, patrz =„ MyEtherWallet ”))) (((„ names / naming ”, see =„ ENS (Usługa nazw Ethereum) ”))) (((„ NFTs ”, patrz =„ niewymagalne tokeny ”)))) (((„ PoS ”, patrz =„ dowód stawki ”)))) (((„ PoW ”, patrz = „dowód pracy”))) (((„PoWHC”, patrz = „Moneta słabych rąk”)))) (((„Polecenia zdalnego wywoływania procedur (RPC)”, patrz = „JSON-RPC API”) )) (((„Polecenia RPC (zdalne wywołanie procedury)”, patrz = „JSON-RPC API”)))) (((„Bezpieczny algorytm mieszania”, patrz = „wpisy SHA”)))) (((„seeded wallets ”, patrz =„ deterministyczne portfele ”)))) (((„ inteligentne kontrakty ”,„ Vyper i ”, patrz =„ Vyper ”)))) (((„ smartfony ”, patrz =„ portfele mobilne (smartfony) ”)) ) (((„przechowywanie”, patrz = „przechowywanie danych”))) (((„SUICIDE”, patrz = „opcode SELFDESTRUCT”)))) (((„synchronizacja”, patrz = „szybka synchronizacja”)))) ((„synchronizacja”, patrz = „pierwsza synchronizacja”))) (((„opłaty transakcyjne”, patrz = „gaz”)))) (((„portfele”, „HD”, patrz = „hierarchiczne deterministyczne portfele” „))) (((„ portfele ”,„ MetaMask ”, patrz =„ MetaMask ”)))