[[intro_chapter]]
== 이더리움 기초

((( "이더리움 (일반적으로)", "기초", id = "ix_02intro-asciidoc0", range = "startofrange")))이 장에서는 이더 리움을 살펴보고 지갑 사용법, 거래 생성 방법, 기본 스마트 계약을 실행하는 방법도 있습니다.

[이더리움_단위]
==이더 통화 단위

((( "통화단위"))) ((( "이더리움 (일반적으로)", "통화단위"))) 이더 리움의 통화 단위는 _ether_라고하며 "ETH"또는 기호 & # 926; (양식화 된 대문자 E처럼 보이는 그리스 문자 "Xi"에서 유래) 또는 덜 자주 & # 9830 ;: 예 : 1 ether, 1 ETH, 또는 & # 926; 1 또는 & # 9830; 1.

[TIP]
====
& # 926;에는 유니 코드 문자 + U + 039E + 사용 & # 9830;의 경우 + U + 2666 +입니다.
====

이더는 _wei_라는 이름으로 가능한 가장 작은 단위까지 더 작은 단위로 세분화됩니다. 하나의 이더는 100 경위 (1 * 10 ^ 18 ^ 또는 1,000,000,000,000,000,000)입니다. 사람들이 "이더리움"통화를 언급하는 것을들을 수도 있지만 이것은 일반적인 초보자의 실수입니다. 이더리움은 시스템이고 이더는 통화입니다.

이더의 값은 항상 wei로 표시된 부호없는 정수 값으로 이더리움에서 내부적으로 표시됩니다. 1 이더를 거래 할 때 거래는 1000000000000000000 wei를 값으로 인코딩합니다.

이더의 다양한 교단은 _SI_ (International System of Units)를 사용하는 _ 과학적 이름 _과 컴퓨팅 및 암호학의 많은 위대한 사람들에게 경의를 표하는 구어체 이름을 모두 가지고 있습니다.

< 1 > 다양한 단위, 구어체 (공통) 이름 및 SI 이름을 보여줌니다. 가치의 내부 표현에 따라 표는 모든 교단을 wei (첫 번째 행)로 표시하고 ether는 7 번째 행에 10 ^ 18 ^ wei로 표시합니다.

[[이더_명칭]]
이더의 단위 및 단위 이름
[options="header"]
|===
| 가치 (wei) | 지수 | 일반 이름 | SI 이름
| 1 | 1 | wei | Wei
| 1,000 | 10^3^ | Babbage | Kilowei or femtoether
| 1,000,000 | 10^6^ | Lovelace | Megawei or picoether
| 1,000,000,000 | 10^9^ | Shannon | Gigawei or nanoether
| 1,000,000,000,000 | 10^12^ | Szabo | Microether or micro
| 1,000,000,000,000,000 | 10^15^ | Finney | Milliether or milli
| _1,000,000,000,000,000,000_ | _10^18^_ | _Ether_ | _Ether_
| 1,000,000,000,000,000,000,000 | 10^21^ | Grand | Kiloether
| 1,000,000,000,000,000,000,000,000 | 10^24^ | | Megaether
|===

[[choosing_eth_wallet]]
=== 이더리움 지갑선택

((( "이더리움 (일반적으로)", "지갑 선택"))) ((( "지갑", "선택"))) ((( "지갑", "정의 된"))) "지갑"이라는 용어가 등장했습니다. 많은 것을 의미합니다. 비록 그것들이 모두 관련되어 있고 매일 매일 거의 같은 것으로 요약되지만 말입니다. "지갑"이라는 용어는 이더리움 계정을 관리하는 데 도움이되는 소프트웨어 응용 프로그램을 의미합니다. 요컨대, 이더 리움 지갑은 이더 리움 시스템으로가는 관문입니다. 키를 보유하고 사용자를 대신하여 트랜잭션을 생성하고 브로드 캐스트 할 수 있습니다. 이더리움 지갑을 선택하는 것은 다양한 기능과 디자인을 가진 다양한 옵션이 있기 때문에 어려울 수 있습니다. 일부는 초보자에게 더 적합하고 일부는 전문가에게 더 적합합니다. 이더리움 플랫폼 자체는 여전히 개선되고 있으며, "최고의"지갑은 종종 플랫폼 업그레이드와 함께 제공되는 변경 사항에 적응하는 지갑입니다.

하지만 걱정하지 마세요! 지갑을 선택했는데 작동 방식이 마음에 들지 않거나 처음에는 마음에 들었지만 나중에 다른 것을 시도하고 싶다면 지갑을 아주 쉽게 변경할 수 있습니다. 이전 지갑에서 새 지갑으로 자금을 보내는 트랜잭션을 수행하거나 개인 키를 내보내고 새 지갑으로 가져 오기만하면됩니다.

책 전체에서 예로 사용하기 위해 모바일 지갑, 데스크톱 지갑 및 웹 기반 지갑의 세 가지 유형의 지갑을 선택했습니다. 이 세 가지 지갑은 광범위한 복잡성과 기능을 나타 내기 때문에 선택했습니다. 그러나 이러한 지갑의 선택은 품질이나 보안을 보증하는 것이 아닙니다. 데모 및 테스트를위한 좋은 출발점입니다.

((( "개인 키", "지갑 및"))) 지갑 응용 프로그램이 작동하려면 개인 키에 대한 액세스 권한이 있어야하므로 신뢰할 수있는 출처에서 지갑 응용 프로그램 만 다운로드하여 사용하는 것이 중요합니다. 다행히도 일반적으로 지갑 애플리케이션이 인기가 많을수록 더 신뢰할 수 있습니다. 그럼에도 불구하고 "모든 계란을 한 바구니에 넣는 것"을 피하고 이더리움 계정을 두 개의 지갑에 분산시키는 것이 좋습니다.

아래 예들은 좋은 스타터 지갑들입니다:

MetaMask :: ((( "MetaMask"))) MetaMask는 브라우저 (Chrome, Firefox, Opera 또는 Brave 브라우저)에서 실행되는 브라우저 확장 지갑입니다. 다양한 이더리움 노드에 연결하고 블록 체인을 테스트 할 수 있기 때문에 사용하기 쉽고 테스트에 편리합니다. MetaMask는 웹 기반 지갑입니다.

Jaxx :: ((( "Jaxx"))) ((( "wallets", "Jaxx"))) Jaxx는 Android, iOS, Windows, macOS를 포함한 다양한 운영 체제에서 실행되는 다중 플랫폼 및 다중 통화 지갑입니다. 및 Linux. 단순하고 사용하기 쉽도록 설계 되었기 때문에 종종 새로운 사용자에게 좋은 선택입니다. Jaxx는 설치 위치에 따라 모바일 또는 데스크톱 지갑입니다.

MyEtherWallet (MEW) :: ((( "이더리움 클래식(ETC)", "Emerald Wallet and"))) ((( "MyEtherWallet (MEW)"))) ((( "wallets", "Emerald Wallet")) ) ((( "wallets", "MyEtherWallet"))) MyEtherWallet은 모든 브라우저에서 실행되는 웹 기반 지갑입니다. 많은 예제에서 살펴볼 여러 정교한 기능이 있습니다. MyEtherWallet은 웹 기반 지갑입니다.

Emerald Wallet :: ((( "Emerald Wallet"))) Emerald Wallet은 이더리움 클래식 블록 체인과 함께 작동하도록 설계되었지만 다른 이더리움 기반 블록 체인과 호환됩니다. 오픈 소스 데스크톱 애플리케이션이며 Windows, macOS 및 Linux에서 작동합니다. Emerald Wallet은 전체 노드를 실행하거나 "라이트"모드에서 작동하는 공용 원격 노드에 연결할 수 있습니다. 또한 명령 줄에서 모든 작업을 수행 할 수있는 도우미 도구가 있습니다.

데스크톱에 MetaMask를 설치하는 것으로 시작하지만 먼저 키 제어 및 관리에 대해 간략하게 설명하겠습니다.

[[통제_책임]]
=== 통제와 책임===

((( "이더리움 (일반적으로)", "통제 및 책임", id = "ix_02intro-asciidoc1", range = "startofrange")) 이더리움과 같은 개방형 블록 체인은 _ 분산 형 _ 시스템으로 작동하기 때문에 중요합니다. 이는 많은 것을 의미하지만 한 가지 중요한 측면은 이더리움의 각 사용자가 자금 및 스마트 계약에 대한 액세스를 제어하는 개인 키를 제어 할 수 있고 제어해야한다는 것입니다. 우리는 때때로 자금과 스마트 계약에 대한 접근의 조합을 "계정"또는 "지갑"이라고 부릅니다. 이러한 용어는 기능면에서 상당히 복잡해질 수 있으므로 나중에 자세히 설명하겠습니다. 그러나 기본 원칙은 하나의 개인 키가 하나의 "계정"과 같기 때문에 쉽습니다. 일부 사용자는 온라인 거래소와 같은 타사 관리자를 사용하여 개인 키에 대한 제어권을 포기하기로 선택합니다. 이 책에서는 개인 키를 제어하고 관리하는 방법에 대해 설명합니다.``

통제에는 큰 책임이 따릅니다. 개인 키를 분실하면 자금 및 계약에 대한 액세스 권한을 잃게됩니다. 누구도 귀하가 다시 액세스하도록 도울 수 없습니다. 귀하의 자금은 영원히 잠길 것입니다. 다음은 이러한 책임을 관리하는 데 도움이되는 몇 가지 팁입니다.

* 보안을 즉흥적으로 만들지 마십시오. 검증 된 표준 접근 방식을 사용합니다.

* 계정이 더 중요할수록 (예 : 통제되는 자금의 가치가 높거나 액세스 가능한 스마트 계약이 더 중요할수록) 더 높은 보안 조치를 취해야합니다.

* 가장 높은 보안은 에어 갭 장치에서 얻을 수 있지만 모든 계정에 이 수준이 필요한 것은 아닙니다.

* 개인 키를 일반 형식, 특히 디지털 방식으로 저장하지 마십시오. 다행히 오늘날 대부분의 사용자 인터페이스에서는 원시 개인 키를 볼 수조차 없습니다.

* ((( &quot;개인 키&quot;, &quot;지갑 및&quot;))) 개인 키는 디지털 &quot;키 저장소&quot;파일로 암호화 된 형식으로 저장할 수 있습니다. 암호화되어 있으므로 잠금을 해제하려면 암호가 필요합니다. 암호를 선택하라는 메시지가 표시되면 강력하게 (예 : 길고 무작위로) 백업하고 공유하지 마십시오. 암호 관리자가 없는경우 적어두고 안전한 비밀 장소에 보관하십시오. 계정에 액세스하려면 키 저장소 파일과 비밀번호가 모두 필요합니다.

* 디지털 문서, 디지털 사진, 스크린 샷, 온라인 드라이브, 암호화 된 PDF 등에 암호를 저장하지 마십시오. 다시 말하지만 보안을 즉흥적으로 만들지 마십시오. 암호 관리자 또는 펜과 종이를 사용하십시오.

* 키를 니모닉 단어 시퀀스로 백업하라는 메시지가 표시되면 펜과 종이를 사용하여 물리적 백업을 만듭니다. 해당 작업을 &quot;나중을 위해&quot;남겨 두지 마십시오. 당신은 잊을 것입니다. 이러한 백업은 시스템에 저장된 모든 데이터를 잃어 버리거나 암호를 잊었거나 잃어버린 경우 개인 키를 재 구축하는 데 사용할 수 있습니다. 그러나 공격자가 개인 키를 얻기 위해 사용할 수도 있으므로 디지털로 저장하지 말고 물리적 사본을 잠긴 서랍이나 금고에 안전하게 보관하십시오.

* 많은 금액 (특히 새 주소)을 이체하기 전에 먼저 작은 테스트 거래 (예 : $ 1 미만)를 수행하고 수신 확인을 기다립니다.

* 새 계정을 만들 때 작은 테스트 거래만 새 주소로 보내십시오. 테스트 거래를 받으면 해당 계정에서 다시 전송 해보세요. 계정 생성이 잘못 될 수있는 데는 여러 가지 이유가 있으며, 잘못되었을 경우 약간의 손실로 알아내는 것이 좋습니다. 테스트가 작동하면 모든 것이 잘된 것입니다.

* 공개 블록 탐색기는 네트워크에서 거래가 수락되었는지 여부를 독립적으로 쉽게 확인할 수있는 방법입니다. 그러나 이러한 편리함은 사용자를 추적 할 수있는 탐험가를 차단하기 위해 주소를 공개하기 때문에 개인 정보에 부정적인 영향을 미칩니다.

*이 책자에 표시된 주소로 송금하지 마십시오. 개인 키는 책에 나와 있으며 누군가가 즉시 그 돈을 가져갈 것입니다.

키 관리 및 보안에 대한 몇 가지 기본 모범 사례를 다루었으므로 이제 MetaMask를 사용하여 작업 해 보겠습니다! (((range = &quot;endofrange&quot;, startref = &quot;ix_02intro-asciidoc1&quot;)))

[[설치 _ 메타 마스크]]
=== MetaMask 시작하기

((( &quot;Ethereum (일반적으로), MetaMask 기초, id = ix_02intro-asciidoc2&;, range = startofrange))) ((( &quot;MetaMask&, ;basics&, id = ;ix_02intro-asciidoc3, range = &startofrange&q))) Google Chrome 브라우저를 열고 https://chrome.google.com/webstore/category/extensions []로 이동합니다.

MetaMask를 검색하고 여우 로고를 클릭합니다. 에 표시된 결과와 같은 것을 볼 수 있습니다.<metamask_download> 

[[metamask_다운로드]]
.MetaMask Chrome 확장 프로그램의 상세 페이지
image :: images / metamask_download.png [메타 마스크 세부 정보 페이지]

때때로 사람들이 Google 필터를지나 악성 확장 프로그램을 몰래 숨길 수 있으므로 실제 MetaMask 확장 프로그램을 다운로드하고 있는지 확인하는 것이 중요합니다. 진짜로 :

* 주소창에 ID + nkbihfbeogaeaoehlefnkodbefgpgknn + 표시
* https://metamask.io에서 제공
* 1,500 개 이상의 리뷰 보유
* 1,000,000 명 이상의 사용자 보유

올바른 확장 프로그램을 찾고 있는지 확인한 후 'Chrome에 추가'를 클릭하여 설치합니다.

[[메타 마스크 사용]]
==== 지갑 생성

((( "MetaMask", "wallet setup with", id = "ix_02intro-asciidoc4", range = "startofrange"))) MetaMask가 설치되면 브라우저의 도구 모음에 새 아이콘 (여우의 머리)이 표시됩니다. . 시작하려면 클릭하세요. 이용 약관에 동의하고 비밀번호를 입력하여 새 이더 리움 지갑을 생성하라는 메시지가 표시됩니다.

[[메타 마스크 _ 암호]]
.MetaMask Chrome 확장 프로그램의 비밀번호 페이지
image :: images / metamask_password.png [ 메타 마스크 비밀번호 페이지]

[TIP]
====
암호는 MetaMask에 대한 액세스를 제어하므로 브라우저에 액세스 할 수있는 사람이 사용할 수 없습니다.
====

((( "니모닉 코드 단어", "MetaMask and", id = "ix_02intro-asciidoc5", range = "startofrange"))) 암호를 설정하면 MetaMask가 지갑을 생성하고 _mnemonic을 보여줍니다. 12 개의 영어 단어로 구성된 backup _ (< 1 > 참조). 이 단어는 MetaMask 또는 귀하의 컴퓨터에 문제가 발생할 경우 자금에 대한 액세스를 복구하기 위해 호환되는 모든 지갑에서 사용할 수 있습니다. 이 복구에는 암호가 필요하지 않습니다. 12 개 단어이면 충분합니다.

[TIP]
====
니모닉 (12 단어)을 종이에 두 번 백업하십시오. 내화 금고, 잠긴 서랍 또는 안전 금고와 같은 두 개의 별도 보안 위치에 두 개의 종이 백업을 보관하십시오. 종이 백업을 이더 리움 지갑에 저장 한 것과 동등한 가치의 현금처럼 취급하십시오. 이 단어에 액세스 할 수있는 사람은 누구나 액세스 권한을 얻고 돈을 훔칠 수 있습니다.
====

[[메타 마스크 _ 니모닉]]
.MetaMask에서 생성 한 지갑의 니모닉 백업
image :: images / metamask_mnemonic.png [ 메타 마스크 니모닉 페이지]

니모닉을 안전하게 저장했음을 확인한 후에는 < 1 >에 표시된대로 이더 리움 계정의 세부 정보를 볼 수 있습니다. (((range = "endofrange", startref = "ix_02intro-asciidoc5")) )

[[메타 마스크 _ 계정]]
.MetaMask의 이더 리움 계정
image :: images / metamask_account.png [MetaMask 계정 페이지]

계정 페이지에는 계정 이름 (기본적으로 "계정 1"), 이더 리움 주소 (예 : + 0x9E713 ... +) 및이 계정을 다른 계정과 시각적으로 구분하는 데 도움이되는 다채로운 아이콘이 표시됩니다. 계정 페이지 상단에서 현재 작업중인 이더 리움 네트워크 (예제에서는 "메인 네트워크")를 확인할 수 있습니다.

축하합니다! 첫 번째 이더 리움 지갑을 설정했습니다. (((range = "endofrange", startref = "ix_02intro-asciidoc4")))

[[스위칭 _ 네트워크]]
==== 스위칭 네트워크

((( "MetaMask", "network choices"))) MetaMask 계정 페이지에서 볼 수 있듯이 여러 이더 리움 네트워크 중에서 선택할 수 있습니다. 기본적으로 MetaMask는 메인 네트워크에 연결을 시도합니다. 다른 선택은 공개 테스트 넷, 선택한 이더리움 노드 또는 자신의 컴퓨터 (localhost)에서 개인 블록 체인을 실행하는 노드입니다.

주요 이더 리움 네트워크 :: 주요 공개 이더 리움 블록 체인. 실제 ETH, 실제 가치 및 실제 결과.

Ropsten 테스트 네트워크 :: 이더리움 공개 테스트 블록 체인 및 네트워크. 이 네트워크의 ETH는 가치가 없습니다.

Kovan 테스트 네트워크 :: 권한 증명 (연합 서명)과 함께 Aura 합의 프로토콜을 사용하는 이더 리움 공개 테스트 블록 체인 및 네트워크. 이 네트워크의 ETH는 가치가 없습니다. Kovan 테스트 네트워크는 Parity에서만 지원됩니다. 다른 이더 리움 클라이언트는 권한 기반 검증을 위해 나중에 제안 된 Clique 합의 프로토콜을 사용합니다.

Rinkeby 테스트 네트워크 :: 권한 증명 (연합 서명)과 함께 Clique 합의 프로토콜을 사용하는 이더 리움 공개 테스트 블록 체인 및 네트워크. 이 네트워크의 ETH는 가치가 없습니다.

Localhost 8545 :: 브라우저와 동일한 컴퓨터에서 실행중인 노드에 연결합니다. 노드는 모든 퍼블릭 블록 체인 (메인 또는 테스트 넷) 또는 프라이빗 테스트 넷의 일부가 될 수 있습니다.

사용자 지정 RPC :: Geth 호환 RPC (원격 프로 시저 호출) 인터페이스를 사용하여 MetaMask를 모든 노드에 연결할 수 있습니다. 노드는 공개 또는 비공개 블록 체인의 일부가 될 수 있습니다.

[메모]
====
MetaMask 지갑은 연결되는 모든 네트워크에서 동일한 개인 키와 이더 리움 주소를 사용합니다. 그러나 각 이더 리움 네트워크의 이더 리움 주소 잔액은 다릅니다. 예를 들어 키는 Ropsten에서 에테르 및 계약을 제어 할 수 있지만 메인 네트워크에서는 제어 할 수 없습니다.
====

[[getting_test_eth]]
==== 테스트 이더 얻기

((( "이더 (일반적으로)", "testnet"))) ((( "MetaMask", "and testnet 이더"))) ((( "테스트 이더", "obtaining"))) ((( "testnet ","이더 for "))) ((("wallets ","testnet 이더 and "))) 첫 번째 작업은 지갑에 자금을 지원하는 것입니다. 실제 이더는 비용이 들고 처리하려면 약간의 경험이 필요하기 때문에 메인 네트워크에서는 그렇게하지 않을 것입니다. 지금은 테스트 넷 이더넷으로 지갑을로드합니다.

((( "Ropsten 테스트 네트워크"))) 메타 마스크를 _Ropsten 테스트 네트워크 _로 전환합니다. 입금을 클릭 한 다음 Ropsten 테스트 수도꼭지를 클릭합니다. MetaMask는 < 1 >와 같이 새 웹 페이지를 엽니 다.

[[metamask_ropsten_faucet]]
.MetaMask Ropsten 테스트 수도꼭지
image :: images / metamask_ropsten_faucet.png [ &quot;MetaMask Ropsten 테스트 수도꼭지]

웹 페이지에 이미 MetaMask 지갑의 이더리움 주소가 포함되어 있음을 알 수 있습니다. MetaMask는 이더리움 지원 웹 페이지를 MetaMask 지갑과 통합하고 웹 페이지에서 이더리움 주소를 볼 수 있습니다. 예를 들어 이더리움 주소를 표시하는 온라인 상점에 지불을 보낼 수 있습니다. MetaMask는 웹 페이지에서 요청하는 경우 수신자 주소로 자신의 지갑 주소로 웹 페이지를 채울 수도 있습니다. 이 페이지에서 수도꼭지 애플리케이션은 MetaMask에게 테스트 이더를 보낼 지갑 주소를 요청합니다.

녹색 수도꼭지에서 이더 1 개 요청버튼을 클릭합니다. 페이지 하단에 거래 ID가 표시됩니다. 수도꼭지 앱이 거래를 생성했습니다. 거래 ID는 다음과 같습니다.

[[faucet_tx_id]]
----
0x7c7ad5aaea6474adccf6f5c5d6abed11b70a350fbc6f9590109e099568090c57
----

몇 초 안에 Ropsten 채굴자가 새 거래를 채굴하고 MetaMask 지갑에 1 ETH의 잔액이 표시됩니다. 트랜잭션 ID를 클릭하면 브라우저가 블록, 주소 및 트랜잭션을 시각화하고 탐색 할 수있는 웹 사이트 인 _block explorer_로 이동합니다. MetaMask는 더 인기있는 이더 리움 블록 탐색기 중 하나 인 https://etherscan.io/[Etherscan 블록 탐색기]를 사용합니다. Ropsten Test Faucet의 결제가 포함 된 거래는 <ropsten_block_explorer> 

[[ropsten_block_explorer]]
.Etherscan Ropsten 블록 탐색기
image :: images / ropsten_block_explorer.png [ "Etherscan Ropsten 블록 탐색기"]

거래는 Ropsten 블록 체인에 기록되었으며 누구나 간단히 거래 ID 또는 http://bit.ly/2Q860Wk (링크 방문)을 검색하여 누구나 볼 수 있습니다.

해당 링크를 방문하거나 _ropsten.etherscan.io_ 웹 사이트에 트랜잭션 해시를 입력하여 직접 확인하십시오.

[[sending_eth_MetaMask]]
==== MetaMask에서 Ether 보내기

((( "메타 마스크", "이더 전송", id = "ix_02intro-asciidoc6", range = "startofrange"))) ((( "test ether", "sending", id = "ix_02intro-asciidoc7", 범위 = "startofrange"))) Ropsten Test Faucet에서 첫 번째 테스트 이더를 받으면 이더를 수도꼭지로 돌려 보냄으로써 이더를 보내는 실험을 할 수 있습니다. Ropsten Test Faucet 페이지에서 볼 수 있듯이 수도꼭지에 1 ETH를 "기부"하는 옵션이 있습니다. 이 옵션은 테스트를 마치면 나머지 테스트 이더를 반환하여 다른 사람이 다음에 사용할 수 있도록 사용할 수 있습니다. 테스트 에테르는 가치가 없지만 일부 사람들은 그것을 축적하여 다른 사람들이 테스트 네트워크를 사용하기 어렵게 만듭니다. 비장 테스트 에테르는 눈살을 찌푸립니다!

다행히도 우리는 이더 수집가를 테스트하지 않습니다. 주황색 "1 이더"버튼을 클릭하여 MetaMask에게 수도꼭지 1 이더를 지불하는 거래를 생성하도록 지시하십시오. MetaMask는 < 1 >와 같이 트랜잭션을 준비하고 확인 창이 나타납니다.


[[수도꼭지에 _ 보내기]]
. 수도꼭지에 이더 1 개 보내기
image :: images / send_to_faucet.png [ "수도꼭지에 에테르 1 개 보내기"]

이런! 거래를 완료 할 수 없다는 것을 알았을 것입니다. MetaMask는 잔액이 부족하다고 말합니다. 언뜻보기에 이것은 혼란스러워 보일 수 있습니다 : 당신은 1 개의 ETH를 가지고 있고 1 개의 ETH를 보내고 싶습니다. 그렇다면 MetaMask는 왜 자금이 부족하다고 말합니까?

((( "gas", "basics"))) 정답은 _gas_의 비용 때문입니다. 모든 이더 리움 거래는 거래를 검증하기 위해 채굴자가 수집하는 수수료를 지불해야합니다. 이더리움의 수수료는 가스라는 가상 통화로 청구됩니다. 거래의 일부로 에테르로 가스 비용을 지불합니다.

[메모]
====
((( "gas", "on test networks"))) 테스트 네트워크에도 수수료가 필요합니다. 수수료가 없으면 테스트 네트워크는 메인 네트워크와 다르게 작동하여 부적절한 테스트 플랫폼이됩니다. 수수료는 또한 메인 네트워크를 보호하는 것처럼 테스트 네트워크를 DoS 공격과 잘못 구성된 계약 (예 : 무한 루프)으로부터 보호합니다.
====

거래를 보냈을 때 MetaMask는 최근 성공한 거래의 평균 가스 가격을 기가 웨이를 의미하는 3gwei로 계산했습니다. 우리가 한 바와 같이, <span class="keep-together">[호]</span> 에테르 통화 &lt;: 웨이 작은 패스 인<ether_units> &gt;. 가스 한도는 21,000 가스 단위 인 기본 거래를 보내는 비용으로 설정됩니다. 따라서 지출 할 ETH의 최대 금액은 3 * 21,000 gwei = 63,000 gwei = 0.000063 ETH입니다. (주로 광부들이 결정하기 때문에 평균 가스 가격은 변동될 수 있습니다. 나중에 필요한 경우 가스 한도를 늘리거나 줄일 수있는 방법을 살펴 보겠습니다.)

이 모든 것을 말하면 : 1 ETH 거래 비용은 1.000063 ETH입니다. MetaMask는 총액을 표시 할 때 _down_을 1 ETH로 혼란스럽게 반올림하지만 필요한 실제 금액은 1.000063 ETH이고 1 ETH 만 있습니다. 이 거래를 취소하려면 거부를 클릭하십시오.

더 많은 테스트 이더를 얻자! 녹색 "수도꼭지에서 1 이더 요청"버튼을 다시 클릭하고 몇 초 동안 기다리십시오. 걱정하지 마세요. 수도꼭지에는 충분한 이더가 있어야하며 요청하면 더 많이 줄 것입니다.

2 ETH의 잔액이 있으면 다시 시도 할 수 있습니다. 이번에는 주황색 "1 에테르"기부 버튼을 클릭하면 거래를 완료 할 수있는 충분한 잔액이 있습니다. MetaMask가 결제창을 띄우면 Submit을 클릭하세요. 이 모든 작업을 마치면 0.000063 ETH의 가스로 1 ETH를 수도꼭지에 보냈기 때문에 0.999937 ETH의 잔액이 표시됩니다. (((range = "endofrange", startref = "ix_02intro-asciidoc7"))) (((range = "endofrange", startref = "ix_02intro-asciidoc6")))

[[explore_tx_history]]
==== 주소의 거래 내역 탐색

((( "addresses", "거래 내역 탐색", id = "ix_02intro-asciidoc8", range = "startofrange"))) ((( "MetaMask", "주소의 거래 내역 탐색", id = " ix_02intro-asciidoc9 ", range ="startofrange "))) 이제 MetaMask를 사용하여 테스트 이더를 보내고받는 데 전문가가되었습니다. 귀하의 지갑은 적어도 두 번의 지불을 받았으며 적어도 한 번을 보냈습니다. _ropsten.etherscan.io_ 블록 탐색기를 사용하여 이러한 모든 트랜잭션을 볼 수 있습니다. 지갑 주소를 복사하여 블록 탐색기의 검색 창에 붙여 넣거나 MetaMask가 페이지를 열도록 할 수 있습니다. MetaMask의 계정 아이콘 옆에 세 개의 점이있는 버튼이 있습니다. 클릭하면 계정 관련 옵션 메뉴가 표시됩니다 (< 1 >)

[[metamask_account_context_menu]]
.MetaMask 계정 컨텍스트 메뉴
image :: images / metamask_account_context_menu.png [ MetaMask 계정 컨텍스트 메뉴]

Etherscan에서 계정보기를 선택하여 < 1 > 과 같이 계정의 거래 내역을 보여주는 블록 탐색기에서 웹 페이지를 염니다

[[block_explorer_account_history]]
.Etherscan의 주소 거래 내역
image :: images / block_explorer_account_history.png [ Etherscan 주소 거래 내역]

여기에서 이더리움 주소의 전체 거래 내역을 볼 수 있습니다. 귀하의 주소가 발신자 또는 수신자 인 Ropsten 블록 체인에 기록 된 모든 거래를 보여줍니다. 자세한 내용을 보려면 이러한 거래 중 일부를 클릭하십시오.

모든 주소의 거래 내역을 탐색 할 수 있습니다. Ropsten Test Faucet 주소의 거래 내역을 살펴보십시오 (힌트 : 귀하의 주소로 가장 오래된 지불에 나열된 "발신인"주소입니다). 수도꼭지에서 사용자 및 다른 주소로 전송 된 모든 테스트 에테르를 볼 수 있습니다. 당신이 보는 모든 거래는 더 많은 주소와 더 많은 거래로 이어질 수 있습니다. 머지 않아 상호 연결된 데이터의 미로에서 길을 잃게 될 것입니다. 퍼블릭 블록 체인에는 방대한 양의 정보가 포함되어 있으며, 모든 정보는 향후 예제에서 볼 수 있듯이 프로그래밍 방식으로 탐색 할 수 있습니다 (((range = "endofrange", startref = "ix_02intro-asciidoc9"))) (((range = "endofrange ", startref ="ix_02intro-asciidoc8 "))). (((range ="endofrange ", startref ="ix_02intro-asciidoc3 "))) (((range ="endofrange ", startref ="ix_02intro-asciidoc2 ")) )

[[intro_world_computer]]
=== 세계 컴퓨터 소개

((( "이더리움 (일반적으로)", "및 EVM"))) (( "EVM (이더 리움 가상 머신)", "세계 컴퓨터"))) ((( "세계 컴퓨터, Ethereum as"))) 이제 지갑을 만들고 이더를주고 받았습니다. 지금까지 우리는 이더리움을 암호 화폐로 취급했습니다. 하지만 이더리움은 그 이상입니다. 사실, 암호 화폐 기능은 분산 된 세계 컴퓨터로서 이더리움의 기능에 종속됩니다. ((( "스마트 계약", "이더 및"))) 이더는 _ 이더 리움 가상 머신 _ (EVM)이라고하는 에뮬레이션 된 컴퓨터에서 실행되는 컴퓨터 프로그램 인 _ 스마트 계약 _ 실행 비용을 지불하는 데 사용됩니다.

EVM은 글로벌 싱글 톤으로, 마치 글로벌 단일 인스턴스 컴퓨터처럼 작동하며 모든 곳에서 실행됩니다. 이더리움네트워크의 각 노드는 계약 실행을 확인하기 위해 EVM의 로컬 복사본을 실행하는 반면, 이더리움 블록 체인은 트랜잭션 및 스마트 계약을 처리 할 때이 세계 컴퓨터의 변화하는 _state_를 기록합니다. 이에 대해서는 < 1 >에서 더 자세히 설명하겠습니다.

[[EOA_ 계약]]
=== 외부 소유 계정 (EOA) 및 계약

((( "계약 계정", seealso = "스마트 계약"))) ((( "EOA (외부 소유 계정)", "기본"))) ((( "이더 리움 (일반)", "EOA 및 계약" ))) ((( "스마트 계약", "기본"))) 메타 마스크 지갑에서 생성 한 계정 유형을 _ 외부 소유 계정 _ (EOA)이라고합니다. 외부 소유 계정은 개인 키가있는 계정입니다. 개인 키가 있다는 것은 자금 또는 계약에 대한 액세스 제어를 의미합니다. 이제 다른 유형의 계정이있을 것입니다. 다른 유형의 계정은 _ 계약 계정 _입니다. 계약 계정에는 간단한 EOA가 가질 수없는 스마트 계약 코드가 있습니다. 또한 계약 계정에는 개인 키가 없습니다. 대신, 스마트 계약 코드의 논리에 의해 소유 (및 제어)됩니다. 계약 계정 생성시 이더리움 블록 체인에 기록되고 EVM에 의해 실행되는 소프트웨어 프로그램입니다.

계약에는 EOA와 마찬가지로 주소가 있습니다. 계약은 또한 EOA와 마찬가지로 이더를 보내고받을 수 있습니다. 그러나 트랜잭션 대상이 계약 주소 인 경우 해당 계약은 트랜잭션 및 트랜잭션 데이터를 입력으로 사용하여 EVM에서 해당 계약을 _run_합니다. 이더 외에도 트랜잭션에는 계약에서 실행할 특정 기능과 해당 기능에 전달할 매개 변수를 나타내는 _data_가 포함될 수 있습니다. 이러한 방식으로 트랜잭션은 계약 내에서 기능을 _call_ 할 수 있습니다.

계약 계정에는 개인 키가 없기 때문에 트랜잭션을 _ 초기화 _ 할 수 없습니다. EOA만이 트랜잭션을 시작할 수 있지만 계약은 다른 계약을 호출하여 복잡한 실행 경로를 구축하여 트랜잭션에 _ 반응 _ 할 수 있습니다. 이것의 일반적인 용도 중 하나는 EOA가 요청 트랜잭션을 다중 서명 스마트 계약 지갑에 전송하여 일부 ETH를 다른 주소로 보내는 것입니다. 일반적인 DApp 프로그래밍 패턴은 계약 A의 사용자간에 공유 상태를 유지하기 위해 계약 A가 계약 B를 호출하도록하는 것입니다.

다음 몇 섹션에서는 첫 번째 계약을 작성합니다. 그런 다음 MetaMask 지갑과 Ropsten 테스트 네트워크에서 이더를 테스트하여 해당 계약을 생성, 자금 조달 및 사용하는 방법을 배웁니다.

[[simple_contract_example]]
=== 간단한 계약 : 테스트 에테르 수도꼭지

((( "contract accounts", "creating", seealso = "Faucet.sol contract", id = "ix_02intro-asciidoc10", range = "startofrange"))) (( "Faucet.sol 계약 (테스트 예)" , "creating", id = "ix_02intro-asciidoc11", range = "startofrange"))) Ethereum에는 계약을 작성하고 EVM 바이트 코드를 생성하는 데 사용할 수있는 다양한 고급 언어가 있습니다. < 1 >에서 가장 눈에 띄고 흥미로운 것들에 대해 읽을 수 있습니다. 한 가지 고급 언어는 현명한 계약 프로그래밍을위한 지배적 인 선택 인 Solidity입니다. ((( "Wood, Dr. Gavin", "and Solidity"))) Solidity는이 책의 공동 저자 인 Dr. Gavin Wood가 만들었으며 이더 리움 (및 그 이상)에서 가장 널리 사용되는 언어가되었습니다. Solidity를 사용하여 첫 번째 계약을 작성합니다.

((( "Solidity", "faucet.sol and"))) 첫 번째 예 (< 1 >)의 경우 _faucet_를 제어하는 계약을 작성합니다. Ropsten 테스트 네트워크에서 테스트 에테르를 얻기 위해 이미 수도꼭지를 사용했습니다. 수도꼭지는 비교적 간단한 것입니다. 요청하는 모든 주소에 에테르를 공급하고 주기적으로 다시 채울 수 있습니다. 사람이나 웹 서버가 제어하는 지갑으로 수도꼭지를 구현할 수 있습니다.

[[solidity_faucet_example]]
.Faucet.sol : 수도꼭지를 구현하는 Solidity 계약
====
[소스, 솔리 디티, 라인 넘버]
----
include :: code / Solidity / Faucet.sol []
----
====

[메모]
====
이 책의 모든 코드 샘플은 https://github.com/ethereumbook/ethereumbook/ [책의 GitHub 저장소]의 _code_ 하위 디렉토리에서 찾을 수 있습니다. 특히 _Faucet.sol_ 계약은 다음과 같습니다.

----
code / Solidity / Faucet.sol
----
====

이것은 우리가 할 수있는 한 아주 간단한 계약입니다. 또한 _flawed_ 계약으로 여러 가지 나쁜 사례와 보안 취약성을 보여줍니다. 우리는 이후 섹션에서 모든 결함을 조사하여 배울 것입니다. 하지만 지금은이 계약의 기능과 작동 방식을 한 줄씩 살펴 보겠습니다. Solidity의 많은 요소가 JavaScript, Java 또는 Cpass : [++]와 같은 기존 프로그래밍 언어와 유사하다는 것을 금방 알 수 있습니다.

첫 번째 줄은 코멘트입니다.

[[코멘트]]
[소스, 솔리 디티]
----
// 첫 번째 계약은 수도꼭지입니다!
----

코멘트은 사람이 읽을 수있는 것이며 실행 가능한 EVM 바이트 코드에 포함되지 않습니다. 우리는 일반적으로 설명하려는 코드 앞 줄에 배치하거나 때로는 같은 줄에 배치합니다. 주석은 두 개의 슬래시 (+ // +)로 시작합니다. 첫 번째 슬래시부터 해당 줄의 끝까지 모든 것은 빈 줄과 동일하게 처리되고 무시됩니다.

다음 줄은 실제 계약이 시작되는 곳입니다.

[[계약 _ 정의]]
[소스, 솔리 디티]
----
계약 수도꼭지 {
----

이 줄은 다른 객체 지향 언어의 + class + 선언과 유사한 + contract + 객체를 선언합니다. 계약 정의에는 중괄호 (pass : [ <code>{}</code> ]) 사이의 모든 줄이 포함되며, 이는 다른 많은 프로그래밍 언어에서 중괄호가 사용되는 방식과 매우 유사합니다.

다음으로 + Faucet + 계약의 첫 번째 기능을 선언합니다.

[[출금 _ 기능]]
[소스, 솔리 디티]
----
function withdraw (uint withdraw_amount) public {
----

이 함수의 이름은 + withdraw +이고 + withdraw_amount +라는 하나의 부호없는 정수 (+ uint +) 인수를 사용합니다. 공용 함수로 선언되어 다른 계약에서 호출 할 수 있습니다. 함수 정의는 중괄호 사이에 있습니다. + withdraw + 함수의 첫 번째 부분은 인출 제한을 설정합니다.

[[인출 한도]]
[소스, 솔리 디티]
----
require (인출 금액 <= 100000000000000000);
----

내장 된 Solidity 함수 + require +를 사용하여 + withdraw_amount +가 에테르의 기본 단위 인 100,000,000,000,000,000 wei보다 작거나 같은 전제 조건을 테스트합니다 (<<ether_denominations> >) 및 0.1 에테르에 해당합니다. + withdraw + 함수가 해당 금액보다 큰 + withdraw_amount +로 호출되면 여기서 + require + 함수는 계약 실행을 중지하고 _exception_과 함께 실패하게합니다. Solidity에서 문은 세미콜론으로 종료해야합니다.

계약의이 부분은 우리 수도꼭지의 주요 논리입니다. 인출 한도를 설정하여 계약에서 자금의 흐름을 제어합니다. 매우 간단한 제어이지만 프로그래밍 가능한 블록 체인의 힘을 엿볼 수 있습니다 : 분산 형 소프트웨어 제어 돈.

다음은 실제 인출입니다.

[[인출_ 명령]]
[소스, 솔리 디티]
----
msg.sender.transfer (withdraw_amount);
----

몇 가지 흥미로운 일이 여기서 일어나고 있습니다. + msg + 개체는 모든 계약이 액세스 할 수있는 입력 중 하나입니다. 이 계약의 실행을 트리거 한 트랜잭션을 나타냅니다. + sender + 속성은 트랜잭션의 보낸 사람 주소입니다. + transfer + 함수는 현재 계약에서 보낸 사람의 주소로 이더를 전송하는 내장 함수입니다. 역방향으로 읽으면이 계약 실행을 트리거 한 + msg +의 + sender +에게 + transfer +를 의미합니다. + transfer + 함수는 금액을 유일한 인수로 사용합니다. 매개 변수가었던 + withdraw_amount + 값을 몇 줄 앞서 선언 한 + withdraw + 함수에 전달합니다.

바로 다음 줄은 닫는 중괄호로 + withdraw + 함수 정의의 끝을 나타냅니다.

다음으로 함수를 하나 더 선언합니다.

[[대체 _ 함수]]
[소스, 솔리 디티]
----
함수 () 외부 지급 {}
----

((( fallback function)))이 함수는 _fallback_ 또는 _default_ 함수로, 계약을 트리거 한 트랜잭션이 계약에서 선언 된 함수의 이름을 지정하지 않았거나 전혀 함수를 지정하지 않은 경우 호출됩니다. , 또는 데이터를 포함하지 않았습니다. 계약은 이러한 기본 기능 (이름없이)을 가질 수 있으며 일반적으로 이더를받는 기능입니다. 그렇기 때문에 외부 및 지불 가능한 기능으로 정의되어 계약에 에테르를 허용 할 수 있습니다. 중괄호 pass : [( <code>{}</code> )]의 빈 정의에 표시된대로 ether를 받아들이는 것 외에는 아무것도하지 않습니다. 마치 지갑 인 것처럼 계약 주소로 이더를 보내는 거래를하면이 함수가 처리합니다.

기본 함수 바로 아래에는 계약 + Faucet +의 정의를 닫는 마지막 닫는 중괄호가 있습니다. 그게 다야! (((range = "endofrange", startref = "ix_02intro-asciidoc11"))) (((range = "endofrange", startref = "ix_02intro-asciidoc10")))

[[컴파일 _ 수전 _ 계약]]
=== 수도꼭지 계약 컴파일

((( "컴파일", "Faucet.sol 계약", id = "ix_02intro-asciidoc12", range = "startofrange"))) ((( "Faucet.sol 계약 (테스트 예)", "컴파일", id = "ix_02intro-asciidoc13", range = "startofrange"))) 이제 첫 번째 계약 예제가 있으므로 Solidity 컴파일러를 사용하여 Solidity 코드를 EVM 바이트 코드로 변환해야 블록 체인 자체에서 EVM이 실행할 수 있습니다.

Solidity 컴파일러는 다양한 프레임 워크의 일부로 독립 실행 형 실행 파일로 제공되며 IDE (통합 개발 환경)에 번들로 제공됩니다. 간단하게하기 위해 _Remix_라고하는 더 많이 사용되는 IDE 중 하나를 사용합니다.

((( "Remix IDE"))) Chrome 브라우저 (이전에 설치 한 MetaMask 지갑 포함)를 사용하여 https://remix.ethereum.org []에서 Remix IDE로 이동합니다.

Remix를 처음로드하면 _ballot.sol_이라는 샘플 계약으로 시작됩니다. 필요하지 않으므로 < 1 >에서 볼 수 있듯이 탭 모서리의 + x +를 클릭하여 닫습니다.

[[remix_close_tab]]
. 기본 예제 탭을 닫습니다.
image :: images / remix_close_tab.png [ 기본 예제 탭 닫기]

이제 왼쪽 상단 도구 모음에서 원형 더하기 기호를 클릭하여 새 탭을 추가합니다.<<remix_toolbar>> . 새 파일의 이름을 _Faucet.sol_로 지정합니다.

[[remix_toolbar]]
더하기 기호를 클릭하여 새 탭을 엽니다.
image :: images / remix_toolbar.png [새 탭을 열려면 더하기 기호를 클릭하세요.]

새 탭이 열리면 < 1 >에 표시된대로 예제 _Faucet.sol_의 코드를 복사하여 붙여 넣습니다.

[[remix_faucet_load]]
새 탭에 Faucet 예제 코드를 복사합니다.
image :: images / remix_faucet_load.png [ 새 탭에 Faucet 예제 코드 복사]

Remix IDE에 _Faucet.sol_ 컨트랙트를로드하면 IDE가 자동으로 코드를 컴파일합니다. 모든 것이 잘되면 컴파일 탭 아래 오른쪽에 Faucet이있는 녹색 상자가 표시되어 성공적으로 컴파일되었음을 확인합니다 (<<remix_compile>>).

[[리믹스 컴파일]]
.Remix는 Faucet.sol 계약을 성공적으로 컴파일합니다.
image::images/remix_compile.png[""]

문제가 발생하면 가장 가능성이 높은 문제는 Remix IDE가 0.5.12와 다른 버전의 Solidity 컴파일러를 사용하고 있다는 것입니다. 이 경우 pragma 지시문은 _Faucet.sol_이 컴파일되지 않도록합니다. 컴파일러 버전을 변경하려면 설정 탭으로 이동하여 버전을 0.5.12로 설정하고 다시 시도하십시오.

Solidity 컴파일러는 이제 _Faucet.sol_을 EVM 바이트 코드로 컴파일했습니다. 궁금하다면 바이트 코드는 다음과 같습니다.

[[수도꼭지 _ 바이트 코드]]
----
PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xF JUMPI PUSH1 0x0 DUP1
REVERT JUMPDEST PUSH1 0xE5 DUP1 PUSH2 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN
STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3F JUMPI
PUSH1 0x0 CALLDATALOAD PUSH29
0x100000000000000000000000000000000000000000000000000000000
SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x2E1A7D4D EQ PUSH1 0x41 JUMPI
JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH1 0x4B JUMPI PUSH1 0x0 DUP1 REVERT
JUMPDEST PUSH1 0x5F PUSH1 0x4 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1
SWAP2 SWAP1 POP POP PUSH1 0x61 JUMP JUMPDEST STOP JUMPDEST PUSH8
0x16345785D8A0000 DUP2 GT ISZERO ISZERO ISZERO PUSH1 0x77 JUMPI PUSH1 0x0 DUP1
REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND
PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1
0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO
ISZERO PUSH1 0xB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP STOP LOG1 PUSH6
0x627A7A723058 KECCAK256 PUSH9 0x13D1EA839A4438EF75 GASLIMIT CALLVALUE LOG4 0x5f
PUSH24 0x7541F409787592C988A079407FB28B4AD000290000000000
----

EVM 바이트 코드에서 직접 프로그래밍하는 대신 Solidity와 같은 고급 언어를 사용하는 것이 기쁘지 않습니까? 나도요! (((range = "endofrange", startref = "ix_02intro-asciidoc13"))) (((range = "endofrange", startref = "ix_02intro-asciidoc12")))

[[계약 작성]]
=== 블록 체인에서 계약 생성

((( "blockchain", "creating contract on", id = "ix_02intro-asciidoc14", range = "startofrange"))) ((( "Faucet.sol contract (test example)", "on the blockchain", id = "ix_02intro-asciidoc15", range = "startofrange"))) 그래서 우리는 계약을 맺었습니다. 우리는 그것을 바이트 코드로 컴파일했습니다. 이제 이더리움 블록 체인에 계약을 "등록"해야합니다. 우리는 Ropsten 테스트 넷을 사용하여 계약을 테스트 할 것이므로 이것이 제출하려는 블록 체인입니다.

((( "zero address", "contract registration"))) 블록 체인에 계약을 등록하는 것은 목적지가 주소 인 + 0x0000000000000000000000000000000000000000 + (_ zero address_라고도 함) 인 특수 거래를 생성하는 것을 포함합니다. 제로 주소는 계약을 등록하고자 함을 이더리움 블록 체인에 알려주는 특수 주소입니다. 다행히 Remix IDE는이 모든 것을 처리하고 트랜잭션을 MetaMask로 보냅니다.

((( "Remix IDE", id = "ix_02intro-asciidoc16", range = "startofrange"))) 먼저 실행 탭으로 전환하고 환경 드롭 다운 선택 상자에서 주입 된 Web3을 선택합니다. 이것은 Remix IDE를 MetaMask 지갑에 연결하고 MetaMask를 통해 Ropsten 테스트 네트워크에 연결합니다. 그렇게하면 환경에서 Ropsten을 볼 수 있습니다. 또한 계정 선택 상자에 지갑 주소가 표시됩니다 (< 1 > 참조).

[[리믹스 _ 실행]]
.Remix IDE 실행 탭 (Injected Web3 환경 선택)
image :: images / remix_run.png [ "주입 된 Web3 환경이 선택된 리믹스 IDE 실행 탭"]

방금 확인한 실행 설정 바로 아래에 + Faucet + 계약이 생성 될 준비가되었습니다. < 1 >에 표시된 배포 버튼을 클릭합니다.

Remix는 특별한 "창작"트랜잭션을 구성하고 MetaMask는 < 1 >와 같이 승인을 요청할 것입니다. 컨트랙트 생성 트랜잭션에는 에테르가 없지만 262 바이트의 데이터 (컴파일 된 컨트랙트)가 있고 가스에서 10 gwei를 소비합니다. 승인하려면 제출을 클릭하십시오.

[[remix_metamask_create]]
계약 생성 트랜잭션을 보여주는 .MetaMask
image :: images / remix_metamask_create.png [ "계약 생성 트랜잭션을 보여주는 메타 마스크"]

이제 기다려야합니다. Ropsten에서 계약을 채굴하는 데 약 15 ~ 30 초가 걸립니다. 리믹스가 많은 일을하는 것 같지는 않지만 인내심을 가지십시오.

계약이 생성되면 실행 탭 하단에 나타납니다 (<<remix_contract_interact>> 참조).

[[remix_contract_interact]]
. 수전 계약은 살아 있습니다!
image :: images / remix_contract_interact.png [ 수전 계약은 살아 있습니다]

이제 + Faucet + 계약에 자체 주소가 있습니다. Remix는이를 & # x201c; Faucet at 0x72e ... c7829 & # x201d; (귀하의 주소, 임의의 문자 및 숫자는 다를 수 있음). 오른쪽의 작은 클립 보드 기호를 사용하면 계약 주소를 클립 보드에 복사 할 수 있습니다. 다음 섹션에서이를 사용합니다. (((range = "endofrange", startref = "ix_02intro-asciidoc16"))) (((range = "endofrange", startref = "ix_02intro-asciidoc15")))

[[상호 계약 _ 계약]]
=== 계약과 상호 작용

((( "Faucet.sol 계약 (테스트 예)", "interacting with", id = "ix_02intro-asciidoc17", range = "startofrange"))) 지금까지 배운 내용을 요약 해 보겠습니다. 이더리움 계약은 EVM이라는 가상 머신 내에서 실행되는 제어 자금. 블록 체인에 기록 될 바이트 코드를 제출하는 특수 트랜잭션에 의해 생성됩니다. 블록 체인에서 생성되면 지갑과 마찬가지로 이더 리움 주소를 갖게됩니다. 누군가 계약 주소로 트랜잭션을 보낼 때마다 계약이 EVM에서 실행되고 트랜잭션이 입력으로 실행됩니다. pass : [contract] 주소로 전송 된 트랜잭션은 이더 나 데이터 또는 둘 다를 가질 수 있습니다. 이더가 포함 된 경우 계약 잔액에 "예금"됩니다. 데이터가 포함 된 경우 데이터는 계약에서 명명 된 함수를 지정하고 호출하여 함수에 인수를 전달할 수 있습니다.

[[조회 _ 계약 _ 주소]]
==== 블록 탐색기에서 계약 주소보기

((( "Faucet.sol 계약 (테스트 예)", "블록 탐색기에서 계약 주소보기"))) 이제 블록 체인에 계약이 기록되었으며 이더리움 주소가 있음을 알 수 있습니다. _ropsten.etherscan.io_ 블록 탐색기에서 확인하고 계약이 어떻게 생겼는지 살펴 보겠습니다. Remix IDE에서 이름 옆에있는 클립 보드 아이콘을 클릭하여 계약 주소를 복사하십시오 (< 1 > 참조).

[[remix_contract_address]]
.Remix에서 계약 주소 복사
image :: images / remix_contract_address.png [ "Remix에서 계약 주소 복사"]

Remix를 열어 두십시오. 나중에 다시 돌아올 것입니다. 이제 브라우저에서 _ropsten.etherscan.io_로 이동하고 주소를 검색 창에 붙여 넣습니다. < 1 >에 표시된 것처럼 계약의 이더리움 주소 내역을 볼 수 있습니다. (((range = "endofrange", startref = "ix_02intro-asciidoc17")))

[[etherscan_contract_address]]
.Etherscan 블록 탐색기에서 수도꼭지 계약 주소보기
image :: images / etherscan_contract_address.png [ "etherscan 블록 탐색기에서 수도꼭지 계약 주소보기"]

[[fund_contract]]
==== 계약 자금 조달

((( "Faucet.sol 계약 (테스트 예)", "이더 전송", id = "ix_02intro-asciidoc18", range = "startofrange"))) 현재 계약 내역에는 거래 내역이 하나만 있습니다. 계약 생성 거래. 보시다시피 계약에는 이더가 없습니다 (잔액 없음). 그것은 우리가 가질 수 있었음에도 불구하고 생성 트랜잭션에서 계약에 이더를 보내지 않았기 때문입니다.

우리 수도꼭지는 자금이 필요합니다! 첫 번째 프로젝트는 MetaMask를 사용하여 계약에 이더를 보내는 것입니다. 클립 보드에 계약 주소가 남아 있어야합니다 (그렇지 않은 경우 Remix에서 다시 복사). MetaMask를 열고 다른 이더리움 주소로 보내는 것과 똑같이 1 개의 이더를 보냅니다 (<<metamask_send_to_contract> >참조).

[[metamask_send_to_contract]]
. 계약 주소로 이더 1 개 보내기
image :: images / metamask_send_to_contract.png [ ""]

1 분 안에 Etherscan 블록 탐색기를 다시로드하면 계약 주소에 대한 또 다른 거래와 1 이더의 업데이트 된 잔액이 표시됩니다.

_Faucet.sol_ 코드에서 이름이 지정되지 않은 기본 외부 지불 기능을 기억하십니까? 다음과 같이 보였습니다.

[[대체 _ 기능 _ 검토]]
[소스, 솔리 디티]
----
함수 () 외부 지급 {}
----

호출 할 함수를 지정하는 데이터없이 계약 주소로 트랜잭션을 보내면이 기본 함수를 호출했습니다. + payable +로 선언했기 때문에 1 이더를 수락하고 계약의 계정 잔액에 예치했습니다. 거래로 인해 계약이 EVM에서 실행되어 잔액이 업데이트되었습니다. 수도꼭지에 자금을 지원하셨습니다! (((range = "endofrange", startref = "ix_02intro-asciidoc18")))

[[계약에서 _ 출금 _ 인출]]
==== 계약 철회

((( "Faucet.sol 계약 (테스트 예)", "자금 인출", id = "ix_02intro-asciidoc19", range = "startofrange")))) (( "계약에서 자금 인출", id = " ix_02intro-asciidoc20 ", range ="startofrange "))) 다음으로 수도꼭지에서 자금을 인출하겠습니다. 인출하려면 + withdraw + 함수를 호출하고 + withdraw_amount + 인수를 전달하는 트랜잭션을 생성해야합니다. 지금은 간단하게 유지하기 위해 Remix가 해당 트랜잭션을 구성하고 MetaMask가 승인을 위해이를 제시합니다.

리믹스 탭으로 돌아가서 실행 탭에서 계약을 확인하십시오. + uint256 withdraw_amount +라는 필드 항목이있는 + withdraw +라는 주황색 상자가 표시되어야합니다 (<<remix_contract_withdraw> >참조).

[[remix_contract_withdraw]]
.Remix에서 Faucet.sol의 철회 기능
image :: images / remix_contract_interact.png [ "Remix에서 Faucet.sol의 철회 기능"]

이것은 계약에 대한 Remix 인터페이스입니다. 계약에 정의 된 함수를 호출하는 트랜잭션을 구성 할 수 있습니다. + withdraw_amount +를 입력하고 출금 버튼을 클릭하여 거래를 생성합니다.

먼저 + withdraw_amount +를 알아 봅시다. 계약에서 허용하는 최대 금액 인 0.1 이더를 인출하려고합니다. 이더리움의 모든 통화 값은 내부적으로 wei로 표시되며 + withdraw + 기능은 + withdraw_amount +도 wei로 표시 될 것으로 예상합니다. 우리가 원하는 양은 0.1 이더로 100,000,000,000,000,000 wei입니다 (1 뒤에 0이 17 개 있음).



[TIP]
====
JavaScript의 제한으로 인해 10 ^ 17만큼 큰 숫자는 Remix에서 처리 할 수 없습니다. 대신 큰 따옴표로 묶어 Remix가 문자열로 수신하고 + BigNumber +로 조작 할 수 있도록합니다. 따옴표로 묶지 않으면 Remix IDE가 처리하지 못하고 "오류 인코딩 인수 : 오류 : 어설 션 실패"를 표시합니다.
====

+ withdraw_amount + 상자에 "100000000000000000"(따옴표 포함)을 입력하고 인출 버튼을 클릭합니다 (< 1 > 참조).

[[remix_withdraw]]
.Remix에서 '출금'을 클릭하여 출금 거래를 생성합니다.
image::images/remix_withdraw.png[""]

MetaMask는 승인 할 거래 창을 표시합니다. 컨트랙트로 출금 전화를 보내려면 확인을 클릭하세요 (<<metamask_withdraw>>참조)

[[metamask_withdraw]]
인출 기능을 호출하는 .MetaMask 트랜잭션
image :: images / metamask_withdraw.png [인출 기능을 호출하는 메타 마스크 트랜잭션]

잠시 기다렸다가 Etherscan 블록 탐색기를 다시로드하여 + Faucet + 계약 주소 기록에 반영된 트랜잭션을 확인합니다 (<<etherscan_withdrawal_tx> >참조)

[[etherscan_withdrawal_tx]]
.Etherscan은 인출 기능을 호출하는 트랜잭션을 보여줍니다.
image :: images / etherscan_withdrawal_tx.png [ 이더 스캔은 인출 기능을 호출하는 트랜잭션을 보여줍니다.]


이제 계약 주소가 대상이고 값이 0 이더 인 새 트랜잭션이 표시됩니다. 계약 잔액이 변경되었으며 요청에 따라 0.1 이더를 보냈으므로 이제 0.9 이더입니다. 그러나 _ 계약 주소 내역 _에 'OUT'트랜잭션이 표시되지 않습니다.

출금은 어디입니까? 계약의 주소 내역 페이지에 내부 거래라는 새 탭이 나타납니다. ((( "내부 트랜잭션 (메시지)"))) 0.1 이더 전송이 계약 코드에서 시작 되었기 때문에 내부 트랜잭션 (_message_라고도 함)입니다. 해당 탭을 클릭하여 확인하십시오 (< 1 > 참조).


이 "내부 트랜잭션"은 다음 코드 줄의 계약에 의해 전송되었습니다 (_Faucet.sol_의 pass :[1[2 [withdraw]2]1] 함수에서).

[[withdraw_command_review]]
[소스, 솔리 디티]
----
msg.sender.transfer (withdraw_amount);
----

요약하자면 : 0.1 ether의 + withdraw_amount + 인수를 사용하여 + withdraw + 함수를 호출하라는 데이터 지침이 포함 된 MetaMask 지갑에서 트랜잭션을 보냈습니다. 이 거래로 인해 계약이 EVM 내에서 실행되었습니다. EVM이 + Faucet + 계약의 + withdraw + 기능을 실행함에 따라 먼저 + require + 기능을 호출하고 요청 된 금액이 허용 된 최대 출금 인 0.1 이더보다 작거나 같은지 확인했습니다. 그런 다음 + transfer + 함수를 호출하여 이더를 보냅니다. + transfer + 기능을 실행하면 계약 잔액에서 0.1 에테르를 지갑 주소에 입금하는 내부 트랜잭션이 생성되었습니다. Etherscan (((range = "endofrange", startref = "ix_02intro-asciidoc20"))) (((range = "endofrange", startref = "ix_02intro-asciidoc19")))의 내부 트랜잭션 탭에 표시되는 것입니다. (((range = "endofrange", startref = "ix_02intro-asciidoc14")))

[[etherscan_withdrawal_internal]]
.Etherscan은 계약에서 이더를 전송하는 내부 트랜잭션을 보여줍니다.
image :: images / etherscan_withdrawal_internal.png [ Etherscan은 계약에서 이더를 전송하는 내부 거래를 보여줍니다.]

[[intro_conclusion]]
=== 결론

이 장에서는 MetaMask를 사용하여 지갑을 설정하고 Ropsten 테스트 네트워크의 수도꼭지를 사용하여 자금을 조달했습니다. 지갑의 이더 리움 주소로 이더를받은 다음 수도꼭지의 이더 리움 주소로 이더를 보냈습니다.

다음으로 Solidity에서 수도꼭지 계약을 작성했습니다. Remix IDE를 사용하여 계약을 EVM 바이트 코드로 컴파일 한 다음 Remix를 사용하여 트랜잭션을 형성하고 Ropsten 블록 체인에서 + Faucet + 계약을 생성했습니다. 생성 된 + Faucet + 계약에는 이더리움 주소가 있으며 이더리움 주소를 보냈습니다. 마지막으로 + withdraw + 함수를 호출하는 트랜잭션을 구성하고 성공적으로 0.1 이더를 요청했습니다. 계약은 요청을 확인하고 내부 거래로 0.1 이더를 보냈습니다.

별로 보이지 않을 수도 있지만 분산화 된 세계 컴퓨터에서 돈을 제어하는 소프트웨어와 성공적으로 상호 작용했습니다.

< 1 >에서 더 많은 스마트 계약 프로그래밍을 수행하고 < 2 >에서 모범 사례 및 보안 고려 사항에 대해 알아 봅니다. (((range = "endofrange", startref = "ix_02intro-asciidoc0")))