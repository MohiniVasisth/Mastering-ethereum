[role="pagenumrestart"]
[[whatis_chapter]]
== Co je Ethereum?

((("Ethereum (generally)","about", id="ix_01what-is-asciidoc0", range="startofrange")))Ethereum ((("world computer, Ethereum as")))je často popisováno jako „světový počítač.“ Co to však znamená? Začněme popisem zaměřeným na informatiku a pak  zkusíme uvést praktičtější analýzou schopností a charakteristik Etherea a porovnáme ho s Bitcoinem a dalšími decentralizovanými platformami pro výměnu informací (nebo zkráceně „bločenkami“).

Z pohledu informatiky je Ethereum deterministický, ale prakticky neomezený stavový stroj, skládající se z globálně přístupného a jednoinstančního (singleton) stavu a virtuálního stroje, který aplikuje změny na tento stav.

Z praktičtějšího hlediska je Ethereum software s otevřeným zdrojovým kódem, globálně decentralizovaná výpočetní infrastruktura, která provádí programy zvané _chytré kontrakty_. Používá bločenku k synchronizaci a ukládání změn stavu systému. Používá kryptoměnu zvanou _ether_ k určování ceny transakcí a využívání systémových zdrojů.

Platforma Ethereum umožňuje vývojářům vytvářet výkonné decentralizované aplikace s vestavěnými ekonomickými funkcemi. Poskytuje vysokou dostupnost, kontrolovatelnost, transparentnost a neutralitu, ale také snižuje nebo vylučuje cenzuru a snižuje určitá rizika plynoucí z chování protistrany.

[[bitcoin_comparison]]
=== Srovnání s Bitcoinem

((("Bitcoin","Ethereum compared to")))((("Ethereum (generally)","Bitcoin compared to")))Mnoho se seznámí s Ethereem po nějaké předchozí zkušeností s kryptoměnami, konkrétně s Bitcoinem. Ethereum sdílí mnoho společných prvků s jinými otevřenými bločenkami: síť typu peer-to-peer spojující účastníky, byzantský konsenzuální algoritmus tolerantní vůči chybám pro synchronizaci aktualizací stavu (bločenka využívající důkaz prací), použití kryptografických primitiv, jako jsou digitální podpisy a haše a digitální měna (ether).

V mnoha ohledech se však účel i konstrukce Etherea nápadně liší od účelů a otevřených bločenek, které mu předcházely, včetně Bitcoinu.

((("Ethereum (generally)","purpose of")))Účelem Etherea není primárně být platební síť využívající digitální měnu. (((("utility currency, ether as")))Zatímco digitální měna ether je nedílnou součástí a je nezbytná pro provozování Etherea, ether je zamýšlen jako _spotřební měna_, kterou se platí za použití platformy Ethereum jako světového počítače.

Na rozdíl od Bitcoinu, který má velmi omezený skriptovací jazyk, je Ethereum navrženo jako univerzální programovatelná bločenka, který provozuje _virtuální stroj_ schopný provádět kód libovolné a neomezené složitosti. Bitcoinový skriptovací jazyk úmyslně omezen na jednoduché vyhodnocení pravdivosti podmínky umožňující utrácení, zatímco Ethereum jazyk je _Turingovsky úplný_, což znamená, že Ethereum může přímo fungovat jako univerzální počítač.

[[blockchain_components]]
=== Součásti bločenky

((("blockchain","components of")))((("Ethereum (generally)","blockchain components"))) Součásti otevřené veřejné bločenky jsou (obvykle):

* Síť typu peer-to-peer (P2P) spojující účastníky a propagující transakce a bloky ověřených transakcí, založená na standardizovaném algoritmu: pass:[<span class="keep-together">vlny</span>]
* Zprávy, ve formě transakcí, využívané ke změně stavu
* Sada pravidel konsensu, která určují, co představuje transakce a čím lze dosáhnout platné změny stavu
* Stavový stroj, který zpracovává transakce podle pravidel konsensu
Řetězec kryptograficky zabezpečených bloků, který funguje jako nezměnitelný záznam všech ověřených a přijatých stavových přechodů
Algoritmus konsensu, který decentralizuje kontrolu nad bločenkou tím, že nutí účastníky ke spolupráci při prosazování pravidel konsensu
* Z hlediska teorie her spolehlivá motivační schémata (např. náklady na důkaz prací versus odměna za vytvoření bloku), která ekonomicky zajistí stavový stroj otevřený pass:[<span class="keep-together">prostředí</span>]
* Jedna nebo více implementací softwaru s otevřeným zdrojovým kódem s funkčností uvedenou výše („klienti“)

Všechny nebo většina těchto komponent je obvykle včleněna do jediného softwarového klienta. Například  ((("Bitcoin Core")))((("bitcoind client")))Bitcoin má referenční implementaci s otevřenými zdrojovými kódy zvanou _Bitcoin Core_, která obsahuje i klienta zvaného _bitcoind_. Ethereum nemá referenční implementaci, ale místo má ((("reference specification"))) _refereční specifikaci_, matematický popis systému v Žluté knize (viz <<references> >). Existuje řada klientů, kteří jsou naprogramovány podle referenční specifikace.

V minulosti jsme termín „bločenka“ používali k reprezentaci všech právě vyjmenovaných složek, jako zkratka pro kombinaci technologií, které zahrnují všechny popsané vlastnosti. Dnes však existuje obrovské množství bločenek s různými vlastnostmi. Potřebujeme kvalifikátory, aby nám pomohli porozumět charakteristikám dotčené bločenky, jako je _otevřená, veřejná, globální, decentralizovaná, neutrální,_ a _odolná proti cenzuře_, abychom identifikovali důležité charakteristiky „bločenkového“ systému, který tyto komponenty obsahuje.

Ne všechny bločenky jsou vytvořeny stejným způsobem. Když vám někdo řekne, že je něco jako bločenka, neobdrželi jste odpověď; raději byste měli začít klást spoustu otázek, abyste si objasnili, co to znamená, když někdo používá slovo „bločenka“. Začněte tím, že požádáte o popis součástí v předchozím seznamu, a pak se zeptejte, zda tato „bločenka“ vykazuje vlastnosti být _otevřená, veřejná_ atd.

[[ethereum_birth]]
=== Zrození Etherea

((("Ethereum (generally)","birth of")))Všechny velké inovace řeší skutečné problémy a Ethereum není výjimkou. Ethereum bylo vytvořeno v době, kdy lidé poznali sílu Bitcoinového modelu a snažili se nalézt další jeho využití  než pouze jako kryptoměny. Vývojáři však čelili hlavolamu: buď  mohli stavět na Bitcoinu, nebo mohli vytvořit novou bločenku. ((("Bitcoin","limitations of")))Stavět na Bitcoinu znamená žít v úmyslných omezeních sítě a snažit se najít řešení. Zdá se, že omezená sada typů transakcí, datových typů a velikostí ukládání dat omezuje druhy aplikací, které by mohly běžet přímo na Bitcoinu; všechno ostatní potřebovalo další vrstvy mimo bločenku, a to okamžitě popřelo mnoho výhod používání veřejné bločenky. Pro projekty, které vyžadovaly více svobody a flexibility při využívání veřejné bločenky, byla jedinou možností nová bločenka. To však znamenalo spoustu práce: vytvoření a zavádění všech prvků infrastruktury, vyčerpávající testování atd.

((("Buterin, Vitalik","and birth of Ethereum")))Na konci roku 2013 začal mladý programátor a Bitcoinový nadšenec Vitalik Buterin přemýšlet o dalším rozšiřování možností Bitcoinu a Mastercoinu (nadstavbový protokol, který rozšiřoval Bitcoin, aby nabízel základní chytré kontrakty). V říjnu téhož roku Vitalik navrhl obecnější přístup týmu Mastercoinu, který umožnil flexibilní a skriptovatelné (ale nikoli Turingovsky úplné) chytré kontrakty nahrazující specializovaný jazyk chytrých kontraktů, který používal Mastercoin. Přestože byl tým Mastercoinu ohromen, byl tento návrh příliš radikální změnou, než aby se vešly do jejich harmonogramu budoucích plánů.

V prosinci 2013 začal Vitalik sdílet technickou dokumentaci (whitepaper), která nastínila myšlenku Etherea: Turingovsky úplná, univerzální bločenka. Několik desítek lidí vidělo tento první návrh a nabídlo zpětnou vazbu, což Vitalikovi pomohlo tento návrh vyvinout.

Oba autoři této knihy obdrželi první návrhr technické dokumentace a komentovali jej. Andreas M. Antonopoulos byl nápadem zaujat a položil Vitalikovi mnoho otázek ohledně použití samostatné bločenky k prosazování konsensuálních pravidel pro provádění chytrých kontraktů a důsledků plynoucích z využitou Turingovsky úplného jazyka. Andreas nadále sledoval pokrok Etherea s velkým zájmem, ale byl v raných fázích psaní své knihy _Mastering Bitcoin_ a přímo nezúčastnil raných prací na Ethereu. (("Wood, Dr. Gavin","and birth of Ethereum")))Dr. Gavin Wood byl však jedním z prvních lidí, který oslovil Vitalika a nabídl mu pomoc svými programovacími schopnostmi v jazyku C ++. Gavin se stal spoluzakladatelem Etherea, návrhářem zdrojového kódu a technickým ředitelem.

Jak Vitalik popisuje ve svém http://bit.ly/2T2t6zs["Ethereum Prehistory" post]: 

____
To byl čas, kdy byl Ethereum protokol zcela mým vlastním výtvorem. Od této chvíle se však do této skupiny začali zapojovat noví účastníci. Zdaleka nejvýznamnějším na straně protokolu byl Gavin Wood ...

Gavin má také velkou zásluhu na drobné změně vize jak nahlížet na Ethereum. Původní pohled byl platforma pro vytváření programovatelných peněz, s kontrakty uloženými v bločence, které mohou držet digitální aktiva a převádět je podle předem stanovených pravidel. Nový pohled je univerzální výpočetní platforma. Začalo to jemnými změnami v důrazu a terminologii a později se tento vliv zesílil rostoucím důrazem na spolupráci s „Web 3“, v němž bylo Ethereum považováno za jeden díl sady decentralizovaných technologií, další dva byly Whisper a Swarm.
____

Od prosince 2013 Vitalik a Gavin tuto myšlenku zdokonalovali a rozvíjeli a společně vytvořili vrstvu protokolu, která se stala Ethereem.

Zakladatelé Etherea přemýšleli o bločence bez konkrétního účelu, která by mohla podporovat _programování_ široké škály aplikací. Myšlenkou bylo, že vývojář mohl s využitím univerzální bločenky, jako je Ethereum, naprogramovat svou konkrétní aplikaci, aniž by musel implementovat základní mechanismy sítí typu peer-to-peer, bločenek, algoritmů dosahování konsensu, atd. Platforma Ethereum byla navržena tak, aby abstraktovala od těchto podrobnosti a poskytovala deterministické a bezpečné programovací prostředí pro decentralizované bločenkové aplikace.

Stejně tak Satoshi, Vitalik a Gavin nevymysleli jen novou technologii; kombinovali nové vynálezy s existujícími technologiemi novým způsobem a dodali prototypový kód, aby dokázali světu své nápady.

Zakladatelé pracovali roky, budovali a vylepšovali vizi. A 30. července 2015 byl vytěžen první Ethereum  blok. Světový počítač začal sloužit světu.

[NOTE]
====
Článek Vitalika Buterina „A Prehistory of Ethereum“ vyšel v září 2017 a poskytuje fascinující pohled na první okamžiky Etherea z první osoby.

Můžete si ji přečíst na
https://vitalik.ca/general/2017/09/14/prehistory.html[].
====

[[development_stages]]
=== Čtyři etapy vývoje Etherea

((("Ethereum (generally)","four stages of development"))) Vývoj Etherea byl naplánován do čtyřech různých fází, přičemž v každé fázi mělo dojít k zásadním změnám. ((("hard forks", seealso="DAO; other specific hard forks, e.g.: Spurious Dragon")))Fáze může zahrnovat dílčí verze, známé jako „tvrdá rozštěpení,“ které mění funkčnost způsobem, který není zpětně kompatibilní.

Čtyři hlavní vývojové fáze jsou kódově označeny _Frontier_, _Homestead_, _Metropolis_ a _Serenity_. Nadcházející tvrdá rozštěpení, která dosud proběhla (nebo se plánují), jsou označeny jako _Ice Age_, _DAO_, _Tangerine Whistle_, _Spurious Dragon_, _Byzantium_ a _Constantinople_. Jak fáze vývoje, tak i nadcházející tvrdá rozštěpení jsou zobrazeny na následující časové ose, která je „datována“ číslem bloku:


Blok #0:: ((("Frontier")))__ Frontier __ - Počáteční fáze projektu Ethereum, která trvá od 30. července 2015 do března 2016.

Blok #200 000:: ((("Ice Age")))__Ice Age__ - Tvrdě rozštěpení, které zavedlo exponenciální zvyšování obtížnosti těžby, což motivuje přechod k důkazu podílem, až bude připraven.

Blok #1 150 000:: ((("Homestead")))__Homestead__ - Druhá etapa Etherea, zahájená v březnu 2016.

Blok #1,192,000:: ((("DAO (Decentralized Autonomous Organization)")))__DAO__ - Tvrdé rozštěpení, které odškodnilo  oběti útoku na kontrakt The DAO a způsobilo rozdělení Etherea na dva konkurenční systémy: Ethereum a Ethereum Classic.

Blok #2 463 000:: ((("Tangerine Whistle")))__Tangerine Whistle__ - Tvrdé rozštěpení, které změnilo výpočet plynu pro určité vstupně-výstupní operace a ze stavu systému vymazalo data vytvořená během útoku odepření služby (DoS), který využil nízké náklady na plyn při těchto operacích.

Blok #2 675 000:: ((("Spurious Dragon")))__Spurious Dragon__ - Tvrdě rozštěpení zabraňující dalším způsobům DoS útoku a další vyčištění stavu systému. Také byl přidán Mechanismus ochrany proti útoku (replay attack), při kterém by mohly být v hlavní síti opakovány transakce, které předtím proběhly na testovací síti.


Blok #4,370,000:: ((("Metropolis")))((("Byzantium fork")))__Metropolis Byzantium__ -  Metropolis je třetí etapa Etherea, aktuální v době psaní této knihy, spuštěná v říjnu 2017. Byzantium je první ze dvou tvrdých rozštěpení plánovaných pro Metropolis.


Po Byzantium je pro Metropolis naplánováno ještě jedno tvrdé rozštěpení ((("Constantinople fork")))((("Serenity")))Constantinople. Po Metropolis bude následovat závěrečná fáze nasazení Etherea, kódově pojmenovaná Serenity.


[[general_purpose_blockchain]]
=== Ethereum: bločenka pro univerzální účely

((("Bitcoin","Ethereum blockchain compared to Bitcoin blockchain")))((("Ethereum (generally)","as general-purpose blockchain")))Původní bločenka, konkrétně Bitcoinová bločenka, sleduje stav jednotek bitcoinů a jejich vlastnictví. ((("distributed state machine, Ethereum as")))Můžete o Bitcoinu přemýšlet jako o distribuovaném konsenzusu o _stavu stroje_, kde transakce způsobují globální _změnu stavu_ a mění vlastnictví mincí. Přechody stavu jsou omezeny pravidly konsensu, které umožňují všem účastníkům (nakonec) konvergovat ke společnému (konsensuálnímu) stav systému poté, co bylo vytěženo několik bloků.

Ethereum je také distribuovaný stavový stroj. Ale namísto pouhého sledování stavu vlastnictví měny, ((("key-value tuple"))) Ethereum sleduje přechody stavů z obecného datového úložiště, tj. úložiště, ve kterém mohou být uložena libovolná data vyjádřitelná jako dvojice _klíč–hodnota_. Úložiště dvojic klíč-hodnota umožňuje k zadanému klíči nalézt k němu asociovanou hodnotu. Například klíčem může být „Název knihy“ a k němu asociovanou hodnotou „Mastering Ethereum“.  V některých ohledech to slouží ke stejnému účelu jako model ukládání dat paměti _Random Access Memory_ (RAM) používaný ve většině běžných počítačů. Ethereum má paměť, která ukládá kód i data, a používá bločenku Etherea ke sledování změn této paměti v průběhu času. Stejně jako běžný počítač s uloženým programem může Ethereum načíst kód do svého stavového stroje a _spustit_ tento kód, přičemž výsledné změny stavu uloží do své bločenky. Dva z kritických rozdílů od většiny univerzálních počítačů spočívají v tom, že změny stavu Etherea se řídí pravidly konsensu a stav je distribuován globálně. Ethereum odpovídá na otázku: „Co kdybychom mohli sledovat libovolný stav a naprogramovat stavový stroj tak, aby vytvořil celosvětový počítač pracující na základě konsensu?“

[[ethereum_components]]
=== Součásti Etherea

((("blockchain","components of")))((("Ethereum (generally)","blockchain components")))V Ethereu jsou následující součásti bločenkového systému, podrobněji jsou popsané v <<blockchain_components>>:


P2P síť:: Ethereum běží na hlavní síti _Ethereum_, která je adresovatelná na TCP portu 30303, a provozuje protokol nazvaný _ÐΞVp2p_.

Pravidla konsensu:: Pravidla Ethereum konsensu jsou definována v referenční specifikaci, Žluté knize (viz <<references>>).

Transakce:: Ethereum transakce jsou síťové zprávy, které zahrnují (mimo jiné) odesílatele, příjemce, hodnotu a užitečná data.

[role="pagebreak-before"]
Stavový stroj:: Ethereum přechody stavu jsou zpracovávány virtuálním strojem _Ethereum Virtual Machine_ (EVM), což je virtuální stroj založený na zásobníkové architektuře, který provádí _bajtkód_ (instrukce strojového jazyka). Programy EVM, nazývané „chytré kontrakty“, jsou psány ve vysokoúrovňových jazycích na (např. Solidity) a kompilovány do bajtkódu pro provedení v EVM.

Datové struktury:: Stav Etherea je uložen lokálně v každém uzlu jako _databáze_ (obvykle Google LevelDB), která obsahuje transakce a stav systému v serializované hašované datové struktuře zvané _Merkle Patricia Strom_.

Algoritmus konsensu :: Ethereum používá Bitcoinový konsenzuální model Nakamoto Consensus, který používá sekvenční bloky s jedním podpisem, vážené podle důležitosti důkazem prací (PoW) pro určení nejdelšího řetězce a tedy současného stavu. V blízké budoucnosti se však plánuje přechod na vážený hlasovací systém důkazu podílem (PoS), nazvaný _Casper_.

Ekonomické zabezpečení:: Ethereum v současné době používá PoW pomocí algoritmu zvaného _Ethash_, ale to bude v budoucnosti nakonec zrušeno s přechodem na PoS.

Klienti:: Ethereum má několik interoperabilních implementací klientského softwaru, z nichž nejvýznamnější jsou _Go-Ethereum_ (_Geth_) a _Parity_.

[[references]]
==== Další čtení

Následující odkazy poskytují další informace o zde zmíněných technologiích:

* Ethereum Žlutá kniha (Yellow Paper):
https://ethereum.github.io/yellowpaper/paper.pdf

Béžová kniha (Beige Paper), přepis žluté knihy pro širší publikum v méně formálním jazyce:
https://github.com/chronaeon/beigepaper

* ÐΞVp2p síťový protokol:
http://bit.ly/2quAlTE

* Ethereum virtuální stroj - seznam zdrojů:
http://bit.ly/2PmtjiS

* Databáze LevelDB (nejčastěji používaná k ukládání lokální kopie bločenky):
https://github.com/google/leveldb

* Merkle Patricia stromy:
https://github.com/ethereum/wiki/wiki/Patricia-Tree

* Ethash PoW algoritmus:
https://github.com/ethereum/wiki/wiki/Ethash

* Casper PoS v1 implementační příručka:
http://bit.ly/2DyPr3l

* Go-Ethereum (Geth) klient:
https://geth.ethereum.org/

* Ethereum Parity klient:
https://parity.io/

[[turing_completeness]]
=== Ethereum a Turingovská úplnost

((("Ethereum (generally)","Turing completeness and")))((("Turing completeness","Ethereum and")))Jakmile začnete číst o Ethereu, okamžitě se setkáte s termínem „Turingovská úplnost.“  Ethereum, říkají, na rozdíl od Bitcoinu, je Turingovsky kompletní. Co přesně to znamená?

((("Turing, Alan")))Termín odkazuje na anglického matematika Alana Turinga, který je považován za otce informatiky. V roce 1936 vytvořil matematický model počítače skládající se ze stavového stroje, který manipuluje se symboly čtením a zápisem do sekvenční paměti (připomínající nekonečnou papírovou pásku). S tímto konstruktem Turing pokračoval, aby poskytl matematický základ k zodpovězení otázky ohledně _univerzální vyčíslitelnosti_, což znamená, zda jsou všechny problémy řešitelné. Dokázal, že existují třídy problémů, které nejsou vyčíslitelné. ((("halting problem")))Konkrétně prokázal, že  _problém zastavení_ (zda je možné, s ohledem na libovolný program a jeho vstup, určit, zda program nakonec přestane běžet) není řešitelný.

((("Universal Turing machine (UTM)")))((("UTM (Universal Turing machine)")))Alan Turing dále definoval že systém bude _Turingovsky úplný_, pokud může být použit k simulaci jakéhokoli Turingova stroje. Takový systém se nazývá _Univerzální Turingův stroj_ (UTM).

Schopnost Etherea provádět uložený program ve stavovém stroji zvaném Ethereum Virtual Machine využívajícím čtení a zápis dat do paměti z něj činí Turingovsky úplný systém, tedy UTM. Ethereum umí vypočítat jakýkoli algoritmus, který lze vypočítat jakýmkoli Turingovým strojem, vzhledem k omezení konečné paměti.

Průkopnickou inovací Etherea je kombinace univerzální výpočetní architektury počítače s uloženým programem a decentralizovanou bločenkou, čímž se vytvoří distribuovaný počítač s jednoznačným stavem (singleton). Ethereum programy běží „všude“, ale přesto vytvářejí společný stav, který je zajištěn pravidly konsensu pass:[<span class="keep-together">konsenzus</span>].

[[turing_completeness_feature]]
==== Turingová úplnost jako „vylepšení“

((("Turing completeness","as feature")))Když uslyšíte, že Ethereum je Turingovsky úplné, můžete dojít k závěru, že toto je _vlastnost_, které nějakým způsobem chybí v systému, který je Turingovsky neúplný. Spíše je to naopak. Turingské úplnosti je velmi snadné dosáhnout; ve skutečnosti http://bit.ly/2ABft33[nejjednodušší známý Turingovsky úplný stavový stroj] má 4 stavy a používá 6 symbolů, definice přechodů mezi stavy je dlouhá pouze 22 instrukcí. Ve skutečnosti se někdy zjistí, že systémy jsou „nechtěně Turingovsky kompletní“. Zábavný odkaz na takové systémy lze nalézt na adrese http://bit.ly/2Og1VgX [].

Turingova úplnost je však velmi nebezpečná, zejména v systémech s otevřeným přístupem, jako jsou veřejné bločenky, kvůli problému zastavení, kterého jsme se dotkli dříve. Například moderní tiskárny jsou Turingovsky úplné a mohou jim být dány k tisku soubory, které je dovedou do zmrazeného stavu. Skutečnost, že Ethereum je Turingovsky úplné, znamená, že Ethereum může spočítat jakýkoli program jakékoli složitosti. Tato flexibilita však přináší některé komplikované problémy se zabezpečením a správou prostředků. Nereagující tiskárnu lze vypnout a znovu zapnout. To není možné s veřejnou bločenkou.

[[turing_completeness_implications]]
==== Důsledky Turingovské úplnosti

((("Turing completeness","implications of")))Turing dokázal, že nemůžete předpovědět, zda program skončí, pokud ho budeme simulovat na počítači. Zjednodušeně řečeno, nemůžeme předpovědět cestu programu bez jeho spuštění. ((("infinite loops")))Turinovsky úplné systémy mohou běžet v „nekonečných smyčkách“, což je termín používaný (v zjednodušení) k popisu programu, který nikdy neskončí. Je triviální vytvořit program, který spouští smyčku, která nikdy nekončí. Neúmyslné nekonečné smyčky však mohou vzniknout bez varování kvůli složitým interakcím mezi počátečními podmínkami a kódem. V případě Etherea to představuje výzvu: každý zúčastněný uzel (klient) musí ověřit každou transakci a spustit jakékoli chytré kontrakty, které volá. Ale jak Turing dokázal, Ethereum nedokáže předvídat, zda chytrý kontrakt skončí, nebo jak dlouho to bude trvat, aniž by to vlastně nechal běžet (možná běží navždy). Ať už náhodou nebo úmyslně, chytrý kontrakt může být vytvořena tak, že běží navždy, když se ho uzel pokouší ověřit. To je skutečně útok DoS. A samozřejmě, mezi programem, který trvá milisekundu, a programem, který běží věčně, je nekonečná řada ošklivých, programů, které spotřebovávají paměť a další systémové prostředky, přehřívají procesor, jednoduše plýtvají prostředky. Ve světovém počítači program, který zneužívá zdroje, zneužívá světové zdroje. Jak Ethereum omezuje zdroje používané v chytrých kontraktech, pokud nemůže předvídat využití zdrojů předem?

((("EVM (Ethereum Virtual Machine)","gas and")))((("gas","as counter to Turing completeness"))) Jako odpověď na tuto výzvu zavádí Ethereum měřící mechanismus nazvaný _plyn_. Když EVM vykonává chytrý kontrakt, pečlivě počítá každou instrukci (výpočet, přístup k datům atd.). Každá instrukce má předem stanovené náklady v jednotkách plynu. Když transakce vyvolá vykonání chytrého kontraktu, musí tato transakce obsahovat množství plynu, které stanoví horní limit toho, co může být spotřebováno při provádění chytrého kontraktu. EVM ukončí provádění, pokud množství plynu spotřebované výpočtem překročí množství plynu dostupného v transakci. Plyn je mechanismus, který Ethereum používá k umožnění Turingovsky úplného výpočtu při současném omezení zdrojů, které může kterýkoli program spotřebovat.

Další otázka zní: „Jak lze získat plyn, kterým se platí za výpočet na  Ethereum světovém počítači?“ Na žádné burze nenajdete plyn.  ((("ether (generally)","gas and")))Lze jej zakoupit pouze jako součást transakce a lze jej za něj zaplatit pouze etherem. Ether musí být zaslán spolu s transakcí a musí být výslovně vyčleněn na nákup plynu spolu s přijatelnou cenou plynu. Stejně jako u čerpadla není cena plynu pevně stanovena. Pro transakci se nakupuje plyn, výpočet se provede a veškerý nepoužitý plyn se vrátí zpět odesílateli transakce.

[[DApp]]
=== Od univerzální bločenky po decentralizované aplikace (DApps)

((("DApps (decentralized applications)","Ethereum as platform for")))((("Ethereum (generally)","DApps and")))Ethereum začalo jako způsob, jak vytvořit univerzální bločenku, kterou lze naprogramovat pro různé účely. Ale velmi rychle se vize Etherea rozšířila a stalo se platformou pro programování DApps. DApps představují širší perspektivu než chytré kontrakty. DApp je přinejmenším chytrý kontrakt a webové uživatelské rozhraní. Obecněji řečeno, DApp je webová aplikace, která je vytvořena na základě otevřených, decentralizovaných infrastrukturních služeb typu peer-to-peer.

DApp se skládá alespoň z:

- Chytrého kontraktu na bločence
- Webového uživatelské rozhraní

Mnoho DApps navíc obsahuje další decentralizované komponenty, jako například:

- Decentralizovaný (P2P) protokol ukládání dat a platformu
- Decentralizovaný (P2P) komunikační protokol a platformu

[TIP]
====
Můžete vidět DApps hláskované jako _ÐApps_. Znak Ð je latinský znak zvaný „ETH“, který odkazuje na Ethereum. Chcete-li zobrazit tento znak, použijte kódový bod Unicode +0xD0+, nebo případně znakovou entitu HTML +eth+ (nebo desítkovou entitu +#208+).
====

[[evolving_WWW]]
=== Třetí věk internetu

((("DApps (decentralized applications)","web3 and")))((("Ethereum (generally)","web3 and")))((("web3")))V roce 2004 se dostal ve známost termín „web 2.0“, který popisuje vývoj webu směrem k obsahu vytvářenému uživateli, responzivnímu rozhraní a interaktivitě. Web 2.0 není technická specifikace, ale spíše termín popisující nové zaměření webů na pass:[<span class="keep-together">aplikace</span>].

Koncept DApps přivádí World Wide Web do jeho další přirozené vývojové fáze a to zavedení decentralizace pomocí protokolů typu peer-to-peer do všech aspektů webové aplikace. Termín používaný k popisu tohoto vývoje je _web3_, což znamená třetí „verzi“ webu. ((("Wood, Dr. Gavin","and web3")))Web3, který poprvé navrhl Dr. Gavin Wood, představuje novou vizi a zaměření na webové aplikace: od centrálně vlastněných a spravovaných aplikací po aplikace postavené na decentralizovaných protokolech.

V pozdějších kapitolách prozkoumáme JavaScript knihovnu  Ethereum web3.js, která propojuje aplikace JavaScriptu spuštěné ve vašem prohlížeči s bločenkou Etherea. Knihovna web3.js také obsahuje rozhraní k úložné síti P2P zvané _Swarm_ a službu zasílání zpráv P2P zvaná _Whisper_. Díky těmto třem komponentám zahrnutým do této JavaScript knihovny spuštěné ve webovém prohlížeči mají vývojáři kompletní sadu pro vývoj aplikací, která jim umožňuje vytvářet web3 DApps.

[[development_culture]]
=== Kultura vývoje Etherea

((("development culture, Ethereum")))((("Ethereum (generally)","development culture")))Zatím jsme hovořili o tom, jak se cíle a technologie Ethereum liší od cílů a bločenek, které mu předcházely., jako Bitcoin. Ethereum má také velmi odlišnou kulturu svého vývoje.

((("Bitcoin","development culture")))V Bitcoinu se vývoj řídí konzervativními principy: všechny změny jsou pečlivě studovány, aby se zajistilo, že nebude narušen žádný ze stávajících systémů. Z větší části jsou změny implementovány pouze tehdy, jsou-li zpětně kompatibilní. Stávající klienti se mohou přihlásit, a dokonce mohou pokračovat v činnosti, i pokud se nerozhodnou upgradovat.

((("backward compatibility, Ethereum vs. Bitcoin")))V Ethereum komunita se řídí odlišnou kulturou vývoje,  zaměřuje se spíše na budoucnost než na minulost. (Ne zcela vážná) mantra je „pohybujte se rychle a ničte věci“. Pokud je nutná změna, je implementována, i když to znamená zneplatnění předchozích předpokladů, porušení kompatibility nebo nucení klientů k aktualizaci. Vývojová kultura Etherea se vyznačuje rychlými inovacemi, rychlým vývojem a ochotou zavést do budoucna vylepšení, i když je to na úkor určité zpětné kompatibility.

To pro vás jako vývojáře znamená, že musíte zůstat flexibilní a připraveni znovu vybudovat svou infrastrukturu, protože se změní některé základní předpoklady. Jednou z velkých výzev, kterým vývojáři v Ethereum čelí, je inherentní rozpor mezi nasazením kódu do neměnného systému a vývojovou platformou, která se stále vyvíjí. Nemůžete jednoduše upgradovat své chytré kontrakty. Musíte být připraveni nasadit nové, migrovat uživatele, aplikace a fondy a začít znovu.

Je ironií, že to také znamená, že cíl budování systémů s větší autonomií a méně centralizovanou kontrolou není stále plně realizován. Autonomie a decentralizace vyžadují na platformě o něco více stability, než se v Etereu pravděpodobně dostanete v příštích několika letech. Chcete-li platformu „vyvinout“, musíte být připraveni zrušit a restartovat vaše chytré kontrakty, což znamená, že si musíte nad nimi zachovat určitý stupeň kontroly.

Pozitivní je, že Ethereum postupuje velmi rychle. Je jen málo příležitostí pro „zabývání se nepodstatnými detaily,“ zastavit vývoj tím, že se bude dohadovat o drobných detailech, například o tom, jak postavit kůlnu na kola v zadní části jaderné elektrárny. Pokud začnete zabývat kůlnou na kola, najednou zjistíte, že zatímco jste byli rozptýleni, zbytek vývojového týmu změnil plán a odhodil kola ve prospěch autonomního vznášedla.

Nakonec se vývoj platformy Ethereum zpomalí a její rozhraní se zafixují. Mezitím je však hnací silou inovace. Měli byste raději držet krok, protože nikdo pro vás nezpomalí.

[[why_learn]]
=== Proč se učit Ethereum?

((("blockchain","Ethereum as developer&#39;s blockchain")))((("Ethereum (generally)","reasons to learn")))Bločenky mají velmi strmou křivku učení, protože kombinují více disciplín do jedné domény : programování, zabezpečení informací, kryptografii, ekonomiku, distribuované systémy, sítě typu peer-to-peer atd. Ethereum dělá tuto křivku učení mnohem méně strmou, takže můžete začít rychle. Ale těsně pod povrchem klamně jednoduchého prostředí leží mnohem víc. Jak se učíte a začnete hlouběji hledat, je tu vždy další vrstva složitosti a údivu.

Ethereum je skvělá platforma pro učení o bločenkách a buduje masivní komunitu vývojářů rychleji než kterákoli jiná bločenková platforma. Ethereum je více než jakýkoli jiný nástroj pro vývojáře vytvořený vývojáři pro vývojáře. Vývojář, který je obeznámen s JavaScriptovými aplikacemi, se může dostat do Etherea velmi rychle a začít programovat funkční kód. Prvních několik let života Etherea bylo běžné vidět trička, jak oznamují, že můžete vytvořit token v pouhých pěti řádcích kódu. Jde samozřejmě o dvojsečný meč. Je snadné psát kód, ale je velmi těžké psát _dobrý_ a _bezpečný_ code.

[[teaching_objectives]]
=== Co vás tato kniha naučí

Tato kniha se ponořuje do Etherea a zkoumá všechny komponenty. Začnete jednoduchou transakcí, prozkoumáte, jak to funguje, vytvoříte jednoduchý chytrý kontrakt, vylepšíte ho a sledujete jeho cestu systémem Ethereum.

Dozvíte se nejen, jak používat Ethereum - jak to funguje -, ale také proč je navrženo tak, jak je. Budete schopni porozumět tomu, jak každá z jeho částí funguje a jak do sebe zapadají zapadají a proč. (((range="endofrange", startref="ix_01what-is-asciidoc0")))((("account","contract", see="smart contracts")))((("assymetric cryptography", see="public key cryptography")))((("BIPs", see="Bitcoin improvement proposals")))((("burn", see="ether burn")))((("cryptography","asymmetric", see="public key cryptography")))((("decentralized applications", see="DApps")))((("Decentralized Autonomous Organization", see="DAO")))((("default function", see="fallback function")))((("deterministic (seeded) wallets","hierarchical", see="hierarchical deterministic wallets")))((("DoS attacks", see="denial of service attacks")))((("ECDSA", see="Elliptic Curve Digital Signature Algorithm")))((("ETC", see="Ethereum Classic")))((("Ethereum (generally)","clients", see="clients, Ethereum")))((("Ethereum Improvement Proposals", see="EIP entries")))((("Ethereum Name Service", see="ENS")))((("Ethereum Virtual Machine", see="EVM")))((("Externally Owned Account", see="EOA")))((("fees", see="gas")))((("ICOs", see="Initial Coin Offerings")))((("Mastering Ethereum Token", see="METoken")))((("MEW", see="MyEtherWallet")))((("names/naming", see="ENS (Ethereum Name Service)")))((("NFTs", see="nonfungible tokens")))((("PoS", see="proof of stake")))((("PoW", see="proof of work")))((("PoWHC", see="Proof of Weak Hands Coin")))((("Remote Procedure Call (RPC) commands", see="JSON-RPC API")))((("RPC (Remote Procedure Call) commands", see="JSON-RPC API")))((("Secure Hash Algorithm", see="SHA entries")))((("seeded wallets", see="deterministic wallets")))((("smart contracts","Vyper and", see="Vyper")))((("smartphones", see="mobile (smartphone) wallets")))((("storage", see="data storage")))((("SUICIDE", see="SELFDESTRUCT opcode")))((("synchronization", see="fast synchronization")))((("synchronization", see="first synchronization")))((("transaction fees", see="gas")))((("wallets","HD", see="hierarchical deterministic wallets")))((("wallets","MetaMask", see="MetaMask")))