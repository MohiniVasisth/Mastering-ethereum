[preface]
== Slovníček pojmů

Slovníček pojmů obsahuje mnoho pojmů používaných ve spojitosti s Ethereem. Tyto pojmy se používají v celé knize, proto si tento slovníček uložte pro rychlý přehled.

Účet::
((("account","defined")))Objekt obsahující adresu, zůstatek, nonci a nepovinné datové úložiště a bajtkód. Účet může být účet kontraktu nebo externě vlastněný účet (EOA).

Adresa::
((("addresses","defined")))Obecně reprezentuje EOA nebo kontrakt. Adresa může přijímat (cílová adresa) nebo odesílat (zdrojová adresa) transakce do bločenky. Konkrétně jde o 160 bitů z výstupu hašovací funkce Keccak aplikované na vyřejný klíč vytvořený kryptografií eliptických křivek ECDSA.

Assert::
((("assert function","defined")))V programovacím jazyku Solidity se +assert (false)+ zkompiluje na +0xfe+, neplatný operační kód, který spotřebuje veškerý zbývající plyn a vrátí všechny změny. Pokud je splněna podmínka v závorce příkazu +assert ()+, znamená to, že došlo k něčemu velmi špatnému a neočekávanému a budete muset opravit kód. Měli byste použít +assert ()+ pro otestování podmínek, které by nikdy neměly nabýt pravdivé hodnoty.

Big-endian::
((("big-endian, defined")))Poziční reprezentace čísla, při které je nejvýznamnější číslice uvedena jako první. Odpovídá běžné používanému zápisu čísel lidmi. Opakem je little-endian, u kterého jsou pozice číslic obráceny, jako první je uvedena nejméně významná číslice. 

BIPy::
((("Bitcoin improvement proposals (BIPs)"))) Návrhy na vylepšení Bitcoinu (Bitcoin Improvement Proposals). Soubor návrhů, které členové Bitcoinové komunity předložili ve snaze vylepšit Bitcoin. Například BIP-21 je návrh na zlepšení Bitcoinového jednotného označování zdrojů (uniform resource identifier; URI).

Blok::
((("block, defined")))Uspořádaná posloupnost požadovaných informací (hlavička bloku) o transakcích, o které se rozšiřuje konsensus o stavu systému, a množina dalších hlaviček bloků známých jako potomci předka (ommers). Bloky jsou do Ethereum sítě přidávány těžaři. 

Bločenka (blockchain)::
((("blockchain","defined")))V Ethereu, posloupnost bloků ověřená důkazem prací. Každý blok je spojen se svým předchůcem, postupně až k základnímu (genesis) bloku. Narozdíl od Bitcoinového protokolu zde není limit na velikost bloku, ale místo toho se používá limit na množství spotřebovaného plynu.  

Bajtkód::
((("bytecode", seealso="EVM bytecode")))Abstraktní instrukční sada určená pro efektivní provádění softwarovým interpretem nebo virtuálním strojem. Na rozdíl od lidsky čitelného zdrojového kódu je bajtkód vyjádřen v číselném formátu. 

Byzantium rozštěpení::
((("Byzantium fork")))První ze dvou tvrdých rozštěpení (hard fork) pro vývojovou fázi Metropolis. Zahrnovalo EIP-649: odložení obtížnostní bomby a snížení odměny za vytěžení bloku. Ace Age (viz níže) byla odložena o 1 rok a odměna za vytěžení bloku byla snížena z 5 na 3 ethery.  

Kompilace::
((("compiling","defined")))Převod kódu zapsaného v programovacím jazyce vyšší úrovně (např. Solidity) do jazyka nižší úrovně (např. bajtkód EVM).

Konsenzus::
((("consensus","defined")))Shoda na tom, které bloky jsou součástí bločenky. Pokud má mnoho uzlů (obvykle většina uzlů v síti) vzájemně stejné bloky ve svých lokálních bločenkách. Nesmí se zaměňovat s pravidly konsensu.

Pravidla konsensu::
((("consensus rules"))) Pravidla ověřování správnosti bloků, která dodržují úplné uzly, aby zůstaly ve shodě s ostatními uzly. Nesmí se zaměňovat s konsensem.

Constantinople rozštěpení::
((("Constantinople fork"))) Druhá část fáze Metropolis proběhla  v únoru 2019. Očekávalo se, že mezi jinými změnami bude zahrnut přechod na hybridní algoritmus dosahování konsensu využívající důkaz práci a důkaz podílem, nicméně toto očekávání nebylo naplněno.

Účet kontraktu::
((("contract accounts","defined")))((("smart contracts","defined"))) Účet obsahující bajtkód, který se provede vždy, když obdrží transakci z jiného účtu (EOA nebo kontraktu).

Transakce vytvářející kontrakt::
(((("contract creation transaction")))Speciální transakce, jejímž příjemce je „nulová adresa“, která se používá k vytvoření kontraktu a jeho zaznamenání do Ethereum bločenky (viz „nulová adresa“).

DAO::
((("DAO (Decentralized Autonomous Organization)","defined")))Decentralizovaná autonomní organizace. Společnost nebo jiná organizace, která funguje bez hierarchického řízení. Také může znamenat kontrakt s názvem „The DAO“, který byla spuštěn 30. dubna 2016, a který byl poté napaden v červnu 2016. Tato situace nakonec vedla k tvrdému rozštěpení (označovanému jako DAO) v bloku č. 1 192 000, které zneplatnilo transakce provedené v rámci kontraktu The DAO a způsobila rozdělení Etherea na dva konkurenční systémy: Ethereum Classic a Ethereum.

DApp::
((("DApps (decentralized applications)","defined"))) Decentralizovaná aplikace. Je to minimálně chytrý kontrakt a webové uživatelské rozhraní. Obecněji řečeno, DApp je webová aplikace, která je vytvořena na základě otevřených, decentralizovaných infrastrukturních služeb typu peer-to-peer. Mnoho DApps navíc zahrnuje decentralizované úložiště, komunikační protokol a platformu.

Vlastnická listina (deed)::
((("deed","defined"))) Norma pro nezaměnitelné tokeny (Non-fungible token; NFT) zavedená návrhem ERC721. Na rozdíl od tokenů ERC20, vlastnické listiny prokazují vlastnictví jednoho konkrétního objektu a nejsou vzájemně zaměnitelné, ačkoli  nejsou uznány jako právní dokumenty v žádné jurisdikci - alespoň ne v současnosti (viz také „NFT“).

Obtížnost těžby::
((("difficulty setting")))Síťové nastavení, které udává, jaké množství výpočtů je třeba k vykonání důkazu prací.

Digitální podpis::
((("digital signatures","defined")))Krátký řetězec dat, který uživatel vytváří pro daný dokument pomocí soukromého klíče, takže kdokoli s odpovídajícím veřejným klíčem, podpisem dokumentu a dokumentem může ověřit, že (1) dokument byl „podepsán“ vlastníkem konkrétního soukromého klíče, a že (2) dokument nebyl po podpisu změněn.

ECDSA::
((("Elliptic Curve Digital Signature Algorithm (ECDSA)","defined")))Algoritmus digitálního podpisu pomocí kryptografie eliptických křivek (Elliptic Curve Digital Signature Algorithm). Kryptografický algoritmus, který v Ethereu zajišťuje, že pokyn k provedení transakce smí vydat pouze vlastník účtu, ze kterého má být transakce odeslána.

EIP::
((("EIPs (Ethereum Improvement Proposals)","defined")))Návrh na vylepšení Etherea. Návrhový dokument poskytující informace komunitě Etherea, popisující navrhovanou novou vlastnost, proces nebo prostředí. Další informace naleznete na adrese https://github.com/ethereum/EIPs (viz také „ERC“).

ENS::
((("ENS (Ethereum Name Service)")))Ethereum jmenný systém (Ethereum Name Service). Další informace naleznete na adrese https://github.com/ethereum/ens/.

Entropie::
((("entropy","defined")))V kryptografii znamená nedostatek předvídatelnosti nebo úroveň náhodnosti. Při generování tajných informací, jako jsou soukromé klíče, se algoritmy obvykle spoléhají na zdroj vysoké entropie, aby zajistily, že jejich výstup je nepředvídatelný.

EOA::
((("EOA (Externally Owned Account)","defined")))externě vlastněný  účet (Externally Owned Account). Účet vytvořený lidskými uživateli sítě Ethereum nebo pro ně.

ERC::
((("ERC (Ethereum Request for Comments)", seealso="EIPs (Ethereum Improvement Proposals)")))Ethereum žádost o připomínky (Ethereum Request for Comments). Štítek přidělený některým EIP, které se pokoušejí definovat specifický standard použití Ethereem.

Ethash::
(((("Ethash")))Algoritmus důkazu prací pro Ethereum 1.0. Další informace naleznete na adrese https://github.com/ethereum/wiki/wiki/Ethash.

Ether::
((("Ether (cryptocurrency)")))Nativní kryptoměna používaná v ekosystému Ethereum, pomocí které se platí náklady na plyn při provádění chytrých kontraktů. Jeho symbolem je Ξ, velké řecké písmeno Ksí.

Událost::
((("events","defined")))Umožňuje použití logovacích zařízení EVM. DApps může poslouchat události a používat je ke spouštění zpětných volání JavaScriptu v uživatelském rozhraní. Další informace naleznete na adrese http://solidity.readthedocs.io/en/develop/contracts.html#events.

EVM::
((("EVM (Ethereum Virtual Machine)","defined")))Virtuální stroj Ethereum (Ethereum Virtual Machine). Virtuální stroj založený na zásobníkové architektuře, který vykonává bytecode. V Ethereu prováděcí model specifikuje, jak se mění stav systému, pokud je mu zadána posloupnost instrukcí bajtkódu a uspořádaná n-tice dat prostředí. Toto je specifikováno formálním modelem virtuálního stavového stroje.

EVM jazyk symbolických instrukcí::
((("EVM assembly language")))Lidsky čitelná forma EVM bajtkódu.

Nouzová funkce::
((("fallback function")))Výchozí (fallback) funkce, která je zavolána, pokud nejsou zadána data nebo není uvedeno jméno funkce.

Kohoutek (faucet)::
((("faucet, defined"))) Služba, která zdarma vydává finanční prostředky pro testovací účely. Takto získané ethery lze použít pouze na testovací síti.

Finney::
(((„finney“)))Název jedné z dílčích jednotek etheru. 1 finney = 10^15^ wei, 10^3^ finney = 1 ether.

Rozštěpení (fork)::
(((&quot;forks&quot;))) Změna protokolu způsobující vytvoření alternativního řetězce nebo dočasný nesoulad ve dvou potenciálních blokových cestách během těžby.


Frontier::
((("Frontier")))Počáteční testovací fáze vývoje Etherea, která trvala od července 2015 do března 2016.

Ganache::
((("Ganache","defined")))Osobní Ethereum bločenka, kterou můžete použít ke spouštění testů, provádění příkazů a prohlížení stavu systému, přičemž můžete sledovat probíhající operace.

Plyn (Gas)::
(((("gas","defined"))) Virtuální palivo používané v Ethereu k provádění chytrých kontraktů. EVM používá účetní mechanismus k měření spotřeby plynu a omezení spotřeby výpočetních zdrojů (viz „Turingovská úplnost“).

Limit plynu::
((("gas limit")))Maximální množství plynu, které transakce nebo blok může spotřebovat.

Gavin Wood::
((("Wood, Dr. Gavin")))Britský programátor, který je spoluzakladatelem a bývalým technickým ředitelem Etherea. V srpnu 2014 navrhl programovací jazyk Solidity, který slouží pro psaní chytrých kontraktů.

Základní (genesis) blok::
((("genesis block"))) První blok v bločence, který se používá k inicializaci konkrétní sítě a její kryptoměny.

Geth::
((("Geth (Go-Ethereum)","defined")))Go Ethereum. Jedna z nejvýznamnějších implementací protokolu Ethereum napsaná v programovacím jazyce Go.

Tvrdé rozštěpení (hard fork)::
((("hard forks"))) Trvalá neshoda v bločence; také známá jako tvrdě rozštěpující změna. Běžně se vyskytuje, když nedupgradované uzly nemohou ověřit bloky vytvořené upgradovanými uzly, které se řídí novějšími pravidly konsensu. Nesmí se zaměňovat s rozštěpením, měkkým rozštěpením, softwarovým rozštěpením nebo Git rozštěpením.

Haš::
((("hash, defined"))) Otisk pevné délky bez ohledu na velikost vstupu, který je vytvořený hašovací funkcí. 

HD peněženka::
((("hierarchical deterministic wallets (BIP-32/BIP-44)","defined"))) Peněženka vytvářející a uchovávající klíče hierarchicky deterministickým (HD) způsobem dle standardu BIP-32.

Semínko HD peněženky::
((("HD wallet seed")))((("seeds", seealso="root seeds")))Hodnota použitá k vygenerování hlavního soukromého klíče a kódu hlavního řetězce pro HD peněženku. Semínko peněženky může být reprezentováno mnemotechnickými slovy, což lidem usnadňuje kopírování, zálohování a obnovu soukromých klíčů.

Homestead::
(((("Homestead")))Druhá vývojová fáze Etherea, zahájená v březnu 2016 v bloku č. 1 150 000.

ICAP::
((("ICAP (Inter-exchange Client Address Protocol)")))((("Inter-exchange Client Address Protocol (ICAP)")))Výměnný protokol klientské adresy (Inter-exchange Client Address Protocol). Kódování Ethereum adresy , které je částečně kompatibilní s kódováním IBAN (International Bank Account Number) a nabízí univerzální, kontrolní součet a interoperabilní kódování pro adresy Ethereum. Adresy ICAP používají nový pseudo kód země IBAN: XE, zkratka pro „eXtended Ethereum“, jak se používá v nestátních měnách (např. XBT, XRP, XCP).

Ice Age::
((("Ice Age")))Tvrdé rozštěpení Etherea v bloku č. 200 000, ve kterém byl představen exponenciální nárůst obtížnosti (také známý jako obtížná bomba), motivující k přechodu k důkazu podílem.

IDE::
((("IDE (Integrated Development Environment)")))((("Integrated Development Environment (IDE)")))Integrované vývojové prostředí. Uživatelské rozhraní, které obvykle kombinuje editor kódu, kompilátor, běhové prostředí a nástroje pro ladění.

Problém nezměnitelnosti nasazeného kódu::
((("immutable deployed code problem")))Once a contract's (or library's)Jakmile je kód kontraktu (nebo knihovny) nasazen, stane se nezměnitelným. Standardní postupy vývoje softwaru se spoléhají na to, že budou moci opravit možné chyby a přidat nové funkce, což představuje výzvu pro vývoj chytrých kontraktů.

Vnitřní transakce (také „zpráva“)::
((("internal transaction (message)")))Transakce zaslaná chytrým kontraktem ve prospěch jiného chytrého kontrakt nebo EOA.

IPFS::
((("IPFS (InterPlanetary File System)")))Meziplanetární souborový systém (InterPlanetary File System). Protokol, síť a projekt s otevřeným zdrojovým kódem navržený k vytvoření obsahově adresovatelných, peer-to-peer metodou uložených a sdílených hypermedií v distribuovaném souborovém systému.

KDF::
((("key derivation function (KDF)")))Funkce odvození klíče. Také se nazývá „algoritmus protahování hesla“. Používá se ve formátech pro ukládání klíčů k ochraně před útoky brutální sílou, slovníkem a duhovou tabulkou. Přístupové heslo je chráněno opakovanou aplikací hašovací funkce.  

Keccak-256::
((("Keccak-256 hash function")))Kryptografická hašovací funkce používaná v Ethereu. Keccak-256 byl standardizován jako SHA-3.

Soubor s uloženým klíčem::
((("keystore file")))Soubor kódovaný JSON, který obsahuje jeden (náhodně vygenerovaný) soukromý klíč, šifrovaný heslem pro zvýšení bezpečnosti.

LevelDB::
((("LevelDB"))) Otevřený software úložiště dvojic klíč - hodnota implementovaný jako odlehčená, jednoúčelová knihovna s vazbami na mnoho platforem. Má otevřený zdrojový kód.

Knihovna::
((("library contract")))Zvláštní typ kontraktu, který nemá žádné platby přijímající funkce, nouzovou funkci ani datové úložiště. Proto nemůže přijímat ani uchovávat ether ani ukládat data. Knihovna slouží jako dříve nasazený kód, který mohou ostatní kontrakty volat. Výpočet probíhá v režimu pouze pro čtení. 

Odlehčený klient::
((("light/lightweight client")))Ethereum klient, který neukládá lokální kopii bločenky ani neověřuje bloky a transakce. Nabízí funkce peněženky a umí vytvářet a odesílat transakce.

Merkle Patricia strom::
((("Merkle Patricia Tree"))) Datová struktura používaná v Ethereu k efektivnímu ukládání dvojic klíč - hodnota.

Zpráva::
((("message, defined")))Interní transakce, která není nikdy ukládána do bločenky a je odesílána pouze v rámci EVM.

Volání zprávy::
((("message call")))Akt předávání zprávy z jednoho účtu na druhý. Pokud je cílový účet spojen s kódem EVM, bude EVM spuštěn se stavem tohoto objektu a zpráva byla
zpracována.

METoken::
((("METoken (Mastering Ethereum Token)","defined")))Mastering Ethereum Token. ERC20 token použitý v této knize pro demonstrační účely.

Metropolis::
((("Metropolis")))Třetí vývojová fáze Etherea, zahájená v říjnu 2017.


Těžař::
(("miners")))Síťový uzel, který opakovaným výpočtem haše bloku se změněnou noncí najde platný důkaz prací pro nový pass:[<span class="keep-together">blok</span>].

Mist::
((("Mist (browser-based wallet)")))((("wallets","Mist")))První prohlížeč s podporou Etherea, vytvořený Nadací Ethereum. Obsahuje prohlížečovou peněženku, která byla první implementací standardu tokenů ERC20 (Fabian Vogelsteller, autor ERC20, byl také hlavním vývojářem Mistu). Mist byla také první peněženka, která zavedla kontrolní součet camelCase (EIP-55; viz <<EIP55>>). Mist provozuje úplný uzel a nabízí úplný prohlížeč DApp s podporou úložiště Swarm a ENS adres.

Síť::
((("networks (Ethereum)","defined")))((("networks (Ethereum)","MetaMask and")))Pokud hovoříme o síti Ethereum, síť typu peer-to-peer, která propaguje transakce a bloky každému Ethereum uzlu (účastník sítě).

NFT::
((("nonfungible tokens (NFTs)","defined")))Nezaměnitelný token (také známý jako „vlastnická listina“). Toto je standard tokenů zavedený návrhem ERC721. NFT lze sledovat a obchodovat, ale každý token je jedinečný a odlišný; nejsou zaměnitelné jako tokeny ERC20. NFT mohou představovat vlastnictví digitálních nebo fyzických aktiv.

Uzel::
((("node","defined")))Softwarový klient, který je zapojen do sítě.

Nonce::
((("nonces","defined")))V kryptografii je to hodnota, kterou lze použít pouze jednou. V Ethereum se používají dva typy noncí: nonce účtu je čítač transakcí na každém účtu, který se používá k zabránění útoku opakováním transakce; nonce důkazu prací je náhodná hodnota v bloku, která byly použita k dosažení důkazu prací.

Potomek předka (Ommer)::
(((„ommer, definované“))) Blok, který je potomkem předka, ale sám není předkem. Když těžař najde platný blok, jiný těžař možná zveřejnil konkurenční blok, který se přidá na vrchol bločenky. Na rozdíl od Bitcoinu mohou být osiřelé bloky v Ethereu zahrnuty novějšími bloky jako potomci předka a obdrží částečnou odměnu za vytvoření bloku. V anglickém originálu se používá termín „ommer“, který je preferovaným genderově neutrálním termínem pro sourozence rodičovského bloku, ale někdy je užíván výraz „strýc“.

Parity::
(((„Parita“, „definovaná“))) Jedna z nejvýznamnějších interoperabilních implementací Ethereum klienta.

Tajný klíč (secret key)::
Viz „soukromý klíč“.

Důkaz podílem (PoS)::
((("proof of stake (PoS)","defined")))Metoda, pomocí které protokol kryptoměnové bločenky distribuovaně dosahuje konsensu o svém stavu. PoS žádá uživatele, aby prokázali vlastnictví určitého množství kryptoměny (jejich „podíl“ v síti), aby se mohli podílet na ověřování transakcí.

Důkaz prací (PoW)::
((("proof of work (PoW)","defined")))Poslounost dat (důkaz), k jejíž nalezení je potřeba provést významný výpočet. V Ethereu musí těžaři najít numerické řešení algoritmu Ethash, které splňuje cíl obtížnosti v celé síti.

Veřejný klíč::
((("public keys","defined")))Číslo odvozené jednosměrnou funkcí ze soukromého klíče, které může být veřejně sdíleno a kdokoli ho smí použít k ověření digitálního podpisu vytvořeného odpovídajícím soukromým klíčem.

Účtenka::
((("receipt, defined")))Data vrácená Ethereum klientem, která představují výsledek konkrétní transakce, včetně haše transakce, čísla jejího bloku, množství použitého plynu, a v případě nasazení chytrého kontraktu, adresa kontraktu.

Útok opětovného volání (Re-entrancy)::
((("reentrancy attacks","defined")))Útok, při kterém kontrakt útočníka volá kontrakt oběti takovým způsobem, že během vykonávání kontraktu oběti je opakovaně rekurzivně volán kontrakt útočníka. To může například vést k odcizení finančních prostředků kvůli přeskočení částí kontraktu oběti, které aktualizují zůstatky nebo počítají částky výběru.

Odměna::
(((„odměna, definováno“))) Množství etheru obsažené v každém novém bloku jako odměna sítě pro těžaře, který našel řešení důkazu prací.

RLP::
((("Recursive Length Prefix (RLP)")))((("RLP (Recursive Length Prefix)")))Rekurzivní prefix délky (Recursive Length Prefix). Kódovací standard navržený vývojáři Ethereum pro kódování a serializaci objektů (datových struktur) libovolné složitosti a délky.

Satoshi Nakamoto::
((("Satoshi Nakamoto")))Jméno, které použila osoba nebo skupina osob, kteří navrhli Bitcoin, vytvořili jeho původní referenční implementaci a byli prvními, kteří vyřešili problém dvojitého utrácení digitální měny. Jejich skutečná identita zůstává neznámá.

Soukromý klíč (private key)::
((("private keys","defined")))((("secret keys", seealso="private keys")))Tajné číslo, které umožňuje uživatelům Etherea prokázat vlastnictví účtu nebo kontraktu tím, že vytvoří digitální podpis (viz „veřejný klíč“, „adresa“, „ECDSA“).

Serenity::
((("Serenity")))Čtvrtá a poslední fáze vývoje Etherea. Serenity dosud nemá naplánované datum nasazení.

Serpent::
((("Serpent")))Procedurální (imperativní) programovací jazyk určený k tvorbě chytrých kontraktů. Jeho syntax je podobná Pythonu.

SHA::
((("SHA (Secure Hash Algorithm)"))) Bezpečný hašovací algoritmus (Secure Hash Algorithm). Rodina kryptografických hašovacích funkcí publikovaných Národním institutem pro standardy a technologie (NIST).

Jednoinstanční (singleton)::
((("singleton")))Termín z oblasti programování, který popisuje objekt, který může existovat pouze v jedné instanci.

Chytrý kontrakt::
((("smart contracts","defined")))Program, který se provádí na výpočetní infrastruktuře Etherea.

Solidity::
((("Solidity","defined")))Procedurální (imperativní) programovací jazyk se syntaxí, která je podobná jazykům JavaScript, C ++ nebo Java. Nejoblíbenější a nejčastěji používaný jazyk pro Ethereum chytré kontrakty. Vytvořil ho Dr. Gavin Wood (spoluautor této knihy).

Solidity vkládaný assembler::
((("inline assembly","defined")))((("Solidity inline assembly"))) jazyk symbolických instrukcí EVM v Solidity programu. Solidity podporuje vkládaný assembler, což usnadňuje psaní určitých operací.

Spurious Dragon::
(((„Zvědavý drak“))) Tvrdé rozštěpení bločenky Etherea, ke kterému došlo v bloku č. 2 675 000, aby bylo možné omezit způsoby útoku odepřením služby a vyčistit stav (viz také „Tangerine Whistle“). Mechanismus ochrany proti opětovnému útoku.

Swarm::
((("Swarm","defined")))Decentralizovaná úložná síť (P2P), která se používá společně s Web3 a Whisper k vytváření DApps.

Szabo::
((("szabo, defined"))) Název jedné z dílčích jednotek etheru. 1 szabo = 10^12^ wei, 10^6^ szabo = 1 ether.

Tangerine Whistle::
((("Tangerine Whistle")))Tvrdé rozštěpení Ethereum bločenky, ke kterému došlo v bloku č. 2 463 000, byl změněn výpočet plynu pro určité operace náročné na práci s datovým úložištěm a byla vyčištěna data z datového úložiště stavu, která byla vytvořena při útoku odepření služby, který využil nízké náklady na plyn při těchto operacích.

Testnet::
((("testnet","defined")))Zkratka pro "testovací síť." Síť používaná k simulaci chování hlavní Ethereum sítě.

Transakce::
((("transactions","defined")))Data odevzdaná do Ethereum bločenky, podepsaná účtem odesilatele, směřující na určenou adresu. Transakce obsahuje metadata, například limit plynu pro tuto transakci.

Truffle::
((("Truffle","defined")))Jeden z nejčastěji používaných vývojových prostředí pro Ethereum.

Turingovská úplnost::
((("Turing completeness","defined")))Koncept pojmenovaný po anglickém matematiku a počítačovém vědci Alanovi Turingovi: systém pravidel pro manipulaci s daty (jako je počítačová instrukční sada, programovací jazyk nebo celulární automat) se označuje, že je „Turingovsky úplný“ nebo „výpočetně úplný“, pokud ho lze použít k simulaci jakéhokoli Turingova stroje.

Vitalik Buterin::
((("Buterin, Vitalik")))Rusko-kanadský programátor a spisovatel primárně známý jako spoluzakladatel Etherea a časopisu Bitcoin Magazine.

Vyper::
((("Vyper","defined"))) Vysokoúrovňový programovací jazyk  podobný jazyku Serpent, se syntaxí podobnou jazyku Pythonu. Jeho cílem je přiblížit se čistě funkcionálnímu jazyku. Vytvořil ho Vitalik Buterin.

Peněženka::
((("wallets","defined")))Software, který drží soukromé klíče. Slouží k přístupu a kontrole Ethereum účtů a interakci s chytrými kontrakty. Klíče pro zvýšení bezpečnosti nemusí být uloženy v peněžence a místo toho je možné je získat z offline úložiště (např. z paměťové karty nebo papíru). Navzdory jejich jménu peněženky nikdy neukládají skutečné mince nebo tokeny.

Web3::
((("web3", seealso="DApps")))Třetí verze webu. Web3, který poprvé navrhl Dr. Gavin Wood, představuje novou vizi a zaměření na webové aplikace: od centrálně vlastněných a spravovaných aplikací po aplikace postavené na decentralizovaných protokolech.

Wei::
((("wei, defined")))Nejmenší  z dílčích jednotek etheru. 10^18^ wei = 1 ether.

Whisper::
((("Whisper")))Decentralizovaná (P2P) služba zasílání zpráv. Používá se spolu s Web3 a Swarm k vytváření DApps.

Nulová adresa::
((("zero address","defined")))Speciální Ethereum  adresa složená výhradně z nul, která je určena jako cílová adresa transakce vytvářející kontrakt.