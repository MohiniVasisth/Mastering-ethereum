[[intro_chapter]]
== Základy Etherea

((("Ethereum (generally)","basics", id="ix_02intro-asciidoc0", range="startofrange")))V této kapitole začneme zkoumat Ethereum, naučíme se, jak používat peněženky, jak vytvářet transakce, a také jak provozovat jednoduchý chytrý kontrakt.

[[ether_units]]
=== Měnové jednotky Etherea

((("currency units")))((("Ethereum (generally)","currency units")))Měnová jednotka Etherea se nazývá _ether_, označená také jako „ETH“ nebo se symboly Ξ (z řeckého písmene Ksí, které vypadá jako stylizované velké E) nebo, méně často, ♦: například 1 ether, nebo 1 ETH, nebo Ξ1, nebo ♦ 1.

[TIP]
====
Použijte znak Unicode +U+039E+ pro Ξ a +U+2666+ pro ♦.
====

Ether jde dělit na menší jednotky, až na nejmenší možnou jednotku, která se jmenuje _wei_. Jeden ether je 1 trilion wei (1 * 10 ^ 18 ^ nebo 1 000 000 000 000 000 000). Občas lidé používají pojem „Ethereum“ i jako název jeho měnové jednotky, ale toto je běžná začátečnická chyba. Ethereum je systém, ether je měna.

Množství etheru je v Ethereu vždy interně reprezentována jako celé číslo bez znaménka vyjádřené v jednotkách wei. Když provedete transakci 1 etheru, transakce to převede na hodnotu 100000000000000000000 wei.

Různá označení dílčích měnových jednotek Etherea mají jednak vědecké jméno odvozené pomocí Mezinárodního systému jednotek (_SI_), tak i hovorové jméno, které vzdává hold mnoha velkým myslitelům v oblasti výpočetní techniky a kryptografie.

<<ether_denominations>> ukazuje různé jednotky, jejich hovorové (běžné) názvy a jejich SI názvy. V souladu s interní reprezentací hodnoty tabulka zobrazuje všechny nominální hodnoty ve wei (první řádek),  etherem je uvedeno na 7. řádku jako 10^18^ wei.

[[ether_denominations]]
.Dílčí měnové jednotky Etherea a jejich názvy
[options="header"]
|===
| Hodnota (ve wei) | Exponent | Běžný název | Označení dle SI
| 1 | 1 | wei | Wei
| 1,000 | 10^3^ | Babbage | Kilowei nebo femtoether
| 1,000,000 | 10^6^ | Lovelace | Megawei nebo picoether
| 1,000,000,000 | 10^9^ | Shannon | Gigawei nebo nanoether
| 1,000,000,000,000 | 10^12^ | Szabo | Microether nebo micro
| 1,000,000,000,000,000 | 10^15^ | Finney | Milliether nebo milli
| _1,000,000,000,000,000,000_ | _10^18^_ | _Ether_ | _Ether_
| 1,000,000,000,000,000,000,000 | 10^21^ | Grand | Kiloether
| 1,000,000,000,000,000,000,000,000 | 10^24^ | | Megaether
|===

[[choosing_eth_wallet]]
=== Výběr Ethereum peněženky

((("Ethereum (generally)","wallet choices")))((("wallets","choosing")))((("wallets","defined")))Pojem „peněženka“ může znamenat mnoho věcí, i když všechny jsou ve vzájemném vztahu při každodenním používání se scvrkávají na téměř stejnou věc. Termín „peněženka“ budeme používat pro softwarovou aplikaci, která vám pomůže spravovat váš Ethereum účet. V krátkosti, Ethereum peněženka je vaší bránou do systému Ethereum. Drží vaše klíče a může vytvářet a odesílat transakce vaším jménem. Výběr Ethereum peněženky může být obtížný, protože existuje mnoho různých možností s různými funkcemi a ovládáním. Některé jsou vhodnější pro začátečníky a jiné jsou vhodné pro odborníky. Samotná platforma Ethereum se stále zdokonaluje a „nejlepší“ peněženky se často přizpůsobují změnám, které přicházejí s upgradem platformy.

Ale nebojte se! Pokud si vyberete peněženku a nelíbí se vám, jak funguje - nebo pokud se vám líbí zpočátku, ale později chcete vyzkoušet něco jiného - můžete snadno měnit peněženky. Musíte pouze provést transakci, která odešle vaše peníze ze staré peněženky do nové peněženky, nebo exportovat své soukromé klíče ze staré peněženky a importovat je do nové peněženky.

Jako příklady v knize jsme vybrali tři různé typy peněženek: mobilní peněženku, peněženku pro stolní počítače a webovou peněženku. Vybrali jsme tyto tři peněženky, protože představují širokou škálu složitosti a funkcí. Výběr těchto peněženek však není potvrzením jejich kvality nebo bezpečnosti. Jsou prostě dobrým výchozím místem pro demonstrace a testování.

((("private keys","wallets and")))Pamatujte, že aby aplikace peněženky fungovala, musí mít přístup k vašim soukromým klíčům, takže je nezbytné, abyste stahovali a používali pouze peněženkové  aplikace ze zdrojů, kterým důvěřujete. Naštěstí obecně platí, že čím populárnější je peněženková aplikace, tím důvěryhodnější bude. Je však dobré se vyhnout „vložení všech vajec do jednoho košíku“ a rozložit své Ethereum účty na několik peněženek.

Následuje přehled několik dobrých peněženek pro začátečníky:

MetaMask:: ((("MetaMask")))MetaMask je rozšíření prohlížeče, které běží v vašem prohlížeči (Chrome, Firefox, Opera nebo Brave). Je snadno použitelný a vhodný pro testování, protože je schopen se připojit k celé řadě Ethereum uzlů a testovacích bločenek. MetaMask je webová peněženka.

Jaxx:: ((("Jaxx")))((("wallets","Jaxx")))Jaxx je multiplatformní peněženka podporující mnoho měn, která běží na různých operačních systémech, včetně Android, iOS, Windows, macOS, a Linux. Je oblíben novými uživateli, protože je navržen pro jednoduché a snadné použití. Podle toho kde ho nainstalujete, může být Jaxx mobilní peněženkou nebo peněženkou pro stolní počítače. 

MyEtherWallet (MEW):: ((("Ethereum Classic (ETC)","Emerald Wallet and")))((("MyEtherWallet (MEW)")))((("wallets","Emerald Wallet")))((("wallets","MyEtherWallet")))MyEtherWallet je webová peněženka, která běží v libovolném prohlížeči. Má mnoho sofistikovaných funkcí, které prozkoumáme v mnoha našich příkladech. MyEtherWallet je webová peněženka.

Emerald Wallet:: ((("Emerald Wallet")))Emerald Wallet je navržen pro práci s bločenkou Etherea Classic, ale je kompatibilní s jinými bločenkami založenými na Ethereu. Je to peněženka s otevřeným zdrojovým kódem, určená pro stolní počítače,  a funguje pod Windows, macOS a Linux. Emerald Wallet může provozovat úplný uzel nebo se připojit k veřejnému vzdálenému uzlu a pracovat ve „odlehčeném“ režimu. Má také doprovodný nástroj pro provádění všech operací z příkazového řádku.

Začneme instalací MetaMask na stolní počítač - nejprve si ale krátce vysvětlíme její ovládání a správu klíčů.

[[control_responsibility]]
=== Kontrola a odpovědnost

((("Ethereum (generally)","control and responsibility", id="ix_02intro-asciidoc1", range="startofrange")))Otevřené bločenky jako Ethereum jsou důležité, protože fungují jako _decentralizovaný_ systém. To znamená spoustu věcí, ale jedním zásadním aspektem je to, že každý uživatel Etherea může - a měl by - kontrolovat své soukromé klíče, což jsou věci, které řídí přístup k finančním prostředkům a chytrým kontraktům. Někdy nazýváme kombinaci přístupu k finančním prostředkům a chytrým kontraktům „účet“ nebo „peněženka“. Tyto výrazy mohou být ve docela složitou funkcionalitu, takže se na ně podrobněji podíváme později. Základní princip je však jednoduchý, jeden soukromý klíč se rovná jednomu účtu. Někteří uživatelé se rozhodnou vzdát kontroly nad svými soukromými klíči pomocí úschovny třetí strany, jako je například online burza. V této knize vás naučíme, jak ovládat a spravovat vlastní soukromé klíče.

S kontrolou přichází velká odpovědnost. Pokud ztratíte soukromé klíče, ztratíte přístup ke svým prostředkům a kontraktům. Nikdo vám nemůže pomoci znovu získat přístup - vaše prostředky budou navždy zamčené. Zde je několik tipů, které vám pomohou spravovat tuto odpovědnost:

* Neimprovizujte v zabezpečení. Používejte osvědčené standardní přístupy.

* Čím důležitější je účet (např. čím vyšší je hodnota kontrolovaných prostředků nebo čím významnější jsou kontrolované chytré kontrakty), tím vyšší by měla být přijatá bezpečnostní opatření.

* Nejvyšší míru zabezpečení dosahuje zařízení, které je fyzicky odděleno od sítě, ale tato úroveň není vyžadována pro každý účet.

* Nikdy neukládejte svůj soukromý klíč v nešifrované podobě, zejména digitálně. Naštěstí většina dnešních uživatelských rozhraní vám ani neumožní vidět nezašifrovaný soukromý klíč.

* ((("private keys","wallets and")))Soukromé klíče lze uložit v zašifrované podobě jako digitální soubor „úložiště klíčů“. Protože jsou šifrováni, potřebují k jejich odemčení heslo. Až budete vyzváni, abyste si vybrali heslo, učiňte jej silným (tj. dlouhým a náhodným), zálohujte jej a nesdílejte. Pokud nemáte správce hesel, zapište si jej a uložte na bezpečném a tajném místě. Pro přístup k účtu potřebujete soubor úložiště klíčů i heslo.

* Neukládejte žádná hesla v digitálních dokumentech, digitálních fotografiích, screenshotech, online diskových jednotkách, šifrovaných PDF atd. Znova, neimprovizujte v oblasti zabezpečení. Použijte správce hesel nebo pero a papír.

* Když se zobrazí výzva k zálohování klíče jako mnemotechnické posloupnosti slov, pomocí pera a papíru vytvořte fyzickou zálohu. Nenechávejte tento úkol „na později“; zapomenete. Tyto zálohy lze použít k opětovnému vytvoření vašeho soukromého klíče v případě, že ztratíte všechna data uložená ve vašem systému, nebo pokud zapomenete nebo ztratíte své heslo. Útočníci je však mohou také použít k získání vašich soukromých klíčů, takže je nikdy neukládejte digitálně a fyzickou kopii uložte bezpečně v uzamčené zásuvce nebo v bezpečí.

* Před převedením jakýchkoli velkých částek (zejména na nové adresy) nejprve proveďte malou testovací transakci (např. s hodnotou menší než jeden dolar) a počkejte na potvrzení přijetí.

* Při vytváření nového účtu začněte odesláním pouze malé testovací transakce na novou adresu. Jakmile obdržíte testovací transakci, zkuste odeslat znovu z tohoto účtu. Existuje spousta důvodů, proč se vytvoření účtu může pokazit, a pokud se to pokazilo, je lepší to zjistit s malou ztrátou. Pokud testy fungují, vše je v pořádku.

* Veřejní průzkumníci bloků jsou snadným způsobem, jak nezávisle zjistit, zda byla transakce přijata sítí. Toto pohodlí má však negativní dopad na vaše soukromí, protože své adresy odhalíte těmto průzkumníkům bloků, kteří vás mohou následně sledovat.

* Nikdy neposílejte peníze na žádnou z adres uvedených v této knize. Soukromé klíče jsou uvedeny v této knize a někdo si tyto peníze okamžitě vezme.

Nyní, když jsme se zabývali některými základními doporučenými postupy pro správu klíčů a zabezpečení, pojďme začít pracovat sí MetaMask! (((range="endofrange", startref="ix_02intro-asciidoc1")))

[[installing_MetaMask]]
=== Začínáme s MetaMaskem

((("Ethereum (generally)","MetaMask basics", id="ix_02intro-asciidoc2", range="startofrange")))((("MetaMask","basics", id="ix_02intro-asciidoc3", range="startofrange")))Otevřte prohlížeč Google Chrome a přejděte na https://chrome.google.com/webstore/category/extensions[].

Vyhledejte „MetaMask“ a klikněte na logo lišky. Měli byste vidět něco jako výsledek zobrazený v <<metamask_download>>.

[[metamask_download]]
.Detail stránky rozšíření MetaMask pro Chrome
image::images/metamask_download.png["MetaMask Detail Page"]

Je důležité ověřit, že stahujete skutečné rozšíření MetaMask, protože někdy jsou lidé schopni propašovat škodlivá rozšíření skrz Google filtry. Skutečný MetaMask:

* Na řádce adresy zobrazuje ID +nkbihfbeogaeaoehlefnkodbefgpgknn+
* Je nabízen webem https://metamask.io
* Má více než 1 500 recenzí
* Má více než 1 000 000 uživatelů

Až se ujistíte, že se díváte na správné rozšíření, nainstalujte jej kliknutím na tlačítko „Add to Chrome“.

[[using_MetaMask]]
==== Vytvoření peněženky

((("MetaMask","wallet setup with", id="ix_02intro-asciidoc4", range="startofrange")))Jakmile je MetaMask nainstalován, měla by se na panelu nástrojů prohlížeče zobrazit nová ikona (hlava lišky) . Začněte kliknutím na ní. Budete vyzváni k přijetí smluvních podmínek a poté k vytvoření nové Ethereum peněženky zadáním hesla (viz <<metamask_password>>).

[[metamask_password]]
.Stránka s heslem rozšíření MetaMask pro Chrome
image::images/metamask_password.png["MetaMask stránka s heslem"]

[TIP]
====
Heslo ovládá přístup k MetaMasku, takže jej nemůže použít kdokoli s přístupem do vašeho prohlížeče.
====

((("mnemonic code words","MetaMask and", id="ix_02intro-asciidoc5", range="startofrange")))Jakmile nastavíte heslo, MetaMask vygeneruje peněženku a zobrazí vám _mnemotechnickou zálohu_ sestávající z 12 anglických slov (viz  <<metamask_mnemonic> >). Tato slova lze použít v jakékoli kompatibilní peněžence k obnovení přístupu k vašim finančním prostředkům, pokud by se něco stalo MetaMaskem nebo s  vaším počítačem. Pro toto obnovení nepotřebujete heslo; stačí 12 slov.

[TIP]
====
Zálohujte si 12 mnemotechnických slov na papír, dvakrát. Uložte obě papírové zálohy na dvou samostatných bezpečných místech, například v ohnivzdorném trezoru, v uzamčené zásuvce nebo v bezpečnostní schránce. Zacházejte s papírovými zálohami jako s penězi stejné hodnoty, jakou ukládáte do peněženky Ethereum. Každý, kdo má přístup k libovolné z těchto kopií  12 slov, může získat přístup a ukrást vaše peníze.
====

[[metamask_mnemonic]]
.Mnemonická záloha vaší peněženky, vytvořená MetaMaskem
image::images/metamask_mnemonic.png["MetaMask Mnemonic Page"]

Jakmile potvrdíte, že jste mnemotechnickou zálohu bezpečně uložili, uvidíte podrobnosti vašeho účtu Ethereum, jak je uvedeno v <<metamask_account>>.(((range="endofrange", startref="ix_02intro-asciidoc5")))

[[metamask_account]]
.Váš účet Ethereum v MetaMasku
image::images/metamask_account.png["MetaMask Account Page"]

Na stránce vašeho účtu se zobrazuje název vašeho účtu (ve výchozím nastavení „Účet 1“), adresa Ethereum (v příkladu +0x9E713...+) a barevná ikona, která vám pomůže vizuálně odlišit tento účet od ostatních účtů. V horní části stránky účtu můžete vidět, na které Ethereum síti  aktuálně pracujete (v příkladu „Hlavní síť“).

Gratulujeme! Nastavili jste svojí první peněženku Ethereum. (((range="endofrange", startref="ix_02intro-asciidoc4")))

[[switching_networks]]
==== Přepínání sítí

((("MetaMask","network choices")))Jak můžete vidět na stránce účtu MetaMask, můžete si vybrat mezi několika Ethereum sítěmi. Ve výchozím nastavení se MetaMask pokusí připojit k hlavní síti. Dalšími možnostmi jsou veřejné testovací sítě, libovolný uzel Ethereum podle vašeho výběru nebo uzly provozující soukromé bločenky ve vašem počítači (localhost):

Hlavní Ethereum síť :: Hlavní veřejná Ethereum bločenka. Skutečná ETH, skutečná hodnota a skutečné důsledky.

Ropsten testovací síť:: Veřejná testovací bločenka Etherea. ETH v této síti nemá žádnou hodnotu.

Kovan testovací síť:: Veřejná testovací bločenka Etherea a síť používající protokol dosahovaní konsensu typu důkaz autoritou (federované podpisy) zvaný Aura. ETH v této síti nemá žádnou hodnotu. Testovací síť Kovan je podporována pouze společností Parity. Ostatní Ethereum klienti používají protokol dosahovaní konsensu Clique, který byl navržen později, a který je také druhem důkazu autoritou.

Rinkeby testovací síť:: Veřejná testovací Ethereum bločenka a síť, používající Clique konsensuální protokol typu důkaz autoritou (federované podepisování). ETH v této síti nemá žádnou hodnotu.

Localhost 8545:: Připojuje se k uzlu spuštěnému na stejném počítači jako prohlížeč. Uzel může být součástí libovolné veřejné bločenky (hlavní nebo testovací) nebo soukromé testovací sítě.

Vlastní RPC:: Umožňuje vám připojit MetaMask k libovolnému uzlu pomocí rozhraní RPC (vzdálené volání funkcí) kompatibilního s Geth. Uzel může být součástí libovolné nebo veřejné bločenky.

[NOTE]
====
Vaše peněženka MetaMask používá stejný soukromý klíč a Ethereum adresu ve všech sítích, ke kterým se připojuje. Váš zůstatek Ethereum adres v každé Ethereum síti se však bude lišit. Vaše klíče mohou například ovládat ether a uzavírat kontrakty na Ropsten, ale ne na hlavní síti.
====

[[getting_test_eth]]
==== Získání testovacího éteru

((("ether (generally)","testnet")))((("MetaMask","and testnet ether")))((("test ether","obtaining")))((("testnet","ether for")))((("wallets","testnet ether and")))Vaším prvním úkolem je získat nějaké finanční prostředky do vaší peněženky. Nebudete to dělat v hlavní síti, protože skutečný ether stojí peníze a manipulace s ním vyžaduje trochu více zkušeností. Prozatím naplníme peněženku pomocí testovacího etheru.

((("Ropsten Test Network")))Přepněte MetaMask na _Ropsten Test Network_. Klikněte na „Deposit“ a poté na „Ropsten Test Faucet“. MetaMask otevře novou webovou stránku, jak ukazuje <<metamask_ropsten_faucet>>.

[[metamask_ropsten_faucet]]
.MetaMask Ropsten testovací kohoutek
image::images/metamask_ropsten_faucet.png["MetaMask Ropsten testovací kohoutek"]

Možná si všimnete, že webová stránka již obsahuje Ethereum adresu  vaší peněženky MetaMask. MetaMask integruje webové stránky podporující Ethereum s vaší peněženkou MetaMask a může „vidět“ Ethereum adresy na webové stránce, což vám například umožňuje poslat platbu do internetového obchodu zobrazujícího adresu Ethereum. MetaMask může také vyplnit webovou stránku svou vlastní adresou peněženky jako adresou příjemce, pokud to webová stránka vyžaduje. Na této stránce aplikace kohoutek žádá MetaMask o adresu peněženky, kam má být odeslán testovací ether.

Klikněte na zelené tlačítko „request 1 ether from faucet“. Ve spodní části stránky se zobrazí ID transakce. Aplikace faucet vytvořila transakci - platba vám. ID transakce vypadá takto:

[[faucet_tx_id]]
----
0x7c7ad5aaea6474adccf6f5c5d6abed11b70a350fbc6f9590109e099568090c57
----

Za pár vteřin bude těžaři Ropstenu vytěžena tato nová transakce a vaše peněženka MetaMask ukáže zůstatek 1 ETH. Klikněte na ID transakce a váš prohlížeč vás přenese na _průzkumníka bloků_, což je web, který vám umožní vizualizovat a prozkoumat bloky, adresy a transakce. MetaMask používá https://etherscan.io/[Etherscan block explorer], jeden z nejpopulárnějších Ethereum průzkumníků bloků. Transakce obsahující platbu z kohoutku v testovací síti Ropsten je uvedena v <<ropsten_block_explorer>>.

[[ropsten_block_explorer]]
.Ethercan prohlížeč Ropsten bloků
image::images/ropsten_block_explorer.png["Ethercan prohlížeč Ropsten bloků"]

Transakce byla zaznamenána do Ropsten bločenkya může ji kdykoli zobrazit kdokoli, jednoduše vyhledáním ID transakce nebo http://bit.ly/2Q860Wk[návštěvou odkazu].

Zkuste tento odkaz navštívit nebo zadat haš transakce na web _ropsten.etherscan.io_ a podívat se na výsledek své práce.

[[sending_eth_MetaMask]]
==== Odesíláme ether z MetaMasku

((("MetaMask","sending ether from", id="ix_02intro-asciidoc6", range="startofrange")))((("test ether","sending", id="ix_02intro-asciidoc7", range="startofrange")))Jakmile obdržíte první testovací ether z Ropsten testovacího kohoutku, můžete experimentovat s odesíláním etheru tím, že se pokusíte poslat nějaký zpět do kohoutku. Jak můžete vidět na stránce Ropsten testovací kohoutek, existuje možnost „darovat“ 1 ETH do kohoutku. Tato možnost je k dispozici, takže jakmile budete hotovi s testováním, můžete vrátit zbytek testovacího éteru, aby ho mohl použít někdo jiný. I když testovací ether nemá žádnou hodnotu, někteří lidé to shromažďují,  což dělá používání testovací sítě pro všechny ostatní obtížnějším. Hromadit testovací ether není hezké!

Naštěstí, my ethery hromadit nebudeme. Kliknutím na oranžové tlačítko „1 ether“ řekněte MetaMasku, aby vytvořil transakci, která vrátí 1 ether zpátky do kohoutku. MetaMask připraví transakci a objeví se okno s potvrzením, jak je uvedeno v <<send_to_faucet>>.


[[send_to_faucet]]
.Odeslání 1 etheru do kohoutku
image::images/send_to_faucet.png["Odeslání 1 etheru do kohoutku"]

Jejda! Pravděpodobně jste si všimli, že transakci nemůžete dokončit - MetaMask říká, že nemáte dostatečný zůstatek. Na první pohled se to může zdát matoucí: máte 1 ETH, chcete poslat 1 ETH, tak proč MetaMask říká, že nemáte dostatek finančních prostředků?

((("gas","basics")))Odpověď je kvůli nákladům na _plyn_. Každá  Ethereum transakce vyžaduje zaplacení poplatku, který těžaři vybírají za ověření transakce. Poplatky v Ethereum jsou účtovány ve virtuální měně nazývané plyn. V rámci transakce platíte za plyn etherem.

[NOTE]
====
((("gas","on test networks")))Poplatky se vyžadují také ve zkušebních sítích. Bez poplatků by se zkušební síť chovala odlišně od hlavní sítě, což by z ní udělalo nevhodnou testovací platformu. Poplatky také chrání testovací sítě před útoky DoS a špatně vytvořenými chytrými kontrakty (např. nekonečné cykly), stejně jako chrání hlavní síť.
====

Když jste odeslali transakci, MetaMask vypočítal průměrnou cenu plynu za posledních úspěšných transakcí na 3 gwei, což znamená gigawei. Wei je nejmenší pass:[<span class="keep-together">dílčí jednotka</span>] měny ether, jak jsme diskutovali v <<ether_units>>. Limit plynu je stanoven na náklady za odeslání základní transakce, což je 21 000 jednotek plynu. Proto maximální částka, kterou utratíte, je 3 * 21 000 gwei = 63 000 gwei = 0,000063 ETH. (Vezměte na vědomí, že průměrné ceny plynu mohou kolísat, protože jsou převážně určovány převážně těžaři. V další kapitole uvidíme, jak můžete zvýšit / snížit svůj limit plynu, abyste zajistili, že v případě potřeby bude mít transakce přednost.)

Shrneme si to: provedení transakce s 1 ETH nás príjde na  1.000063 ETH. MetaMask zobrazuje částky zaokrouhlené na několik platných desetinných míst. Uvidíme tedy zaokrouhlenou částku 1 ETH, ale skutečná částka, kterou potřebujete, je 1.000063 ETH a máte pouze 1 ETH. Klepnutím na Odmítnout zrušíte tuto transakci.

Pojďme získat další testovací ether! Znovu klikněte na zelené tlačítko „request 1 ether from the faucet“ a počkejte několik sekund. Nebojte se, kohoutek by měl mít dostatek éteru a dá vám více, pokud o to požádáte.

Jakmile budete mít zůstatek 2 ETH, můžete to zkusit znovu. Tentokrát, když kliknete na oranžové tlačítko darování „1 ether“, máte dostatečný zůstatek k dokončení transakce. Jakmile MetaMask zobrazí okno platby, klikněte na Odeslat. Po tom všem byste měli vidět zůstatek 0,999937 ETH, protože jste poslali 1 ETH do kohoutku s poplatkem 0,000063 ETH v plynu. (((range="endofrange", startref="ix_02intro-asciidoc7")))(((range="endofrange", startref="ix_02intro-asciidoc6")))

[[explore_tx_history]]
==== Zkoumání transakční historie adresy

((("addresses","exploring transaction history of", id="ix_02intro-asciidoc8", range="startofrange")))((("MetaMask","exploring transaction history of an address with", id="ix_02intro-asciidoc9", range="startofrange")))Nyní jste se stali odborníkem na používání MetaMasku pro odesílání a přijímání testovacího etheru. Vaše peněženka obdržela alespoň dvě platby a poslala alespoň jednu. Všechny tyto transakce můžete zobrazit pomocí průzkumníka bloků _ropsten.etherscan.io_. Můžete buď zkopírovat svou adresu peněženky a vložit ji do vyhledávacího pole průzkumníka bloků, nebo nechat MetaMask stránku otevřít pro vás. Vedle ikony účtu v MetaMasku se zobrazí tlačítko se třemi tečkami. Kliknutím na ni zobrazíte nabídku možností souvisejících s účtem (viz <<metamask_account_context_menu>>).

[[metamask_account_context_menu]]
.Kontextová nabídka účtu v MetaMasku
image::images/metamask_account_context_menu.png["Kontextová nabídka účtu v MetaMasku"]

Výběrem možnosti „View account on Etherscan“ otevřete webovou stránku s prohlížečem bloků, který zobrazuje historii transakcí vašeho účtu, jak je uvedeno v <<block_explorer_account_history>>.

[[block_explorer_account_history]]
.Transakční historie adresy na Etherscan
image::images/block_explorer_account_history.png["Transakční historie adresy na Etherscan"]

Zde můžete vidět celou transakční historii vaší Ethereum adresy. Zobrazují se všechny transakce zaznamenané na Ropsten bločence, u kterých je vaše adresa odesílatelem nebo příjemcem. Kliknutím na několik z těchto transakcí zobrazíte další podrobnosti.

Můžete prozkoumat historii transakcí jakékoli adresy. Podívejte se na transakční historii adresy Ropsten testovacího kohoutku (tip: jedná se o adresu odesílatele uvedenou v nejstarší platbě na vaši adresu). Můžete vidět veškerý testovací ether odeslaný z kohoutku na vaší adresu, ale i na jiné adresy. Každá transakce, kterou vidíte, může vést k více adresám a více transakcím. Brzy budete ztraceni v bludišti propojených dat. Veřejné bločenky obsahují obrovské množství informací, z nichž všechny lze programově prozkoumat, jak uvidíme v budoucích příkladech (((range="endofrange", startref="ix_02intro-asciidoc9")))(((range="endofrange", startref="ix_02intro-asciidoc8"))).(((range="endofrange", startref="ix_02intro-asciidoc3")))(((range="endofrange", startref="ix_02intro-asciidoc2")))

[[intro_world_computer]]
=== Představujeme světový počítač

((("Ethereum (generally)","and EVM")))((("EVM (Ethereum Virtual Machine)","as world computer")))((("world computer, Ethereum as"))) Nyní jste vytvořili peněženku a poslali a přijali ether. Zatím jsme s Ethereem zacházeli jako s kryptoměnou. Ale Ethereum je mnohem, mnohem víc. Ve skutečnosti je kryptoměnná funkce pouze jedna z mnoha funkcí Etherea jako decentralizovaného světového počítače.((("smart contracts","ether and")))Ether je určen k platbě za provozování _chytrých kontraktů_, což jsou počítačové programy, které běží na emulovaném počítači zvaném _Ethereum Virtual Machine_ (EVM).

EVM je globálně jednoinstanční (singleton), což znamená, že funguje, jako by šlo o globální počítač existující pouze v jedné instanci, který běží všude. Každý uzel v síti Ethereum provozuje lokální kopii EVM, aby ověřil provedení kontraktu, zatímco Ethereum bločenka zaznamenává měnící se _stav_ tohoto světového počítače, když zpracovává transakce a chytré kontrakty. Budeme o tom diskutovat mnohem podrobněji v <<evm_chapter>>.

[[EOA_contracts]]
=== Externě vlastněné účty (EOA) a kontrakty

((("contract accounts", seealso="smart contracts")))((("EOA (Externally Owned Account)","basics")))((("Ethereum (generally)","EOAs and contracts")))((("smart contracts","basics")))Typ účtu, který jste vytvořili v peněžence MetaMask, se nazývá externě vlastněny účet (EOA). Externě vlastněné účty jsou účty, které mají soukromý klíč; mít soukromý klíč znamená kontrolu přístupu k prostředkům nebo kontraktům. Nyní pravděpodobně hádáte, že existuje jiný typ účtu. Dalším typem účtu je _účet kontraktu_. Účet kontraktu má kód chytrého kontraktu, který jednoduchý EOA nemůže mít. Účet kontraktu navíc nemá soukromý klíč. Místo toho je vlastněn (a kontrolován) podle logiky svého kódu chytrého kontraktu: softwarového programu zaznamenaného do Ethereum bločenky při vytvoření účtu kontraktu a prováděného EVM.

Kontrakty mají adresy, stejně jako EOA. Kontrakty mohou také odesílat a přijímat ether, stejně jako EOA. Pokud je však cílem transakce adresa kontraktu, způsobí to, že tento kontrakt _bude spuštěn v EVM. Kontrakt jako svá vstupní data využije transakci a její vstupní data. Kromě etheru mohou transakce obsahovat _data_ označující, která konkrétní funkce v kontraktu má být spuštěna a jaké parametry se mají předat této funkci. Tímto způsobem mohou transakce _volat_ funkce v rámci kontraktů.

Protože účet kontraktu nemá soukromý klíč, nemůže transakci _iniciovat_, zahájit. Transakce mohou iniciovat pouze EOA, ale kontrakty mohou _reagovat_ na transakce voláním jiných kontraktů a vytvářením složitých cest provádění. Typickým použitím je, že EOA odešle transakce s požadavkem do vícepodpisové peněženky chytrého kontraktu, aby ten odeslal ETH na jinou adresu. Typickým vzorem programování DApp je mít kontrakt A, která volá kontrakt B, aby se zachoval sdílený stav mezi uživateli kontraktu A.

V následujících několika sekcích naprogramujeme náš první kontrakt. Poté se naučíte, jak vytvořit, financovat a používat tento kontrakt s vaší peněženkou MetaMask a testovacím etherem v testovací síti Ropsten.

[[simple_contract_example]]
=== Jednoduchá smlouva: Testovací Ethereum kohoutek

((("contract accounts","creating", seealso="Faucet.sol contract", id="ix_02intro-asciidoc10", range="startofrange")))((("Faucet.sol contract (test example)","creating", id="ix_02intro-asciidoc11", range="startofrange")))Ethereum má mnoho různých vysokoúrovňových jazyků, z nichž všechny lze použít k napsání kontraktu a vytvoření bajtkódu EVM. Několik  nejvýznamnějších a nejzajímavějších jsme představili v <<high_level_languages>>. Jeden vysokoúrovňový  jazyk se pro programování chytrých kontraktů zdaleka nejčastěji: Solidity. ((("Wood, Dr. Gavin","and Solidity")))Solidity byl vytvořen Dr. Gavinem Woodem, spoluautorem této knihy, a stal se nejrozšířenějším jazykem Etherea (a dálších). Použijeme Solidity k napsání našeho prvního kontraktu.

((("Solidity","faucet.sol and")))Jako náš první příklad (<<solidity_faucet_example>>), napíšeme kontrakt, který řídí _kohoutek_. Už jste použili kohoutek k získání testovacího etheru v testovací síti Ropsten. Kohoutek je relativně jednoduchá věc: rozdává ether na jakoukoli adresu, která zažádá, a může být pravidelně doplňováň. Kohoutek můžete implementovat jako peněženku ovládanou člověkem nebo webovým serverem.

[[solidity_faucet_example]]
.Faucet.sol: Chytrý kontrakt Kohoutek v Solidity
====
[source,solidity,linenums]
----
include::code/Solidity/Faucet.sol[]
----
====

[NOTE]
====
Všechny ukázky kódu uvedené v této knize najdete v podadresáři _code_ https://github.com/ethereumbook/ethereumbook/[GitHub úložiště této knihy]. Konkrétně náš kontrakt _Faucet.sol_ je v:

----
code/Solidity/Faucet.sol
----
====

Toto je velmi jednoduchý kontrakt,  tak jednoduchý, jak si jen lze představit. Je to také  _vadný_ kontrakt, který demonstruje řadu špatných praktik a slabých míst zabezpečení. Všechny jeho nedostatky prozkoumáme v pozdějších sekcích. Ale prozatím se podívejme, co tento kontrakt dělá a jak to funguje, řádek po řádku. Rychle si všimnete, že mnoho prvků Solidity je podobných existujícím programovacím jazykům, jako je JavaScript, Java nebo C++.

První řádek je komentář:

[[comment]]
[source,solidity]
----
// Our first contract is a faucet!
----

Komentáře jsou určeny pro lidi a nejsou zahrnuty do spustitelného bajtkódu EVM. Obvykle je umístíme na řádek před kód, který se snažíme vysvětlit, nebo někdy na stejný řádek. Komentáře začínají dvěma lomítky: +//+. Všechno od prvního lomítka až do konce tohoto řádku je považováno za prázdnou řádku a je ignorováno.

Další řádek je místo, kde začíná naš skutečný kontrakt:

[[contract_definition]]
[source,solidity]
----
contract Faucet {
----

Tento řádek deklaruje kontrakt (+contract+), podobný deklaraci třídy (+class+) v jiných objektově orientovaných jazycích. Definice kontraktu zahrnuje všechny řádky mezi složenými složenými závorkami (pass:[<code>{}</code>]), které definují jeho _rozsah_, podobně jako jsou složené složené závorky použity v mnoha jiných programovacích jazycích.

Dále deklarujeme první funkci kontraktu +Faucet+:

[[withdraw_function]]
[source,solidity]
----
function withdraw(uint withdraw_amount) public {
----

Funkce se nazývá +withdraw+ a vyžaduje jeden parametr typu celé číslo bez znaménka (+uint+) s názvem +withdraw_amount+. Je deklarována jako veřejná funkce, což znamená, že ji lze volat jinými kontrakty. Následuje definice funkce, ohraničená složenými závorkami. První část funkce +withdraw+ stanoví maximální limit pro výběr:

[[withdraw_limit]]
[source,solidity]
----
require(withdraw_amount <= 100000000000000000);
----

Používá vestavěnou funkci Solidity +require+ k testování předpokladů, že +withdraw_amount+ je menší nebo rovno 100 000 000 000 000 000 wei, což je základní jednotka etheru (viz <<ether_denominations>>) a odpovídá 0,1 etheru. Pokud je funkce +withdraw+ volána s hodnotou parametru +withdraw_amount+ větším než tato částka, funkce +require+ způsobí zastavení provádění kontraktu a selže vyvoláním  _výjimky_. Všimněte si, že příkazy v Solidity musí být zakončeny středníkem.

Tato část kontraktu je hlavní logikou našeho kohoutku. Řídí tok finančních prostředků z kontraktu maximálního limitu pro výběr. Je to velmi jednoduché ovládání, ale může vám  demonstrovat sílu programovatelné bločenky: decentralizovaný software kontrolující peníze.

Dále následuje samotný výběr:

[[withdraw_command]]
[source,solidity]
----
msg.sender.transfer(withdraw_amount);
----

Děje se zde několik zajímavých věcí. Objekt +msg+ je jedním ze vstupů, ke kterým mají přístup všechny kontrakty. Představuje transakci, která vedla k provedení tohoto kontraktu. Objekt +sender+ je adresa odesílatele transakce. Funkce +transfer+ je vestavěná funkce, která přenáší ether z aktuálního kontraktu na adresu odesílatele. Při zpětném čtení to znamená převod (+transfer+) + k odesilateli (+sender+) zprávy (+msg+), který vyvolal spuštění tohoto kontraktu. Funkce +transfer+ požaduje jediný parametr a to odesílanou částku. Předáme ji hodnotu parametru +withdraw_amount+, se kterou byla volána funkce +withdraw+ o několik řádků výše.  

Hnedka další řádek je uzavírací složená závorka, která označuje konec definice naší funkce +withdraw+.

Dále deklarujeme ještě jednu funkci:

[[fallback_function]]
[source,solidity]
----
function () external payable {}
----

((("fallback function")))Tato funkce se nazývá _výchozí_,  _implicitní_ nebo _fallback_. Funkce je volána, pokud transakce, která spustila kontrakt, neuvedla žádnou z deklarovaných funkcí v kontraktu nebo vůbec žádnou funkci nebo neobsahovala data. Kontrakty mohou mít jednu takovou výchozí funkci (bez názvu) a je to obvykle ta, která přijímá ether. Proto je definována jako externí a platby přijímající (payable) funkce, což znamená, že může do smlouvy přijmout ether. Nedělá nic jiného než, že přijímá ether, jak ukazuje prázdná definice v složených závorkách pass: [(<code>{}</code>)]. Pokud provedeme transakci, která pošle ether na adresu kontraktu, jako by to byla peněženka, tato funkce to zvládne.

Přímo pod naší výchozí funkcí je závěrečná uzavírací složená závorka, která uzavírá definici kontraktu +Faucet+. To je ono! (((range="endofrange", startref="ix_02intro-asciidoc11")))(((range="endofrange", startref="ix_02intro-asciidoc10")))

[[compile_faucet_contract]]
=== Kompilace kontraktu Kohoutek

((("compiling","Faucet.sol contract", id="ix_02intro-asciidoc12", range="startofrange")))((("Faucet.sol contract (test example)","compiling", id="ix_02intro-asciidoc13", range="startofrange")))Nyní, když máme náš první příklad kontrraktu, musíme použít překladač Solidity k převodu kódu Solidity na bajtkód EVM, aby jej mohl provést EVM na samotné bločence.

Kompilátor Solidity existuje jako samostatný spustitelný soubor, ale i jako součást různých rámců a integrovaných vývojových prostředí (IDE). Aby to bylo co nejjednodušší, použijeme jeden z populárnějších IDE, nazvaný _Remix_.

((("Remix IDE")))Pomocí prohlížeče Chrome (s peněženkou MetaMask, kterou jste nainstalovali dříve) přejděte na Remix IDE na adrese https://remix.ethereum.org[].

Když poprvé načtete Remix, zobrazí vzorový kontrakt nazvaný _ballot.sol_. Ten nepotřebujeme, takže jej zavřete kliknutím na +x+ v rohu karty, jak je vidět v <<remix_close_tab>>.

[[remix_close_tab]]
.Zavření záložky výchozího příkladu
image::images/remix_close_tab.png["Zavření záložky výchozího příkladu"]

Nyní přidejte novou kartu kliknutím na kruhové znaménko plus na levém horním panelu nástrojů, jak je vidět v <<remix_toolbar>>. Pojmenujte nový soubor _Faucet.sol_.

[[remix_toolbar]]
.Kliknutí na znaménko plus pro otevření nového okna
image::images/remix_toolbar.png["Kliknutí na znaménko plus pro otevření nového okna"]

Až budete mít novou kartu otevřenou, zkopírujte a vložte kód z našeho příkladu _Faucet.sol_, jak je vidět v <<remix_faucet_load>>.

[[remix_faucet_load]]
.Okopírování kódu Kohoutku do nového okna
image::images/remix_faucet_load.png["Okopírování kódu Kohoutku do nového okna"]

Po načtení kontraktu _Faucet.sol_ do Remix IDE, IDE automaticky zkompiluje kód. Pokud vše půjde dobře, zobrazí se zelené pole s nápisem „Faucet“ vpravo na kartě Compile, který potvrdí úspěšné dokončení kompilace (viz <<remix_compile>>).

[[remix_compile]]
.Remix úspěšně zkompiluje kontrakt Faucet.sol
image::images/remix_compile.png[""]

Pokud se něco pokazí, nejpravděpodobnějším problémem je, že Remix IDE používá verzi kompilátoru Solidity, která se liší od 0.5.12. V takovém případě naše direktiva pragma zabrání kompilaci _Faucet.sol_. Chcete-li změnit verzi kompilátoru, přejděte na kartu Nastavení, nastavte verzi na 0.5.12 a akci opakujte.

Kompilátor Solidity nyní zkompiloval náš _Faucet.sol_ do bajtkódu EVM. Pokud jste zvědaví, bajtkód vypadá takto:

[[faucet_bytecode]]
----
PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xF JUMPI PUSH1 0x0 DUP1
REVERT JUMPDEST PUSH1 0xE5 DUP1 PUSH2 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN
STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3F JUMPI
PUSH1 0x0 CALLDATALOAD PUSH29
0x100000000000000000000000000000000000000000000000000000000
SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x2E1A7D4D EQ PUSH1 0x41 JUMPI
JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH1 0x4B JUMPI PUSH1 0x0 DUP1 REVERT
JUMPDEST PUSH1 0x5F PUSH1 0x4 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1
SWAP2 SWAP1 POP POP PUSH1 0x61 JUMP JUMPDEST STOP JUMPDEST PUSH8
0x16345785D8A0000 DUP2 GT ISZERO ISZERO ISZERO PUSH1 0x77 JUMPI PUSH1 0x0 DUP1
REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND
PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1
0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO
ISZERO PUSH1 0xB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP STOP LOG1 PUSH6
0x627A7A723058 KECCAK256 PUSH9 0x13D1EA839A4438EF75 GASLIMIT CALLVALUE LOG4 0x5f
PUSH24 0x7541F409787592C988A079407FB28B4AD000290000000000
----

Nejste rádi, že používáte vysokoúrovňový programovací jazyk, jako je Solidity, namísto programování přímo v bajtkódu EVM? Já jsem rád také! (((range="endofrange", startref="ix_02intro-asciidoc13")))(((range="endofrange", startref="ix_02intro-asciidoc12")))

[[create_contract]]
=== Vytvoření kontraktu na bločence

((("blockchain","creating contract on", id="ix_02intro-asciidoc14", range="startofrange")))((("Faucet.sol contract (test example)","on the blockchain", id="ix_02intro-asciidoc15", range="startofrange")))Máme tedy kontrakt. Zkompilovali jsme ji do bajtkódu. Nyní musíme „zaregistrovat“ kontrakt na Ethereum bločence. K otestování našeho kontraktu použijeme testovací síť Ropsten, na tuto bločenku chceme kontrakt zapsat.

((("zero address","contract registration")))Registrace kontraktuna bločenku zahrnuje vytvoření speciální transakce, jejímž cílem je adresa +0x00000000000000000000000000000000000000000000+, také známá jako _nulová adresa_. Nulová adresa je speciální adresa, která říká Ethereum bločence, že chcete zaregistrovat kontrakt. Naštěstí to Remix IDE zvládne za vás a odešle transakci pomocí MetaMask.

((("Remix IDE", id="ix_02intro-asciidoc16", range="startofrange")))Nejprve přejděte na kartu Run a v rozevíracím seznamu Environment vyberte Injected Web3. Tím se propojí Remix IDE s peněženkou MetaMask a přes MetaMask s testovací sítí Ropsten. Jakmile to uděláte, můžete vidět Ropsten v Environment. Ve výběrovém poli  Account se také zobrazuje adresa vaší peněženky (viz <<remix_run>>).

[[remix_run]]
.Remix IDE záložka Run, s vybraným prostředím Injected Web3
image::images/remix_run.png["Remix IDE záložka Run, s vybraným prostředím Injected Web3"]

Přímo pod nastavením Run, které jste právě potvrdili, je kontrakt +Faucet+, připravený k vytvoření. Klikněte na tlačítko Deploy zobrazené v <<remix_run>>.

Remix vytvoří speciální „vytvářející“ transakci a MetaMask vás požádá o schválení, jak ukazuje <<remix_metamask_create>>. Všimnete si, že transakce vytvoření kontraktu neobsahuje žádný ether, ale obsahuje 262 bajtů dat (zkompilovaný kontrakt) a spotřebuje 10 gwei v plynu. Kliknutím na Submit ji schválíte.

[[remix_metamask_create]]
.MetaMask ukazující transakci vytvářející kontrakt
image::images/remix_metamask_create.png["MetaMask ukazující transakci vytvářející kontrakt"]

Nyní musíte počkat. Bude trvat asi 15 až 30 sekund než transakce vytvářející kontrakt bude vytěžena na Ropstenu. Zdá se, že Remix nic nedělá, ale buďte trpěliví.

Jakmile je kontrakt vytvořen, objeví se ve spodní části záložky Run (viz <<remix_contract_interact>>).

[[remix_contract_interact]]
.Kontrakt Faucet ŽIJE!
image::images/remix_contract_interact.png["Kontrakt Faucet ŽIJE!"]

Všimněte si, že kontrakt +Faucet+ má nyní svou vlastní adresu: Remix ji zobrazuje jako “Faucet at 0x72e...c7829” (ačkoli vaše adresa, náhodná písmena a čísla, se budou lišit). Malý symbol schránky vpravo umožňuje kopírovat adresu kontrakty do vaší schránky. Použijeme to v následující sekci.(((range="endofrange", startref="ix_02intro-asciidoc16")))(((range="endofrange", startref="ix_02intro-asciidoc15")))

[[interact_contract]]
=== Interakce s kontraktem

((("Faucet.sol contract (test example)","interacting with", id="ix_02intro-asciidoc17", range="startofrange")))Zopakujme, co jsme se dosud dozvěděli: Ethereum kontrakty jsou programy, které ovládat peníze, které běží uvnitř virtuálního stroje zvaného EVM. Jsou vytvářeny speciální transakcí, která odešle jejich bajtkód, který se má zaznamenat do bločenky. Jakmile jsou vytvořeny na bločence, mají Ethereum adresu, stejně jako peněženky. Kdykoli někdo odešle transakci na adresu kontraktu, způsobí to, že kontrakt běží v EVM, s transakcí jako jejím vstupem. Transakce odesílané na adresu pass:[<span class="keep-together">kontraktu</span>] mohou obsahovat ether nebo data nebo obojí. Pokud obsahují ether, je „uložen“ do zůstatku kontraktu. Pokud obsahují data, mohou data specifikovat pojmenovanou funkci v kontraktu a volat ji, předat funkci parametry.

[[view_contract_address]]
==== Zobrazení adresy kontraktu v prohlížeči bloků

((("Faucet.sol contract (test example)","viewing contract address in a block explorer")))Nyní máme smlouvu zaznamenanou v bločence a vidíme, že má Ethereum adresu. Podívejme se na to v průzkumníku bloků _ropsten.etherscan.io_ a uvidíme, jak vypadá kontrakt. V Remix IDE zkopírujte adresu kontraktu kliknutím na ikonu schránky vedle jejího názvu (viz <<remix_contract_address>>).

[[remix_contract_address]]
.Okopírování adresy kontraktu z Remixu
image::images/remix_contract_address.png["Okopírování adresy kontraktu z Remixu"]

Udržujte Remix otevřený; k tomu se vrátíme později. Nyní přejděte v prohlížeči na adresu _ropsten.etherscan.io_ a vložte adresu do vyhledávacího pole. Měli byste vidět historii Ethereum adresy kontraktu, jak je uvedeno v <<etherscan_contract_address>>.(((range="endofrange", startref="ix_02intro-asciidoc17")))

[[etherscan_contract_address]]
.Zobrazení adresy kontraktu Faucet v průzkumníku bloku Etherscan
image::images/etherscan_contract_address.png["Zobrazení adresy kontraktu Faucet v průzkumníku bloku Etherscan"]

[[fund_contract]]
==== Zaslání financí kontraktu

((("Faucet.sol contract (test example)","sending ether to", id="ix_02intro-asciidoc18", range="startofrange")))Prozatím má kontrakt ve své historii pouze jednu transakci: transakce vytvoření kontraktu. Jak vidíte, kontrakt také neobsahuje ether (nulový zůstatek). Je to proto, že jsme kontrakt vytvářející transakci neposlali žádný ether, i když jsme mohli.

Náš kohoutek potřebuje finanční prostředky! Naším prvním úkolem bude použití MetaMasku k odeslání etheru ve prospěch kontraktu. Adresu kontraktu byste měli mít i nadále ve své schránce (pokud ne, zkopírujte ji znovu z Remixu). Otevřete MetaMask a pošlete kontraktu 1 ether, přesně jako na jakoukoli jinou adresu Ethereum (<<metamask_send_to_contract>>).

[[metamask_send_to_contract]]
.Poslání 1 etheru na adresu kontraktu
image::images/metamask_send_to_contract.png[""]

Pokud za minutu znovu načtete průzkumníka bloků Etherscan, ukáže další transakci na adrese kontraktu a aktualizovaný zůstatek 1 ether.

Pamatujete si nepojmenovanou, výchozí, externí, platby přijímající funkci v našem _Faucet.sol_ kódu? Vypadala takto:

[[fallback_function_review]]
[source,solidity]
----
function () external payable {}
----

Když jste odeslali transakci na adresu kontraktu, ale nespecifikovali jste žádná data, se kterými se má funkce volat, byla zavolána tato výchozí funkce. Protože jsme ji označili jako platby přijímající (+payable+), přijala a vložila 1 ether do zůstatku na účtu kontraktu. Vaše transakce způsobila spuštění kontraktu v EVM a aktualizaci jeho zůstatku. Financovali jste kohoutek! (((range="endofrange", startref="ix_02intro-asciidoc18")))

[[withdraw_from_contract]]
==== Výběr financí z našeho kontraktu

((("Faucet.sol contract (test example)","withdrawing funds from", id="ix_02intro-asciidoc19", range="startofrange")))((("withdrawal of funds from contract", id="ix_02intro-asciidoc20", range="startofrange")))Dále si vybereme některé finanční prostředky z kohoutku. Chcete-li vybírat, musíme sestavit transakci, která volá funkci+withdraw+ a předá jí parametr +withdraw_amount+. Aby to prozatím zůstalo jednoduché, Remix pro nás tuto transakci zkonstruuje a MetaMask ji předloží ke schválení.

Vraťte se na kartu Remix a podívejte se na kontrakt na kartě Run. Měli byste vidět oranžové pole označené +withdraw+ se záznamem pole označeným +uint256 withdraw_amount+ (viz <<remix_contract_withdraw>>).

[[remix_contract_withdraw]]
.Funkce výběru financí z kontraktu Faucet.sol v Remixu
image::images/remix_contract_interact.png["Funkce výběru financí z kontraktu Faucet.sol v Remixu"]

Toto je Remix rozhraní ke kontraktu. To nám umožňuje vytvářet transakce, které volají funkce definované v kontraktu. Zadáme +withdraw_amount+ a kliknutím na tlačítko „withdraw“ vygenerujeme transakci.

Nejprve se podívejme na +withdraw_amount+. Chceme zkusit odebrat 0,1 etheru, což je maximální částka povolená naším kontraktem. Nezapomeňte, že všechny hodnoty měny v Ethereum jsou vnitřně uváděny ve wei a naše funkce +withdraw+ očekává, že její parametr ++withdraw_amount+ bude také zadán ve wei. Požadované množství je 0,1 etheru, což je 100 000 000 000 000 000 wei (1 následovaná 17 nulami).



[TIP]
====
Vzhledem k omezení v JavaScriptu nemůže Remix zpracovat číslo až 10^17. Místo toho ji uzavíráme do dvojitých uvozovek, abychom Remixu to umožnili přijmout jako řetězec a manipulovat s ním jako s velkým číslem (+BigNumber+). Pokud tento parametr neuzavřeme do uvozovek, Remix IDE jej nedokáže zpracovat a zobrazí se  chybové hlášení „Error encoding arguments: Error: Assertion failed.“
====

Do pole +withdraw_amount+ zadejte „100000000000000000“ (s uvozovkami) a klikněte na tlačítko„withdraw“ pro výběr (viz <<remix_withdraw>>).

[[remix_withdraw]]
.Vytvoření výběrové transakce kliknutím na tlačítko „withdraw“ v Remixu
image::images/remix_withdraw.png[""]

MetaMask zobrazí transakční okno, ve kterém můžete souhlasit. Kliknutím na Confirm odešlete své volání funkce výběru našeho kontraktu (viz <<metamask_withdraw>>).

[[metamask_withdraw]]
.MetaMask transakce k vyvolání funkce výběru
image::images/metamask_withdraw.png["MetaMask transakce k vyvolání funkce výběru"]

Počkejte minutu a pak znovu načtěte průzkumníka bloků Etherscan, aby se transakce projevila v historii transakcí kontraktu  +Faucet+ (viz <<etherscan_withdrawal_tx>>).

[[etherscan_withdrawal_tx]]
.Ethercan zobrazuje transakci, která volá funkci výběru
image::images/etherscan_withdrawal_tx.png["Ethercan zobrazuje transakci, která volá funkci výběru"]


Nyní vidíme novou transakci s adresou smlouvy jako cílem a hodnotou 0 ether. Zůstatek kontraktu se změnil a nyní je 0,9 etheru, protože nám poslal 0,1 etheru podle požadavku. Nevidíme však „odchozí“ transakci v _transakční historii kontraktu_.

Kde je odchozí výběr? Na stránce transakční historie adresy kontraktu se objevila nová karta s názvem vnitřní transakce (Internal Transactions). ((("internal transaction (message)")))Protože přenos 0,1 etheru pochází z kódu kontraktu, jedná se o interní transakci (nazývanou také _zpráva_). Kliknutím na tuto kartu ji zobrazíte (viz <<etherscan_withdrawal_internal>>).


Tato „interní transakce“ byla zaslána kontraktem na tomto řádku kódu (z funkce pass: [<code><span class="keep-together">withdraw</span></code>] v _Faucet.sol_):

[[withdraw_command_review]]
[source,solidity]
----
msg.sender.transfer(withdraw_amount);
----

Shrnutí: z vaší peněženky MetaMask jste odeslali transakci, která obsahovala data a instrukce k zavolání funkce +withdraw+ s hodnotou parametru +withdraw_amount+ 0,1 etheru. Tato transakce způsobila, že kontrakt byl spuštěn uvnitř EVM. Jakmile EVM spustil funkci +withdraw+ kontraktu +withdraw+, nejprve volal funkci +require+ a ta potvrdila, že požadované množství bylo menší nebo rovno maximálnímu povolenému výběru 0,1 etheru. Pak zavolal funkci +transfer+, aby vám poslal ether. Spuštění funkce +transfer+ vygenerovalo vnitřní transakci, která vložila 0,1 éteru do vaší peněženky ze zůstatku kontraktu. To je ten, který je zobrazen na kartě Internal Transactions v Etherscan. (((range="endofrange", startref="ix_02intro-asciidoc20")))(((range="endofrange", startref="ix_02intro-asciidoc19"))).(((range="endofrange", startref="ix_02intro-asciidoc14")))

[[etherscan_withdrawal_internal]]
.Etherscan zobrazuje vnitřní transakci převádějící ether z kontraktu
image::images/etherscan_withdrawal_internal.png["Etherscan zobrazuje vnitřní transakci převádějící ether z kontraktu"]

[[intro_conclusion]]
=== Závěry

V této kapitole jste založili peněženku pomocí MetaMasku a naplnili ji prostředky pomocí kohoutku v testovací síti Ropsten. Získali jste ether na Ethereum adresu vaší peněženky, pak jste poslali ether na Ethereum adresu kohoutku.

Dále jste v Solidity napsali kontrakt kohoutku. Použili jste Remix IDE k sestavení kontraktu do bajtkódu EVM, pak jste použili Remix k vytvoření transakce a vytvořili kontrakt +Faucet+ na Ropsten bločence. Jakmile byl kontrakt +Faucet+ vytvořen, získal Ethereum adresu a vy jste jí poslali nějaký ether. Nakonec jste vytvořili transakci pro volání funkce +withdraw+  a úspěšně jste požádali o 0,1 etheru. Kontrakt zkontrolovala požadavek a zaslal vám 0,1 etheru pomocí vnitřní transakce.

Může to vypadat jako moc, ale právě jste úspěšně spolupracovali se softwarem, který řídí peníze v decentralizovaném světovém počítači.

Naprogramujeme mnohem více chytrých kontraktů <<smart_contracts_chapter>> a seznámíme se s osvědčenými postupy a bezpečnostními hledisky v <<smart_contract_security>>. (((range="endofrange", startref="ix_02intro-asciidoc0")))